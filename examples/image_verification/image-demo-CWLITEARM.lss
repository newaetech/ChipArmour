
image-demo-CWLITEARM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000175c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080018e4  080018e4  000118e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800191c  0800191c  00020458  2**0
                  CONTENTS
  4 .ARM          00000000  0800191c  0800191c  00020458  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800191c  0800191c  00020458  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800191c  0800191c  0001191c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001920  08001920  00011920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000458  20000000  08001924  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  20000458  08001d7c  00020458  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  200004f4  08001d7c  000204f4  2**0
                  ALLOC
 11 .ARM.attributes 0000002c  00000000  00000000  00020458  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000633d  00000000  00000000  00020484  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000c89  00000000  00000000  000267c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000020ae  00000000  00000000  0002744a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001e0  00000000  00000000  000294f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000003b0  00000000  00000000  000296d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000017e1  00000000  00000000  00029a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00001ae1  00000000  00000000  0002b269  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007f  00000000  00000000  0002cd4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000674  00000000  00000000  0002cdcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000144  00000000  00000000  0002d440  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000077  00000000  00000000  0002d584  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000458 	.word	0x20000458
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080018cc 	.word	0x080018cc

080001ac <frame_dummy>:
 80001ac:	4b0c      	ldr	r3, [pc, #48]	; (80001e0 <frame_dummy+0x34>)
 80001ae:	b143      	cbz	r3, 80001c2 <frame_dummy+0x16>
 80001b0:	480c      	ldr	r0, [pc, #48]	; (80001e4 <frame_dummy+0x38>)
 80001b2:	490d      	ldr	r1, [pc, #52]	; (80001e8 <frame_dummy+0x3c>)
 80001b4:	b510      	push	{r4, lr}
 80001b6:	f3af 8000 	nop.w
 80001ba:	480c      	ldr	r0, [pc, #48]	; (80001ec <frame_dummy+0x40>)
 80001bc:	6803      	ldr	r3, [r0, #0]
 80001be:	b923      	cbnz	r3, 80001ca <frame_dummy+0x1e>
 80001c0:	bd10      	pop	{r4, pc}
 80001c2:	480a      	ldr	r0, [pc, #40]	; (80001ec <frame_dummy+0x40>)
 80001c4:	6803      	ldr	r3, [r0, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <frame_dummy+0x2a>
 80001c8:	4770      	bx	lr
 80001ca:	4b09      	ldr	r3, [pc, #36]	; (80001f0 <frame_dummy+0x44>)
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d0f7      	beq.n	80001c0 <frame_dummy+0x14>
 80001d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80001d4:	4718      	bx	r3
 80001d6:	4b06      	ldr	r3, [pc, #24]	; (80001f0 <frame_dummy+0x44>)
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d0f5      	beq.n	80001c8 <frame_dummy+0x1c>
 80001dc:	4718      	bx	r3
 80001de:	bf00      	nop
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080018cc 	.word	0x080018cc
 80001e8:	2000045c 	.word	0x2000045c
 80001ec:	20000458 	.word	0x20000458
 80001f0:	00000000 	.word	0x00000000

080001f4 <fw_update_stage1_failed>:
                       (void *)image);
    
}

void fw_update_stage1_failed(void * image)
{
 80001f4:	b508      	push	{r3, lr}
    //Prevent out of order function calls
    ca_state_machine(1);
 80001f6:	2001      	movs	r0, #1
 80001f8:	f000 fc3e 	bl	8000a78 <ca_state_machine>
    
    //Flag not set - boot as normal
    bootloader_flag = 0;
 80001fc:	4b01      	ldr	r3, [pc, #4]	; (8000204 <fw_update_stage1_failed+0x10>)
 80001fe:	2200      	movs	r2, #0
 8000200:	601a      	str	r2, [r3, #0]
 8000202:	bd08      	pop	{r3, pc}
 8000204:	20000000 	.word	0x20000000

08000208 <fw_update_stage2_failed>:
/**
 Step 2: If successful, we directly are booting new image.
 */

void fw_update_stage2_failed(void * image)
{
 8000208:	b508      	push	{r3, lr}
    ca_state_machine(2);
 800020a:	2002      	movs	r0, #2
 800020c:	f000 fc34 	bl	8000a78 <ca_state_machine>

    //Flag not set - boot as normal
    bootloader_flag = 0;
 8000210:	4b01      	ldr	r3, [pc, #4]	; (8000218 <fw_update_stage2_failed+0x10>)
 8000212:	2200      	movs	r2, #0
 8000214:	601a      	str	r2, [r3, #0]
 8000216:	bd08      	pop	{r3, pc}
 8000218:	20000000 	.word	0x20000000

0800021c <puts>:
{
 800021c:	b538      	push	{r3, r4, r5, lr}
 800021e:	1e45      	subs	r5, r0, #1
    while(*s){
 8000220:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8000224:	b924      	cbnz	r4, 8000230 <puts+0x14>
    putch('\n');
 8000226:	200a      	movs	r0, #10
 8000228:	f000 fd3a 	bl	8000ca0 <putch>
}
 800022c:	4620      	mov	r0, r4
 800022e:	bd38      	pop	{r3, r4, r5, pc}
        putch(*s++);
 8000230:	4620      	mov	r0, r4
 8000232:	f000 fd35 	bl	8000ca0 <putch>
 8000236:	e7f3      	b.n	8000220 <puts+0x4>

08000238 <boot_new_image_armoured>:
 {
 8000238:	b510      	push	{r4, lr}
 800023a:	4604      	mov	r4, r0
     ca_state_machine(2);
 800023c:	2002      	movs	r0, #2
 800023e:	f000 fc1b 	bl	8000a78 <ca_state_machine>
     puts("Booting image ");
 8000242:	4805      	ldr	r0, [pc, #20]	; (8000258 <boot_new_image_armoured+0x20>)
 8000244:	f7ff ffea 	bl	800021c <puts>
     puts(image->image_name);
 8000248:	4620      	mov	r0, r4
 800024a:	f7ff ffe7 	bl	800021c <puts>
     puts("\n");
 800024e:	4803      	ldr	r0, [pc, #12]	; (800025c <boot_new_image_armoured+0x24>)
 }
 8000250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     puts("\n");
 8000254:	f7ff bfe2 	b.w	800021c <puts>
 8000258:	080018f8 	.word	0x080018f8
 800025c:	08001913 	.word	0x08001913

08000260 <some_hash_function>:
{
 8000260:	4603      	mov	r3, r0
 8000262:	4401      	add	r1, r0
    uint32_t hash = 0;
 8000264:	2000      	movs	r0, #0
    while(data_len){
 8000266:	428b      	cmp	r3, r1
 8000268:	d100      	bne.n	800026c <some_hash_function+0xc>
}
 800026a:	4770      	bx	lr
        hash ^= image[i++];
 800026c:	f813 2b01 	ldrb.w	r2, [r3], #1
        hash ^= temp;
 8000270:	ea82 6030 	eor.w	r0, r2, r0, ror #24
 8000274:	e7f7      	b.n	8000266 <some_hash_function+0x6>
 8000276:	0000      	movs	r0, r0

08000278 <fw_update_stage1>:
{
 8000278:	b510      	push	{r4, lr}
 800027a:	4604      	mov	r4, r0
 800027c:	b088      	sub	sp, #32
    ca_state_machine(1);
 800027e:	2001      	movs	r0, #1
 8000280:	f000 fbfa 	bl	8000a78 <ca_state_machine>
    uint32_t hash = some_hash_function(((image_t *)image)->image_data, ((image_t *)image)->image_data_len);
 8000284:	f8d4 1440 	ldr.w	r1, [r4, #1088]	; 0x440
 8000288:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800028c:	f7ff ffe8 	bl	8000260 <some_hash_function>
    uint32_t crypto_ret = 0;
 8000290:	aa08      	add	r2, sp, #32
 8000292:	2300      	movs	r3, #0
 8000294:	f842 3d04 	str.w	r3, [r2, #-4]!
    ca_compare_func_eq(wrapper_some_crypto_function,
 8000298:	4b08      	ldr	r3, [pc, #32]	; (80002bc <fw_update_stage1+0x44>)
 800029a:	9303      	str	r3, [sp, #12]
 800029c:	4b08      	ldr	r3, [pc, #32]	; (80002c0 <fw_update_stage1+0x48>)
 800029e:	9301      	str	r3, [sp, #4]
 80002a0:	2304      	movs	r3, #4
    uint32_t hash = some_hash_function(((image_t *)image)->image_data, ((image_t *)image)->image_data_len);
 80002a2:	9006      	str	r0, [sp, #24]
    ca_compare_func_eq(wrapper_some_crypto_function,
 80002a4:	9300      	str	r3, [sp, #0]
 80002a6:	9404      	str	r4, [sp, #16]
 80002a8:	9402      	str	r4, [sp, #8]
 80002aa:	f204 4344 	addw	r3, r4, #1092	; 0x444
 80002ae:	a906      	add	r1, sp, #24
 80002b0:	4804      	ldr	r0, [pc, #16]	; (80002c4 <fw_update_stage1+0x4c>)
 80002b2:	f000 fa17 	bl	80006e4 <ca_compare_func_eq>
}
 80002b6:	b008      	add	sp, #32
 80002b8:	bd10      	pop	{r4, pc}
 80002ba:	bf00      	nop
 80002bc:	08000209 	.word	0x08000209
 80002c0:	08000239 	.word	0x08000239
 80002c4:	080002e9 	.word	0x080002e9

080002c8 <some_crypto_function>:
{
 80002c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80002ca:	ac02      	add	r4, sp, #8
    for(uint32_t i = 0; i < 4; i++){
 80002cc:	2300      	movs	r3, #0
{
 80002ce:	f844 0d04 	str.w	r0, [r4, #-4]!
    uint32_t hash = 0;    
 80002d2:	4618      	mov	r0, r3
        hash ^= temp;
 80002d4:	5cca      	ldrb	r2, [r1, r3]
 80002d6:	5d1d      	ldrb	r5, [r3, r4]
    for(uint32_t i = 0; i < 4; i++){
 80002d8:	3301      	adds	r3, #1
        hash ^= temp;
 80002da:	406a      	eors	r2, r5
    for(uint32_t i = 0; i < 4; i++){
 80002dc:	2b04      	cmp	r3, #4
        hash ^= temp;
 80002de:	ea82 6030 	eor.w	r0, r2, r0, ror #24
    for(uint32_t i = 0; i < 4; i++){
 80002e2:	d1f7      	bne.n	80002d4 <some_crypto_function+0xc>
}
 80002e4:	b003      	add	sp, #12
 80002e6:	bd30      	pop	{r4, r5, pc}

080002e8 <wrapper_some_crypto_function>:
{
 80002e8:	b510      	push	{r4, lr}
    expected = some_crypto_function(*((uint32_t *)input), manf_public_key);
 80002ea:	6800      	ldr	r0, [r0, #0]
{
 80002ec:	460c      	mov	r4, r1
    expected = some_crypto_function(*((uint32_t *)input), manf_public_key);
 80002ee:	4902      	ldr	r1, [pc, #8]	; (80002f8 <wrapper_some_crypto_function+0x10>)
 80002f0:	f7ff ffea 	bl	80002c8 <some_crypto_function>
    *((uint32_t *)output) = expected;
 80002f4:	6020      	str	r0, [r4, #0]
 80002f6:	bd10      	pop	{r4, pc}
 80002f8:	20000004 	.word	0x20000004

080002fc <rtos_init>:
    puts("RTOS Booted!\n");
 80002fc:	4801      	ldr	r0, [pc, #4]	; (8000304 <rtos_init+0x8>)
 80002fe:	f7ff bf8d 	b.w	800021c <puts>
 8000302:	bf00      	nop
 8000304:	08001907 	.word	0x08001907

08000308 <_ca_panic>:
{
 8000308:	b508      	push	{r3, lr}
    puts("Panic!");
 800030a:	4802      	ldr	r0, [pc, #8]	; (8000314 <_ca_panic+0xc>)
 800030c:	f7ff ff86 	bl	800021c <puts>
 8000310:	e7fe      	b.n	8000310 <_ca_panic+0x8>
 8000312:	bf00      	nop
 8000314:	08001915 	.word	0x08001915

08000318 <checkfwupdate_armoured>:
{
 8000318:	b570      	push	{r4, r5, r6, lr}
                               ca_fptr_voidptr_t equal_function,
                               void * equal_func_param,
                               ca_fptr_voidptr_t unequal_function,
                               void * unequal_func_param)
 {
    return _ca_compare_u32_eq(ca_retfast_u32(op1),
 800031a:	4c13      	ldr	r4, [pc, #76]	; (8000368 <checkfwupdate_armoured+0x50>)
    ca_state_machine(CA_STATE_INIT);
 800031c:	4813      	ldr	r0, [pc, #76]	; (800036c <checkfwupdate_armoured+0x54>)
{
 800031e:	b088      	sub	sp, #32
 8000320:	ad04      	add	r5, sp, #16
    ca_state_machine(CA_STATE_INIT);
 8000322:	f000 fba9 	bl	8000a78 <ca_state_machine>
 8000326:	ae06      	add	r6, sp, #24
    trigger_high();
 8000328:	f000 fcac 	bl	8000c84 <trigger_high>
 800032c:	f854 1b0c 	ldr.w	r1, [r4], #12
 8000330:	4628      	mov	r0, r5
 8000332:	f000 fbdf 	bl	8000af4 <ca_retfast_u32>
 8000336:	4630      	mov	r0, r6
 8000338:	490d      	ldr	r1, [pc, #52]	; (8000370 <checkfwupdate_armoured+0x58>)
 800033a:	f000 fbdb 	bl	8000af4 <ca_retfast_u32>
 800033e:	4b0d      	ldr	r3, [pc, #52]	; (8000374 <checkfwupdate_armoured+0x5c>)
 8000340:	9302      	str	r3, [sp, #8]
 8000342:	4b0d      	ldr	r3, [pc, #52]	; (8000378 <checkfwupdate_armoured+0x60>)
 8000344:	9403      	str	r4, [sp, #12]
 8000346:	9401      	str	r4, [sp, #4]
 8000348:	9300      	str	r3, [sp, #0]
 800034a:	e896 000c 	ldmia.w	r6, {r2, r3}
 800034e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000352:	f000 f81f 	bl	8000394 <_ca_compare_u32_eq>
    trigger_low();
 8000356:	f000 fc9c 	bl	8000c92 <trigger_low>
    ca_state_machine(3);
 800035a:	2003      	movs	r0, #3
 800035c:	f000 fb8c 	bl	8000a78 <ca_state_machine>
}
 8000360:	2000      	movs	r0, #0
 8000362:	b008      	add	sp, #32
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	bf00      	nop
 8000368:	20000000 	.word	0x20000000
 800036c:	fffff480 	.word	0xfffff480
 8000370:	feedb347 	.word	0xfeedb347
 8000374:	080001f5 	.word	0x080001f5
 8000378:	08000279 	.word	0x08000279

0800037c <main>:
{
 800037c:	b508      	push	{r3, lr}
    platform_init();
 800037e:	f000 fbe1 	bl	8000b44 <platform_init>
    init_uart();
 8000382:	f000 fc1f 	bl	8000bc4 <init_uart>
    trigger_setup();
 8000386:	f000 fc59 	bl	8000c3c <trigger_setup>
    checkfwupdate_armoured();
 800038a:	f7ff ffc5 	bl	8000318 <checkfwupdate_armoured>
    rtos_init();
 800038e:	f7ff ffb5 	bl	80002fc <rtos_init>
 8000392:	e7fe      	b.n	8000392 <main+0x16>

08000394 <_ca_compare_u32_eq>:
                   ca_uint32_t op2,
                  ca_fptr_voidptr_t  equal_function,
                  void * equal_func_param,
                  ca_fptr_voidptr_t  unequal_function,
                  void * unequal_func_param)
{
 8000394:	b590      	push	{r4, r7, lr}
 8000396:	b089      	sub	sp, #36	; 0x24
 8000398:	af00      	add	r7, sp, #0
 800039a:	2408      	movs	r4, #8
 800039c:	193c      	adds	r4, r7, r4
 800039e:	6020      	str	r0, [r4, #0]
 80003a0:	6061      	str	r1, [r4, #4]
 80003a2:	0039      	movs	r1, r7
 80003a4:	600a      	str	r2, [r1, #0]
 80003a6:	604b      	str	r3, [r1, #4]
    ca_landmine();
 80003a8:	4bc6      	ldr	r3, [pc, #792]	; (80006c4 <_ca_compare_u32_eq+0x330>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4ac6      	ldr	r2, [pc, #792]	; (80006c8 <_ca_compare_u32_eq+0x334>)
 80003ae:	4293      	cmp	r3, r2
 80003b0:	d006      	beq.n	80003c0 <_ca_compare_u32_eq+0x2c>
 80003b2:	4bc6      	ldr	r3, [pc, #792]	; (80006cc <_ca_compare_u32_eq+0x338>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	1c5a      	adds	r2, r3, #1
 80003b8:	4bc4      	ldr	r3, [pc, #784]	; (80006cc <_ca_compare_u32_eq+0x338>)
 80003ba:	601a      	str	r2, [r3, #0]
 80003bc:	f7ff ffa4 	bl	8000308 <_ca_panic>
 80003c0:	4ac3      	ldr	r2, [pc, #780]	; (80006d0 <_ca_compare_u32_eq+0x33c>)
 80003c2:	4bc3      	ldr	r3, [pc, #780]	; (80006d0 <_ca_compare_u32_eq+0x33c>)
 80003c4:	429a      	cmp	r2, r3
 80003c6:	d006      	beq.n	80003d6 <_ca_compare_u32_eq+0x42>
 80003c8:	4bc0      	ldr	r3, [pc, #768]	; (80006cc <_ca_compare_u32_eq+0x338>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	1c5a      	adds	r2, r3, #1
 80003ce:	4bbf      	ldr	r3, [pc, #764]	; (80006cc <_ca_compare_u32_eq+0x338>)
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	f7ff ff99 	bl	8000308 <_ca_panic>
 80003d6:	4bbb      	ldr	r3, [pc, #748]	; (80006c4 <_ca_compare_u32_eq+0x330>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	4abd      	ldr	r2, [pc, #756]	; (80006d0 <_ca_compare_u32_eq+0x33c>)
 80003dc:	4293      	cmp	r3, r2
 80003de:	d106      	bne.n	80003ee <_ca_compare_u32_eq+0x5a>
 80003e0:	4bba      	ldr	r3, [pc, #744]	; (80006cc <_ca_compare_u32_eq+0x338>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	1c5a      	adds	r2, r3, #1
 80003e6:	4bb9      	ldr	r3, [pc, #740]	; (80006cc <_ca_compare_u32_eq+0x338>)
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	f7ff ff8d 	bl	8000308 <_ca_panic>
    
    //Mask values we'll jump to, make later FI skips increase chance we jump
    //to some invalid value.
    equal_function = (CA_CMP_LOOPS << 15)^(uint32_t)equal_function;
 80003ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003f0:	22c0      	movs	r2, #192	; 0xc0
 80003f2:	0252      	lsls	r2, r2, #9
 80003f4:	4053      	eors	r3, r2
 80003f6:	633b      	str	r3, [r7, #48]	; 0x30
    equal_func_param = (CA_CMP_LOOPS << 15)^(uint32_t)equal_func_param;
 80003f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80003fa:	22c0      	movs	r2, #192	; 0xc0
 80003fc:	0252      	lsls	r2, r2, #9
 80003fe:	4053      	eors	r3, r2
 8000400:	637b      	str	r3, [r7, #52]	; 0x34
    ca_landmine();
 8000402:	4bb0      	ldr	r3, [pc, #704]	; (80006c4 <_ca_compare_u32_eq+0x330>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	4ab0      	ldr	r2, [pc, #704]	; (80006c8 <_ca_compare_u32_eq+0x334>)
 8000408:	4293      	cmp	r3, r2
 800040a:	d006      	beq.n	800041a <_ca_compare_u32_eq+0x86>
 800040c:	4baf      	ldr	r3, [pc, #700]	; (80006cc <_ca_compare_u32_eq+0x338>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	1c5a      	adds	r2, r3, #1
 8000412:	4bae      	ldr	r3, [pc, #696]	; (80006cc <_ca_compare_u32_eq+0x338>)
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	f7ff ff77 	bl	8000308 <_ca_panic>
 800041a:	4aad      	ldr	r2, [pc, #692]	; (80006d0 <_ca_compare_u32_eq+0x33c>)
 800041c:	4bac      	ldr	r3, [pc, #688]	; (80006d0 <_ca_compare_u32_eq+0x33c>)
 800041e:	429a      	cmp	r2, r3
 8000420:	d006      	beq.n	8000430 <_ca_compare_u32_eq+0x9c>
 8000422:	4baa      	ldr	r3, [pc, #680]	; (80006cc <_ca_compare_u32_eq+0x338>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	1c5a      	adds	r2, r3, #1
 8000428:	4ba8      	ldr	r3, [pc, #672]	; (80006cc <_ca_compare_u32_eq+0x338>)
 800042a:	601a      	str	r2, [r3, #0]
 800042c:	f7ff ff6c 	bl	8000308 <_ca_panic>
 8000430:	4ba4      	ldr	r3, [pc, #656]	; (80006c4 <_ca_compare_u32_eq+0x330>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4aa6      	ldr	r2, [pc, #664]	; (80006d0 <_ca_compare_u32_eq+0x33c>)
 8000436:	4293      	cmp	r3, r2
 8000438:	d106      	bne.n	8000448 <_ca_compare_u32_eq+0xb4>
 800043a:	4ba4      	ldr	r3, [pc, #656]	; (80006cc <_ca_compare_u32_eq+0x338>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	1c5a      	adds	r2, r3, #1
 8000440:	4ba2      	ldr	r3, [pc, #648]	; (80006cc <_ca_compare_u32_eq+0x338>)
 8000442:	601a      	str	r2, [r3, #0]
 8000444:	f7ff ff60 	bl	8000308 <_ca_panic>
    unequal_function = (CA_CMP_LOOPS << 15)^(uint32_t)unequal_function;
 8000448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800044a:	22c0      	movs	r2, #192	; 0xc0
 800044c:	0252      	lsls	r2, r2, #9
 800044e:	4053      	eors	r3, r2
 8000450:	63bb      	str	r3, [r7, #56]	; 0x38
    unequal_func_param = (CA_CMP_LOOPS << 15)^(uint32_t)unequal_func_param;
 8000452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000454:	22c0      	movs	r2, #192	; 0xc0
 8000456:	0252      	lsls	r2, r2, #9
 8000458:	4053      	eors	r3, r2
 800045a:	63fb      	str	r3, [r7, #60]	; 0x3c
    
    uint32_t equal = 0;
 800045c:	2300      	movs	r3, #0
 800045e:	61fb      	str	r3, [r7, #28]
    uint32_t unequal = 0;
 8000460:	2300      	movs	r3, #0
 8000462:	61bb      	str	r3, [r7, #24]
    
    int i = -1000;
 8000464:	4b9b      	ldr	r3, [pc, #620]	; (80006d4 <_ca_compare_u32_eq+0x340>)
 8000466:	617b      	str	r3, [r7, #20]
    ca_landmine();
 8000468:	4b96      	ldr	r3, [pc, #600]	; (80006c4 <_ca_compare_u32_eq+0x330>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a96      	ldr	r2, [pc, #600]	; (80006c8 <_ca_compare_u32_eq+0x334>)
 800046e:	4293      	cmp	r3, r2
 8000470:	d006      	beq.n	8000480 <_ca_compare_u32_eq+0xec>
 8000472:	4b96      	ldr	r3, [pc, #600]	; (80006cc <_ca_compare_u32_eq+0x338>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	1c5a      	adds	r2, r3, #1
 8000478:	4b94      	ldr	r3, [pc, #592]	; (80006cc <_ca_compare_u32_eq+0x338>)
 800047a:	601a      	str	r2, [r3, #0]
 800047c:	f7ff ff44 	bl	8000308 <_ca_panic>
 8000480:	4a93      	ldr	r2, [pc, #588]	; (80006d0 <_ca_compare_u32_eq+0x33c>)
 8000482:	4b93      	ldr	r3, [pc, #588]	; (80006d0 <_ca_compare_u32_eq+0x33c>)
 8000484:	429a      	cmp	r2, r3
 8000486:	d006      	beq.n	8000496 <_ca_compare_u32_eq+0x102>
 8000488:	4b90      	ldr	r3, [pc, #576]	; (80006cc <_ca_compare_u32_eq+0x338>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	1c5a      	adds	r2, r3, #1
 800048e:	4b8f      	ldr	r3, [pc, #572]	; (80006cc <_ca_compare_u32_eq+0x338>)
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	f7ff ff39 	bl	8000308 <_ca_panic>
 8000496:	4b8b      	ldr	r3, [pc, #556]	; (80006c4 <_ca_compare_u32_eq+0x330>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4a8d      	ldr	r2, [pc, #564]	; (80006d0 <_ca_compare_u32_eq+0x33c>)
 800049c:	4293      	cmp	r3, r2
 800049e:	d149      	bne.n	8000534 <_ca_compare_u32_eq+0x1a0>
 80004a0:	4b8a      	ldr	r3, [pc, #552]	; (80006cc <_ca_compare_u32_eq+0x338>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	1c5a      	adds	r2, r3, #1
 80004a6:	4b89      	ldr	r3, [pc, #548]	; (80006cc <_ca_compare_u32_eq+0x338>)
 80004a8:	601a      	str	r2, [r3, #0]
 80004aa:	f7ff ff2d 	bl	8000308 <_ca_panic>
    
    goto CA_DO_LOOP;
 80004ae:	e041      	b.n	8000534 <_ca_compare_u32_eq+0x1a0>
    ca_panic();
    ca_landmine();
    ca_panic();
    
CA_DO_COMPARE:
    if (i == CA_CMP_LOOPS) {
 80004b0:	697b      	ldr	r3, [r7, #20]
 80004b2:	2b03      	cmp	r3, #3
 80004b4:	d132      	bne.n	800051c <_ca_compare_u32_eq+0x188>
        
        ca_atmine();
 80004b6:	f000 fb15 	bl	8000ae4 <ca_fastwait>
        ca_atwait();
 80004ba:	f000 fb13 	bl	8000ae4 <ca_fastwait>
        
        if (equal == CA_CMP_LOOPS){
 80004be:	69fb      	ldr	r3, [r7, #28]
 80004c0:	2b03      	cmp	r3, #3
 80004c2:	d112      	bne.n	80004ea <_ca_compare_u32_eq+0x156>
            ca_atmine();
 80004c4:	f000 fb0e 	bl	8000ae4 <ca_fastwait>
            ca_atwait();
 80004c8:	f000 fb0c 	bl	8000ae4 <ca_fastwait>
            if (equal == CA_CMP_LOOPS){
 80004cc:	69fb      	ldr	r3, [r7, #28]
 80004ce:	2b03      	cmp	r3, #3
 80004d0:	d109      	bne.n	80004e6 <_ca_compare_u32_eq+0x152>
                if(equal_function) {
 80004d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d004      	beq.n	80004e2 <_ca_compare_u32_eq+0x14e>
                    equal_function(equal_func_param);
 80004d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80004da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004dc:	0010      	movs	r0, r2
 80004de:	f000 f8ff 	bl	80006e0 <_ca_compare_u32_eq+0x34c>
                }
                return CA_SUCCESS;
 80004e2:	4b7d      	ldr	r3, [pc, #500]	; (80006d8 <_ca_compare_u32_eq+0x344>)
 80004e4:	e0e8      	b.n	80006b8 <_ca_compare_u32_eq+0x324>
            } else {
                ca_fullpanic();
 80004e6:	f000 fb23 	bl	8000b30 <ca_fullpanic>
            }
        }
        
        if (unequal == CA_CMP_LOOPS){
 80004ea:	69bb      	ldr	r3, [r7, #24]
 80004ec:	2b03      	cmp	r3, #3
 80004ee:	d112      	bne.n	8000516 <_ca_compare_u32_eq+0x182>
            ca_atmine();
 80004f0:	f000 faf8 	bl	8000ae4 <ca_fastwait>
            ca_atwait();            
 80004f4:	f000 faf6 	bl	8000ae4 <ca_fastwait>
            if (unequal == CA_CMP_LOOPS){
 80004f8:	69bb      	ldr	r3, [r7, #24]
 80004fa:	2b03      	cmp	r3, #3
 80004fc:	d109      	bne.n	8000512 <_ca_compare_u32_eq+0x17e>
                if(unequal_function){
 80004fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000500:	2b00      	cmp	r3, #0
 8000502:	d004      	beq.n	800050e <_ca_compare_u32_eq+0x17a>
                    unequal_function(unequal_func_param);
 8000504:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000508:	0010      	movs	r0, r2
 800050a:	f000 f8e9 	bl	80006e0 <_ca_compare_u32_eq+0x34c>
                }                
                return CA_FAIL;
 800050e:	4b73      	ldr	r3, [pc, #460]	; (80006dc <_ca_compare_u32_eq+0x348>)
 8000510:	e0d2      	b.n	80006b8 <_ca_compare_u32_eq+0x324>
            } else {
                ca_fullpanic();
 8000512:	f000 fb0d 	bl	8000b30 <ca_fullpanic>
            }
        }

        ca_fullpanic();        
 8000516:	f000 fb0b 	bl	8000b30 <ca_fullpanic>
 800051a:	e001      	b.n	8000520 <_ca_compare_u32_eq+0x18c>
        
    } else {
        ca_fullpanic();
 800051c:	f000 fb08 	bl	8000b30 <ca_fullpanic>
    }
    
    ca_panic();
 8000520:	4b6a      	ldr	r3, [pc, #424]	; (80006cc <_ca_compare_u32_eq+0x338>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	1c5a      	adds	r2, r3, #1
 8000526:	4b69      	ldr	r3, [pc, #420]	; (80006cc <_ca_compare_u32_eq+0x338>)
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	f7ff feed 	bl	8000308 <_ca_panic>

    return -1;
 800052e:	2301      	movs	r3, #1
 8000530:	425b      	negs	r3, r3
 8000532:	e0c1      	b.n	80006b8 <_ca_compare_u32_eq+0x324>
    goto CA_DO_LOOP;
 8000534:	46c0      	nop			; (mov r8, r8)
    
CA_DO_LOOP:
    i = 0;
 8000536:	2300      	movs	r3, #0
 8000538:	617b      	str	r3, [r7, #20]
    while(1)
    {
        if (op1.value == op2.value) {equal++;}
 800053a:	2308      	movs	r3, #8
 800053c:	18fb      	adds	r3, r7, r3
 800053e:	681a      	ldr	r2, [r3, #0]
 8000540:	003b      	movs	r3, r7
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	429a      	cmp	r2, r3
 8000546:	d103      	bne.n	8000550 <_ca_compare_u32_eq+0x1bc>
 8000548:	69fb      	ldr	r3, [r7, #28]
 800054a:	3301      	adds	r3, #1
 800054c:	61fb      	str	r3, [r7, #28]
 800054e:	e002      	b.n	8000556 <_ca_compare_u32_eq+0x1c2>
        else {unequal++;}
 8000550:	69bb      	ldr	r3, [r7, #24]
 8000552:	3301      	adds	r3, #1
 8000554:	61bb      	str	r3, [r7, #24]
        
        ca_fastwait();        
 8000556:	f000 fac5 	bl	8000ae4 <ca_fastwait>
        i++;
 800055a:	697b      	ldr	r3, [r7, #20]
 800055c:	3301      	adds	r3, #1
 800055e:	617b      	str	r3, [r7, #20]

        /*if (op1.invvalue == op2.invvalue) {equal++;}
        else {unequal++;}
        i++;*/
        
        ca_landmine();
 8000560:	4b58      	ldr	r3, [pc, #352]	; (80006c4 <_ca_compare_u32_eq+0x330>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a58      	ldr	r2, [pc, #352]	; (80006c8 <_ca_compare_u32_eq+0x334>)
 8000566:	4293      	cmp	r3, r2
 8000568:	d006      	beq.n	8000578 <_ca_compare_u32_eq+0x1e4>
 800056a:	4b58      	ldr	r3, [pc, #352]	; (80006cc <_ca_compare_u32_eq+0x338>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	1c5a      	adds	r2, r3, #1
 8000570:	4b56      	ldr	r3, [pc, #344]	; (80006cc <_ca_compare_u32_eq+0x338>)
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	f7ff fec8 	bl	8000308 <_ca_panic>
 8000578:	4a55      	ldr	r2, [pc, #340]	; (80006d0 <_ca_compare_u32_eq+0x33c>)
 800057a:	4b55      	ldr	r3, [pc, #340]	; (80006d0 <_ca_compare_u32_eq+0x33c>)
 800057c:	429a      	cmp	r2, r3
 800057e:	d006      	beq.n	800058e <_ca_compare_u32_eq+0x1fa>
 8000580:	4b52      	ldr	r3, [pc, #328]	; (80006cc <_ca_compare_u32_eq+0x338>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	1c5a      	adds	r2, r3, #1
 8000586:	4b51      	ldr	r3, [pc, #324]	; (80006cc <_ca_compare_u32_eq+0x338>)
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	f7ff febd 	bl	8000308 <_ca_panic>
 800058e:	4b4d      	ldr	r3, [pc, #308]	; (80006c4 <_ca_compare_u32_eq+0x330>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4a4f      	ldr	r2, [pc, #316]	; (80006d0 <_ca_compare_u32_eq+0x33c>)
 8000594:	4293      	cmp	r3, r2
 8000596:	d106      	bne.n	80005a6 <_ca_compare_u32_eq+0x212>
 8000598:	4b4c      	ldr	r3, [pc, #304]	; (80006cc <_ca_compare_u32_eq+0x338>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	1c5a      	adds	r2, r3, #1
 800059e:	4b4b      	ldr	r3, [pc, #300]	; (80006cc <_ca_compare_u32_eq+0x338>)
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	f7ff feb1 	bl	8000308 <_ca_panic>
        if ((i != equal) && (i != unequal)){ ca_panic(); }
 80005a6:	697a      	ldr	r2, [r7, #20]
 80005a8:	69fb      	ldr	r3, [r7, #28]
 80005aa:	429a      	cmp	r2, r3
 80005ac:	d00a      	beq.n	80005c4 <_ca_compare_u32_eq+0x230>
 80005ae:	697a      	ldr	r2, [r7, #20]
 80005b0:	69bb      	ldr	r3, [r7, #24]
 80005b2:	429a      	cmp	r2, r3
 80005b4:	d006      	beq.n	80005c4 <_ca_compare_u32_eq+0x230>
 80005b6:	4b45      	ldr	r3, [pc, #276]	; (80006cc <_ca_compare_u32_eq+0x338>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	1c5a      	adds	r2, r3, #1
 80005bc:	4b43      	ldr	r3, [pc, #268]	; (80006cc <_ca_compare_u32_eq+0x338>)
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	f7ff fea2 	bl	8000308 <_ca_panic>
        
        if(i == CA_CMP_LOOPS) { 
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	2b03      	cmp	r3, #3
 80005c8:	d147      	bne.n	800065a <_ca_compare_u32_eq+0x2c6>
            ca_landmine();
 80005ca:	4b3e      	ldr	r3, [pc, #248]	; (80006c4 <_ca_compare_u32_eq+0x330>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a3e      	ldr	r2, [pc, #248]	; (80006c8 <_ca_compare_u32_eq+0x334>)
 80005d0:	4293      	cmp	r3, r2
 80005d2:	d006      	beq.n	80005e2 <_ca_compare_u32_eq+0x24e>
 80005d4:	4b3d      	ldr	r3, [pc, #244]	; (80006cc <_ca_compare_u32_eq+0x338>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	1c5a      	adds	r2, r3, #1
 80005da:	4b3c      	ldr	r3, [pc, #240]	; (80006cc <_ca_compare_u32_eq+0x338>)
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	f7ff fe93 	bl	8000308 <_ca_panic>
 80005e2:	4a3b      	ldr	r2, [pc, #236]	; (80006d0 <_ca_compare_u32_eq+0x33c>)
 80005e4:	4b3a      	ldr	r3, [pc, #232]	; (80006d0 <_ca_compare_u32_eq+0x33c>)
 80005e6:	429a      	cmp	r2, r3
 80005e8:	d006      	beq.n	80005f8 <_ca_compare_u32_eq+0x264>
 80005ea:	4b38      	ldr	r3, [pc, #224]	; (80006cc <_ca_compare_u32_eq+0x338>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	1c5a      	adds	r2, r3, #1
 80005f0:	4b36      	ldr	r3, [pc, #216]	; (80006cc <_ca_compare_u32_eq+0x338>)
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	f7ff fe88 	bl	8000308 <_ca_panic>
 80005f8:	4b32      	ldr	r3, [pc, #200]	; (80006c4 <_ca_compare_u32_eq+0x330>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a34      	ldr	r2, [pc, #208]	; (80006d0 <_ca_compare_u32_eq+0x33c>)
 80005fe:	4293      	cmp	r3, r2
 8000600:	d106      	bne.n	8000610 <_ca_compare_u32_eq+0x27c>
 8000602:	4b32      	ldr	r3, [pc, #200]	; (80006cc <_ca_compare_u32_eq+0x338>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	1c5a      	adds	r2, r3, #1
 8000608:	4b30      	ldr	r3, [pc, #192]	; (80006cc <_ca_compare_u32_eq+0x338>)
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	f7ff fe7c 	bl	8000308 <_ca_panic>
            if (i == equal) {
 8000610:	697a      	ldr	r2, [r7, #20]
 8000612:	69fb      	ldr	r3, [r7, #28]
 8000614:	429a      	cmp	r2, r3
 8000616:	d10a      	bne.n	800062e <_ca_compare_u32_eq+0x29a>
                equal_function = (equal << 15) ^ (uint32_t)equal_function;
 8000618:	69fb      	ldr	r3, [r7, #28]
 800061a:	03da      	lsls	r2, r3, #15
 800061c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800061e:	4053      	eors	r3, r2
 8000620:	633b      	str	r3, [r7, #48]	; 0x30
                equal_func_param = (equal << 15) ^ (uint32_t)equal_func_param;
 8000622:	69fb      	ldr	r3, [r7, #28]
 8000624:	03da      	lsls	r2, r3, #15
 8000626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000628:	4053      	eors	r3, r2
 800062a:	637b      	str	r3, [r7, #52]	; 0x34
                goto CA_DO_COMPARE;
 800062c:	e740      	b.n	80004b0 <_ca_compare_u32_eq+0x11c>
            } else if (i == unequal) {
 800062e:	697a      	ldr	r2, [r7, #20]
 8000630:	69bb      	ldr	r3, [r7, #24]
 8000632:	429a      	cmp	r2, r3
 8000634:	d10a      	bne.n	800064c <_ca_compare_u32_eq+0x2b8>
                unequal_function = (unequal << 15) ^ (uint32_t)unequal_function;
 8000636:	69bb      	ldr	r3, [r7, #24]
 8000638:	03da      	lsls	r2, r3, #15
 800063a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800063c:	4053      	eors	r3, r2
 800063e:	63bb      	str	r3, [r7, #56]	; 0x38
                unequal_func_param = (equal << 15) ^ (uint32_t)unequal_func_param;
 8000640:	69fb      	ldr	r3, [r7, #28]
 8000642:	03da      	lsls	r2, r3, #15
 8000644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000646:	4053      	eors	r3, r2
 8000648:	63fb      	str	r3, [r7, #60]	; 0x3c
                goto CA_DO_COMPARE;
 800064a:	e731      	b.n	80004b0 <_ca_compare_u32_eq+0x11c>
            } else {
                ca_panic();
 800064c:	4b1f      	ldr	r3, [pc, #124]	; (80006cc <_ca_compare_u32_eq+0x338>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	1c5a      	adds	r2, r3, #1
 8000652:	4b1e      	ldr	r3, [pc, #120]	; (80006cc <_ca_compare_u32_eq+0x338>)
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	f7ff fe57 	bl	8000308 <_ca_panic>
            }
        }
        
        if (i > CA_CMP_LOOPS){ca_panic();}
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	2b03      	cmp	r3, #3
 800065e:	dd06      	ble.n	800066e <_ca_compare_u32_eq+0x2da>
 8000660:	4b1a      	ldr	r3, [pc, #104]	; (80006cc <_ca_compare_u32_eq+0x338>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	1c5a      	adds	r2, r3, #1
 8000666:	4b19      	ldr	r3, [pc, #100]	; (80006cc <_ca_compare_u32_eq+0x338>)
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	f7ff fe4d 	bl	8000308 <_ca_panic>
        
        ca_landmine();
 800066e:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <_ca_compare_u32_eq+0x330>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a15      	ldr	r2, [pc, #84]	; (80006c8 <_ca_compare_u32_eq+0x334>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d006      	beq.n	8000686 <_ca_compare_u32_eq+0x2f2>
 8000678:	4b14      	ldr	r3, [pc, #80]	; (80006cc <_ca_compare_u32_eq+0x338>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	1c5a      	adds	r2, r3, #1
 800067e:	4b13      	ldr	r3, [pc, #76]	; (80006cc <_ca_compare_u32_eq+0x338>)
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	f7ff fe41 	bl	8000308 <_ca_panic>
 8000686:	4a12      	ldr	r2, [pc, #72]	; (80006d0 <_ca_compare_u32_eq+0x33c>)
 8000688:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <_ca_compare_u32_eq+0x33c>)
 800068a:	429a      	cmp	r2, r3
 800068c:	d006      	beq.n	800069c <_ca_compare_u32_eq+0x308>
 800068e:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <_ca_compare_u32_eq+0x338>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	1c5a      	adds	r2, r3, #1
 8000694:	4b0d      	ldr	r3, [pc, #52]	; (80006cc <_ca_compare_u32_eq+0x338>)
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	f7ff fe36 	bl	8000308 <_ca_panic>
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <_ca_compare_u32_eq+0x330>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a0b      	ldr	r2, [pc, #44]	; (80006d0 <_ca_compare_u32_eq+0x33c>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d000      	beq.n	80006a8 <_ca_compare_u32_eq+0x314>
 80006a6:	e748      	b.n	800053a <_ca_compare_u32_eq+0x1a6>
 80006a8:	4b08      	ldr	r3, [pc, #32]	; (80006cc <_ca_compare_u32_eq+0x338>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	1c5a      	adds	r2, r3, #1
 80006ae:	4b07      	ldr	r3, [pc, #28]	; (80006cc <_ca_compare_u32_eq+0x338>)
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	f7ff fe29 	bl	8000308 <_ca_panic>
    {
 80006b6:	e740      	b.n	800053a <_ca_compare_u32_eq+0x1a6>
    }
    
    ca_panic();
    ca_panic();
    ca_panic();
}
 80006b8:	0018      	movs	r0, r3
 80006ba:	46bd      	mov	sp, r7
 80006bc:	b009      	add	sp, #36	; 0x24
 80006be:	bc90      	pop	{r4, r7}
 80006c0:	bc02      	pop	{r1}
 80006c2:	4708      	bx	r1
 80006c4:	20000454 	.word	0x20000454
 80006c8:	feed7431 	.word	0xfeed7431
 80006cc:	20000478 	.word	0x20000478
 80006d0:	55a88519 	.word	0x55a88519
 80006d4:	fffffc18 	.word	0xfffffc18
 80006d8:	5abf0938 	.word	0x5abf0938
 80006dc:	2820f02a 	.word	0x2820f02a
 80006e0:	4718      	bx	r3
 80006e2:	46c0      	nop			; (mov r8, r8)

080006e4 <ca_compare_func_eq>:
                             uint32_t                   expected_value_len,
                             ca_fptr_voidptr_t           equal_function,
                             void *                     equal_func_param,
                             ca_fptr_voidptr_t          unequal_function,
                             void *                     unequal_func_param)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08a      	sub	sp, #40	; 0x28
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
 80006f0:	603b      	str	r3, [r7, #0]
    ca_landmine();
 80006f2:	4bd6      	ldr	r3, [pc, #856]	; (8000a4c <ca_compare_func_eq+0x368>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4ad6      	ldr	r2, [pc, #856]	; (8000a50 <ca_compare_func_eq+0x36c>)
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d006      	beq.n	800070a <ca_compare_func_eq+0x26>
 80006fc:	4bd5      	ldr	r3, [pc, #852]	; (8000a54 <ca_compare_func_eq+0x370>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	1c5a      	adds	r2, r3, #1
 8000702:	4bd4      	ldr	r3, [pc, #848]	; (8000a54 <ca_compare_func_eq+0x370>)
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	f7ff fdff 	bl	8000308 <_ca_panic>
 800070a:	4ad3      	ldr	r2, [pc, #844]	; (8000a58 <ca_compare_func_eq+0x374>)
 800070c:	4bd2      	ldr	r3, [pc, #840]	; (8000a58 <ca_compare_func_eq+0x374>)
 800070e:	429a      	cmp	r2, r3
 8000710:	d006      	beq.n	8000720 <ca_compare_func_eq+0x3c>
 8000712:	4bd0      	ldr	r3, [pc, #832]	; (8000a54 <ca_compare_func_eq+0x370>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	1c5a      	adds	r2, r3, #1
 8000718:	4bce      	ldr	r3, [pc, #824]	; (8000a54 <ca_compare_func_eq+0x370>)
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	f7ff fdf4 	bl	8000308 <_ca_panic>
 8000720:	4bca      	ldr	r3, [pc, #808]	; (8000a4c <ca_compare_func_eq+0x368>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4acc      	ldr	r2, [pc, #816]	; (8000a58 <ca_compare_func_eq+0x374>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d106      	bne.n	8000738 <ca_compare_func_eq+0x54>
 800072a:	4bca      	ldr	r3, [pc, #808]	; (8000a54 <ca_compare_func_eq+0x370>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	1c5a      	adds	r2, r3, #1
 8000730:	4bc8      	ldr	r3, [pc, #800]	; (8000a54 <ca_compare_func_eq+0x370>)
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	f7ff fde8 	bl	8000308 <_ca_panic>
    
    get_value_func(get_value_func_param, get_value_func_return);
 8000738:	6879      	ldr	r1, [r7, #4]
 800073a:	68ba      	ldr	r2, [r7, #8]
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	0010      	movs	r0, r2
 8000740:	f000 f998 	bl	8000a74 <ca_compare_func_eq+0x390>
    //Mask values we'll jump to, make later FI skips increase chance we jump
    //to some invalid value.
    equal_function = (CA_CMP_LOOPS << 15)^(uint32_t)equal_function;
 8000744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000746:	22c0      	movs	r2, #192	; 0xc0
 8000748:	0252      	lsls	r2, r2, #9
 800074a:	4053      	eors	r3, r2
 800074c:	637b      	str	r3, [r7, #52]	; 0x34
    equal_func_param = (CA_CMP_LOOPS << 15)^(uint32_t)equal_func_param;
 800074e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000750:	22c0      	movs	r2, #192	; 0xc0
 8000752:	0252      	lsls	r2, r2, #9
 8000754:	4053      	eors	r3, r2
 8000756:	63bb      	str	r3, [r7, #56]	; 0x38
    ca_landmine();
 8000758:	4bbc      	ldr	r3, [pc, #752]	; (8000a4c <ca_compare_func_eq+0x368>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4abc      	ldr	r2, [pc, #752]	; (8000a50 <ca_compare_func_eq+0x36c>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d006      	beq.n	8000770 <ca_compare_func_eq+0x8c>
 8000762:	4bbc      	ldr	r3, [pc, #752]	; (8000a54 <ca_compare_func_eq+0x370>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	1c5a      	adds	r2, r3, #1
 8000768:	4bba      	ldr	r3, [pc, #744]	; (8000a54 <ca_compare_func_eq+0x370>)
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	f7ff fdcc 	bl	8000308 <_ca_panic>
 8000770:	4ab9      	ldr	r2, [pc, #740]	; (8000a58 <ca_compare_func_eq+0x374>)
 8000772:	4bb9      	ldr	r3, [pc, #740]	; (8000a58 <ca_compare_func_eq+0x374>)
 8000774:	429a      	cmp	r2, r3
 8000776:	d006      	beq.n	8000786 <ca_compare_func_eq+0xa2>
 8000778:	4bb6      	ldr	r3, [pc, #728]	; (8000a54 <ca_compare_func_eq+0x370>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	1c5a      	adds	r2, r3, #1
 800077e:	4bb5      	ldr	r3, [pc, #724]	; (8000a54 <ca_compare_func_eq+0x370>)
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	f7ff fdc1 	bl	8000308 <_ca_panic>
 8000786:	4bb1      	ldr	r3, [pc, #708]	; (8000a4c <ca_compare_func_eq+0x368>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4ab3      	ldr	r2, [pc, #716]	; (8000a58 <ca_compare_func_eq+0x374>)
 800078c:	4293      	cmp	r3, r2
 800078e:	d106      	bne.n	800079e <ca_compare_func_eq+0xba>
 8000790:	4bb0      	ldr	r3, [pc, #704]	; (8000a54 <ca_compare_func_eq+0x370>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	1c5a      	adds	r2, r3, #1
 8000796:	4baf      	ldr	r3, [pc, #700]	; (8000a54 <ca_compare_func_eq+0x370>)
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	f7ff fdb5 	bl	8000308 <_ca_panic>
    unequal_function = (CA_CMP_LOOPS << 15)^(uint32_t)unequal_function;
 800079e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007a0:	22c0      	movs	r2, #192	; 0xc0
 80007a2:	0252      	lsls	r2, r2, #9
 80007a4:	4053      	eors	r3, r2
 80007a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    unequal_func_param = (CA_CMP_LOOPS << 15)^(uint32_t)unequal_func_param;
 80007a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007aa:	22c0      	movs	r2, #192	; 0xc0
 80007ac:	0252      	lsls	r2, r2, #9
 80007ae:	4053      	eors	r3, r2
 80007b0:	643b      	str	r3, [r7, #64]	; 0x40
    
    uint32_t equal = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t unequal = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	623b      	str	r3, [r7, #32]
    
    int i = -1000;
 80007ba:	4ba8      	ldr	r3, [pc, #672]	; (8000a5c <ca_compare_func_eq+0x378>)
 80007bc:	61fb      	str	r3, [r7, #28]
    ca_landmine();
 80007be:	4ba3      	ldr	r3, [pc, #652]	; (8000a4c <ca_compare_func_eq+0x368>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4aa3      	ldr	r2, [pc, #652]	; (8000a50 <ca_compare_func_eq+0x36c>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d006      	beq.n	80007d6 <ca_compare_func_eq+0xf2>
 80007c8:	4ba2      	ldr	r3, [pc, #648]	; (8000a54 <ca_compare_func_eq+0x370>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	1c5a      	adds	r2, r3, #1
 80007ce:	4ba1      	ldr	r3, [pc, #644]	; (8000a54 <ca_compare_func_eq+0x370>)
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	f7ff fd99 	bl	8000308 <_ca_panic>
 80007d6:	4aa0      	ldr	r2, [pc, #640]	; (8000a58 <ca_compare_func_eq+0x374>)
 80007d8:	4b9f      	ldr	r3, [pc, #636]	; (8000a58 <ca_compare_func_eq+0x374>)
 80007da:	429a      	cmp	r2, r3
 80007dc:	d006      	beq.n	80007ec <ca_compare_func_eq+0x108>
 80007de:	4b9d      	ldr	r3, [pc, #628]	; (8000a54 <ca_compare_func_eq+0x370>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	1c5a      	adds	r2, r3, #1
 80007e4:	4b9b      	ldr	r3, [pc, #620]	; (8000a54 <ca_compare_func_eq+0x370>)
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	f7ff fd8e 	bl	8000308 <_ca_panic>
 80007ec:	4b97      	ldr	r3, [pc, #604]	; (8000a4c <ca_compare_func_eq+0x368>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a99      	ldr	r2, [pc, #612]	; (8000a58 <ca_compare_func_eq+0x374>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d149      	bne.n	800088a <ca_compare_func_eq+0x1a6>
 80007f6:	4b97      	ldr	r3, [pc, #604]	; (8000a54 <ca_compare_func_eq+0x370>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	1c5a      	adds	r2, r3, #1
 80007fc:	4b95      	ldr	r3, [pc, #596]	; (8000a54 <ca_compare_func_eq+0x370>)
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	f7ff fd82 	bl	8000308 <_ca_panic>
    
    goto CA_DO_LOOP;
 8000804:	e041      	b.n	800088a <ca_compare_func_eq+0x1a6>
    ca_panic();
    ca_landmine();
    ca_panic();
    
CA_DO_COMPARE:
    if (i == CA_CMP_LOOPS) {
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	2b03      	cmp	r3, #3
 800080a:	d132      	bne.n	8000872 <ca_compare_func_eq+0x18e>
        
        ca_atmine();
 800080c:	f000 f96a 	bl	8000ae4 <ca_fastwait>
        ca_atwait();
 8000810:	f000 f968 	bl	8000ae4 <ca_fastwait>
        
        if (equal == CA_CMP_LOOPS){
 8000814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000816:	2b03      	cmp	r3, #3
 8000818:	d112      	bne.n	8000840 <ca_compare_func_eq+0x15c>
            ca_atmine();
 800081a:	f000 f963 	bl	8000ae4 <ca_fastwait>
            ca_atwait();
 800081e:	f000 f961 	bl	8000ae4 <ca_fastwait>
            if (equal == CA_CMP_LOOPS){
 8000822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000824:	2b03      	cmp	r3, #3
 8000826:	d109      	bne.n	800083c <ca_compare_func_eq+0x158>
                if(equal_function) {
 8000828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800082a:	2b00      	cmp	r3, #0
 800082c:	d004      	beq.n	8000838 <ca_compare_func_eq+0x154>
                    equal_function(equal_func_param);
 800082e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000832:	0010      	movs	r0, r2
 8000834:	f000 f91e 	bl	8000a74 <ca_compare_func_eq+0x390>
                }
                return CA_SUCCESS;
 8000838:	4b89      	ldr	r3, [pc, #548]	; (8000a60 <ca_compare_func_eq+0x37c>)
 800083a:	e115      	b.n	8000a68 <ca_compare_func_eq+0x384>
            } else {
                ca_fullpanic();
 800083c:	f000 f978 	bl	8000b30 <ca_fullpanic>
            }
        }
        
        if (unequal == CA_CMP_LOOPS){
 8000840:	6a3b      	ldr	r3, [r7, #32]
 8000842:	2b03      	cmp	r3, #3
 8000844:	d112      	bne.n	800086c <ca_compare_func_eq+0x188>
            ca_atmine();
 8000846:	f000 f94d 	bl	8000ae4 <ca_fastwait>
            ca_atwait();            
 800084a:	f000 f94b 	bl	8000ae4 <ca_fastwait>
            if (unequal == CA_CMP_LOOPS){
 800084e:	6a3b      	ldr	r3, [r7, #32]
 8000850:	2b03      	cmp	r3, #3
 8000852:	d109      	bne.n	8000868 <ca_compare_func_eq+0x184>
                if(unequal_function){
 8000854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000856:	2b00      	cmp	r3, #0
 8000858:	d004      	beq.n	8000864 <ca_compare_func_eq+0x180>
                    unequal_function(unequal_func_param);
 800085a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800085c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800085e:	0010      	movs	r0, r2
 8000860:	f000 f908 	bl	8000a74 <ca_compare_func_eq+0x390>
                }                
                return CA_FAIL;
 8000864:	4b7f      	ldr	r3, [pc, #508]	; (8000a64 <ca_compare_func_eq+0x380>)
 8000866:	e0ff      	b.n	8000a68 <ca_compare_func_eq+0x384>
            } else {
                ca_fullpanic();
 8000868:	f000 f962 	bl	8000b30 <ca_fullpanic>
            }
        }

        ca_fullpanic();        
 800086c:	f000 f960 	bl	8000b30 <ca_fullpanic>
 8000870:	e001      	b.n	8000876 <ca_compare_func_eq+0x192>
        
    } else {
        ca_fullpanic();
 8000872:	f000 f95d 	bl	8000b30 <ca_fullpanic>
    }
    
    ca_panic();
 8000876:	4b77      	ldr	r3, [pc, #476]	; (8000a54 <ca_compare_func_eq+0x370>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	1c5a      	adds	r2, r3, #1
 800087c:	4b75      	ldr	r3, [pc, #468]	; (8000a54 <ca_compare_func_eq+0x370>)
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	f7ff fd42 	bl	8000308 <_ca_panic>

    return -1;
 8000884:	2301      	movs	r3, #1
 8000886:	425b      	negs	r3, r3
 8000888:	e0ee      	b.n	8000a68 <ca_compare_func_eq+0x384>
    goto CA_DO_LOOP;
 800088a:	46c0      	nop			; (mov r8, r8)
    
CA_DO_LOOP:
    i = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	61fb      	str	r3, [r7, #28]
    while(1)
    {
        int j = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	61bb      	str	r3, [r7, #24]
        int op_unequal = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
        for (j = 0; j < expected_value_len; j++) {
 8000898:	2300      	movs	r3, #0
 800089a:	61bb      	str	r3, [r7, #24]
 800089c:	e016      	b.n	80008cc <ca_compare_func_eq+0x1e8>
            volatile int a = expected_value_array[j];
 800089e:	69bb      	ldr	r3, [r7, #24]
 80008a0:	683a      	ldr	r2, [r7, #0]
 80008a2:	18d3      	adds	r3, r2, r3
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	613b      	str	r3, [r7, #16]
            if (get_value_func_return[j] != expected_value_array[j]) {
 80008a8:	69bb      	ldr	r3, [r7, #24]
 80008aa:	687a      	ldr	r2, [r7, #4]
 80008ac:	18d3      	adds	r3, r2, r3
 80008ae:	781a      	ldrb	r2, [r3, #0]
 80008b0:	69bb      	ldr	r3, [r7, #24]
 80008b2:	6839      	ldr	r1, [r7, #0]
 80008b4:	18cb      	adds	r3, r1, r3
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d004      	beq.n	80008c6 <ca_compare_func_eq+0x1e2>
                trigger_low();
 80008bc:	f000 f9e9 	bl	8000c92 <trigger_low>
                op_unequal = 1;
 80008c0:	2301      	movs	r3, #1
 80008c2:	617b      	str	r3, [r7, #20]
                break;
 80008c4:	e006      	b.n	80008d4 <ca_compare_func_eq+0x1f0>
        for (j = 0; j < expected_value_len; j++) {
 80008c6:	69bb      	ldr	r3, [r7, #24]
 80008c8:	3301      	adds	r3, #1
 80008ca:	61bb      	str	r3, [r7, #24]
 80008cc:	69ba      	ldr	r2, [r7, #24]
 80008ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d3e4      	bcc.n	800089e <ca_compare_func_eq+0x1ba>
            }
                
        }
        if (!op_unequal) {equal++;}
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d103      	bne.n	80008e2 <ca_compare_func_eq+0x1fe>
 80008da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008dc:	3301      	adds	r3, #1
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
 80008e0:	e002      	b.n	80008e8 <ca_compare_func_eq+0x204>
        else {unequal++;}
 80008e2:	6a3b      	ldr	r3, [r7, #32]
 80008e4:	3301      	adds	r3, #1
 80008e6:	623b      	str	r3, [r7, #32]
        
        ca_fastwait();        
 80008e8:	f000 f8fc 	bl	8000ae4 <ca_fastwait>
        i++;
 80008ec:	69fb      	ldr	r3, [r7, #28]
 80008ee:	3301      	adds	r3, #1
 80008f0:	61fb      	str	r3, [r7, #28]
        
        ca_landmine();
 80008f2:	4b56      	ldr	r3, [pc, #344]	; (8000a4c <ca_compare_func_eq+0x368>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a56      	ldr	r2, [pc, #344]	; (8000a50 <ca_compare_func_eq+0x36c>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d006      	beq.n	800090a <ca_compare_func_eq+0x226>
 80008fc:	4b55      	ldr	r3, [pc, #340]	; (8000a54 <ca_compare_func_eq+0x370>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	1c5a      	adds	r2, r3, #1
 8000902:	4b54      	ldr	r3, [pc, #336]	; (8000a54 <ca_compare_func_eq+0x370>)
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	f7ff fcff 	bl	8000308 <_ca_panic>
 800090a:	4a53      	ldr	r2, [pc, #332]	; (8000a58 <ca_compare_func_eq+0x374>)
 800090c:	4b52      	ldr	r3, [pc, #328]	; (8000a58 <ca_compare_func_eq+0x374>)
 800090e:	429a      	cmp	r2, r3
 8000910:	d006      	beq.n	8000920 <ca_compare_func_eq+0x23c>
 8000912:	4b50      	ldr	r3, [pc, #320]	; (8000a54 <ca_compare_func_eq+0x370>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	1c5a      	adds	r2, r3, #1
 8000918:	4b4e      	ldr	r3, [pc, #312]	; (8000a54 <ca_compare_func_eq+0x370>)
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	f7ff fcf4 	bl	8000308 <_ca_panic>
 8000920:	4b4a      	ldr	r3, [pc, #296]	; (8000a4c <ca_compare_func_eq+0x368>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a4c      	ldr	r2, [pc, #304]	; (8000a58 <ca_compare_func_eq+0x374>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d106      	bne.n	8000938 <ca_compare_func_eq+0x254>
 800092a:	4b4a      	ldr	r3, [pc, #296]	; (8000a54 <ca_compare_func_eq+0x370>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	1c5a      	adds	r2, r3, #1
 8000930:	4b48      	ldr	r3, [pc, #288]	; (8000a54 <ca_compare_func_eq+0x370>)
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	f7ff fce8 	bl	8000308 <_ca_panic>
        if ((i != equal) && (i != unequal)){ ca_panic(); }
 8000938:	69fa      	ldr	r2, [r7, #28]
 800093a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093c:	429a      	cmp	r2, r3
 800093e:	d00a      	beq.n	8000956 <ca_compare_func_eq+0x272>
 8000940:	69fa      	ldr	r2, [r7, #28]
 8000942:	6a3b      	ldr	r3, [r7, #32]
 8000944:	429a      	cmp	r2, r3
 8000946:	d006      	beq.n	8000956 <ca_compare_func_eq+0x272>
 8000948:	4b42      	ldr	r3, [pc, #264]	; (8000a54 <ca_compare_func_eq+0x370>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	1c5a      	adds	r2, r3, #1
 800094e:	4b41      	ldr	r3, [pc, #260]	; (8000a54 <ca_compare_func_eq+0x370>)
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	f7ff fcd9 	bl	8000308 <_ca_panic>
        
        if(i == CA_CMP_LOOPS) { 
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	2b03      	cmp	r3, #3
 800095a:	d147      	bne.n	80009ec <ca_compare_func_eq+0x308>
            ca_landmine();
 800095c:	4b3b      	ldr	r3, [pc, #236]	; (8000a4c <ca_compare_func_eq+0x368>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a3b      	ldr	r2, [pc, #236]	; (8000a50 <ca_compare_func_eq+0x36c>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d006      	beq.n	8000974 <ca_compare_func_eq+0x290>
 8000966:	4b3b      	ldr	r3, [pc, #236]	; (8000a54 <ca_compare_func_eq+0x370>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	1c5a      	adds	r2, r3, #1
 800096c:	4b39      	ldr	r3, [pc, #228]	; (8000a54 <ca_compare_func_eq+0x370>)
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	f7ff fcca 	bl	8000308 <_ca_panic>
 8000974:	4a38      	ldr	r2, [pc, #224]	; (8000a58 <ca_compare_func_eq+0x374>)
 8000976:	4b38      	ldr	r3, [pc, #224]	; (8000a58 <ca_compare_func_eq+0x374>)
 8000978:	429a      	cmp	r2, r3
 800097a:	d006      	beq.n	800098a <ca_compare_func_eq+0x2a6>
 800097c:	4b35      	ldr	r3, [pc, #212]	; (8000a54 <ca_compare_func_eq+0x370>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	1c5a      	adds	r2, r3, #1
 8000982:	4b34      	ldr	r3, [pc, #208]	; (8000a54 <ca_compare_func_eq+0x370>)
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	f7ff fcbf 	bl	8000308 <_ca_panic>
 800098a:	4b30      	ldr	r3, [pc, #192]	; (8000a4c <ca_compare_func_eq+0x368>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a32      	ldr	r2, [pc, #200]	; (8000a58 <ca_compare_func_eq+0x374>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d106      	bne.n	80009a2 <ca_compare_func_eq+0x2be>
 8000994:	4b2f      	ldr	r3, [pc, #188]	; (8000a54 <ca_compare_func_eq+0x370>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	1c5a      	adds	r2, r3, #1
 800099a:	4b2e      	ldr	r3, [pc, #184]	; (8000a54 <ca_compare_func_eq+0x370>)
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	f7ff fcb3 	bl	8000308 <_ca_panic>
            if (i == equal) {
 80009a2:	69fa      	ldr	r2, [r7, #28]
 80009a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a6:	429a      	cmp	r2, r3
 80009a8:	d10a      	bne.n	80009c0 <ca_compare_func_eq+0x2dc>
                equal_function = (equal << 15) ^ (uint32_t)equal_function;
 80009aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ac:	03da      	lsls	r2, r3, #15
 80009ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009b0:	4053      	eors	r3, r2
 80009b2:	637b      	str	r3, [r7, #52]	; 0x34
                equal_func_param = (equal << 15) ^ (uint32_t)equal_func_param;
 80009b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b6:	03da      	lsls	r2, r3, #15
 80009b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009ba:	4053      	eors	r3, r2
 80009bc:	63bb      	str	r3, [r7, #56]	; 0x38
                goto CA_DO_COMPARE;
 80009be:	e722      	b.n	8000806 <ca_compare_func_eq+0x122>
            } else if (i == unequal) {
 80009c0:	69fa      	ldr	r2, [r7, #28]
 80009c2:	6a3b      	ldr	r3, [r7, #32]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d10a      	bne.n	80009de <ca_compare_func_eq+0x2fa>
                unequal_function = (unequal << 15) ^ (uint32_t)unequal_function;
 80009c8:	6a3b      	ldr	r3, [r7, #32]
 80009ca:	03da      	lsls	r2, r3, #15
 80009cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80009ce:	4053      	eors	r3, r2
 80009d0:	63fb      	str	r3, [r7, #60]	; 0x3c
                unequal_func_param = (equal << 15) ^ (uint32_t)unequal_func_param;
 80009d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d4:	03da      	lsls	r2, r3, #15
 80009d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80009d8:	4053      	eors	r3, r2
 80009da:	643b      	str	r3, [r7, #64]	; 0x40
                goto CA_DO_COMPARE;
 80009dc:	e713      	b.n	8000806 <ca_compare_func_eq+0x122>
            } else {
                ca_panic();
 80009de:	4b1d      	ldr	r3, [pc, #116]	; (8000a54 <ca_compare_func_eq+0x370>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	1c5a      	adds	r2, r3, #1
 80009e4:	4b1b      	ldr	r3, [pc, #108]	; (8000a54 <ca_compare_func_eq+0x370>)
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	f7ff fc8e 	bl	8000308 <_ca_panic>
            }
        }
        
        if (i > CA_CMP_LOOPS){ca_panic();}
 80009ec:	69fb      	ldr	r3, [r7, #28]
 80009ee:	2b03      	cmp	r3, #3
 80009f0:	dd06      	ble.n	8000a00 <ca_compare_func_eq+0x31c>
 80009f2:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <ca_compare_func_eq+0x370>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	1c5a      	adds	r2, r3, #1
 80009f8:	4b16      	ldr	r3, [pc, #88]	; (8000a54 <ca_compare_func_eq+0x370>)
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	f7ff fc84 	bl	8000308 <_ca_panic>
        
        ca_landmine();
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <ca_compare_func_eq+0x368>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a12      	ldr	r2, [pc, #72]	; (8000a50 <ca_compare_func_eq+0x36c>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d006      	beq.n	8000a18 <ca_compare_func_eq+0x334>
 8000a0a:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <ca_compare_func_eq+0x370>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	1c5a      	adds	r2, r3, #1
 8000a10:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <ca_compare_func_eq+0x370>)
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	f7ff fc78 	bl	8000308 <_ca_panic>
 8000a18:	4a0f      	ldr	r2, [pc, #60]	; (8000a58 <ca_compare_func_eq+0x374>)
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <ca_compare_func_eq+0x374>)
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d006      	beq.n	8000a2e <ca_compare_func_eq+0x34a>
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <ca_compare_func_eq+0x370>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	1c5a      	adds	r2, r3, #1
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <ca_compare_func_eq+0x370>)
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	f7ff fc6d 	bl	8000308 <_ca_panic>
 8000a2e:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <ca_compare_func_eq+0x368>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a09      	ldr	r2, [pc, #36]	; (8000a58 <ca_compare_func_eq+0x374>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d000      	beq.n	8000a3a <ca_compare_func_eq+0x356>
 8000a38:	e72a      	b.n	8000890 <ca_compare_func_eq+0x1ac>
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <ca_compare_func_eq+0x370>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	1c5a      	adds	r2, r3, #1
 8000a40:	4b04      	ldr	r3, [pc, #16]	; (8000a54 <ca_compare_func_eq+0x370>)
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	f7ff fc60 	bl	8000308 <_ca_panic>
    {
 8000a48:	e722      	b.n	8000890 <ca_compare_func_eq+0x1ac>
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	20000454 	.word	0x20000454
 8000a50:	feed7431 	.word	0xfeed7431
 8000a54:	20000478 	.word	0x20000478
 8000a58:	55a88519 	.word	0x55a88519
 8000a5c:	fffffc18 	.word	0xfffffc18
 8000a60:	5abf0938 	.word	0x5abf0938
 8000a64:	2820f02a 	.word	0x2820f02a
    }
    
    ca_panic();
    ca_panic();
    ca_panic();
}
 8000a68:	0018      	movs	r0, r3
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	b00a      	add	sp, #40	; 0x28
 8000a6e:	bc80      	pop	{r7}
 8000a70:	bc02      	pop	{r1}
 8000a72:	4708      	bx	r1
 8000a74:	4718      	bx	r3
 8000a76:	46c0      	nop			; (mov r8, r8)

08000a78 <ca_state_machine>:
void ca_state_machine(int statenum)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
    static int ca_stored_state;
    
    if (statenum == CA_STATE_INIT) {
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	4a15      	ldr	r2, [pc, #84]	; (8000ad8 <ca_state_machine+0x60>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d103      	bne.n	8000a90 <ca_state_machine+0x18>
        ca_stored_state = 0;
 8000a88:	4b14      	ldr	r3, [pc, #80]	; (8000adc <ca_state_machine+0x64>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
        return;
 8000a8e:	e01e      	b.n	8000ace <ca_state_machine+0x56>
    }
    
    if (++ca_stored_state != statenum){
 8000a90:	4b12      	ldr	r3, [pc, #72]	; (8000adc <ca_state_machine+0x64>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	1c5a      	adds	r2, r3, #1
 8000a96:	4b11      	ldr	r3, [pc, #68]	; (8000adc <ca_state_machine+0x64>)
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	4b10      	ldr	r3, [pc, #64]	; (8000adc <ca_state_machine+0x64>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d006      	beq.n	8000ab2 <ca_state_machine+0x3a>
        ca_panic();
 8000aa4:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <ca_state_machine+0x68>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	1c5a      	adds	r2, r3, #1
 8000aaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ae0 <ca_state_machine+0x68>)
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	f7ff fc2b 	bl	8000308 <_ca_panic>
    }
    
    if (ca_stored_state != statenum){
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <ca_state_machine+0x64>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d007      	beq.n	8000acc <ca_state_machine+0x54>
        ca_panic();
 8000abc:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <ca_state_machine+0x68>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	1c5a      	adds	r2, r3, #1
 8000ac2:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <ca_state_machine+0x68>)
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	f7ff fc1f 	bl	8000308 <_ca_panic>
    }
    
    return;
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	46c0      	nop			; (mov r8, r8)
}
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	b002      	add	sp, #8
 8000ad2:	bc80      	pop	{r7}
 8000ad4:	bc01      	pop	{r0}
 8000ad6:	4700      	bx	r0
 8000ad8:	fffff480 	.word	0xfffff480
 8000adc:	20000474 	.word	0x20000474
 8000ae0:	20000478 	.word	0x20000478

08000ae4 <ca_fastwait>:

int ca_atwait(void)
{}

int ca_fastwait(void)
{}
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	46c0      	nop			; (mov r8, r8)
 8000aea:	0018      	movs	r0, r3
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bc80      	pop	{r7}
 8000af0:	bc02      	pop	{r1}
 8000af2:	4708      	bx	r1

08000af4 <ca_retfast_u32>:

ca_uint32_t ca_retfast_u32(uint32_t value)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	6039      	str	r1, [r7, #0]
    ca_uint32_t ret = {value, ~value};
 8000afe:	2308      	movs	r3, #8
 8000b00:	18fb      	adds	r3, r7, r3
 8000b02:	683a      	ldr	r2, [r7, #0]
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	43da      	mvns	r2, r3
 8000b0a:	2308      	movs	r3, #8
 8000b0c:	18fb      	adds	r3, r7, r3
 8000b0e:	605a      	str	r2, [r3, #4]
    return ret;
 8000b10:	687a      	ldr	r2, [r7, #4]
 8000b12:	2308      	movs	r3, #8
 8000b14:	18fb      	adds	r3, r7, r3
 8000b16:	0010      	movs	r0, r2
 8000b18:	0019      	movs	r1, r3
 8000b1a:	2308      	movs	r3, #8
 8000b1c:	001a      	movs	r2, r3
 8000b1e:	f000 fec9 	bl	80018b4 <memcpy>
}
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	46bd      	mov	sp, r7
 8000b26:	b004      	add	sp, #16
 8000b28:	bc80      	pop	{r7}
 8000b2a:	bc02      	pop	{r1}
 8000b2c:	4708      	bx	r1
 8000b2e:	0000      	movs	r0, r0

08000b30 <ca_fullpanic>:

int ca_fullpanic(void)
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	4b02      	ldr	r3, [pc, #8]	; (8000b40 <ca_fullpanic+0x10>)
 8000b36:	0018      	movs	r0, r3
 8000b38:	f7ff fb70 	bl	800021c <puts>
 8000b3c:	e7fe      	b.n	8000b3c <ca_fullpanic+0xc>
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	080018e4 	.word	0x080018e4

08000b44 <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 8000b44:	b570      	push	{r4, r5, r6, lr}
 8000b46:	b096      	sub	sp, #88	; 0x58
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
  #else
     RCC_OscInitTypeDef RCC_OscInitStruct;
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 8000b48:	2400      	movs	r4, #0
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
 8000b4a:	2603      	movs	r6, #3
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8000b4c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000b50:	a80c      	add	r0, sp, #48	; 0x30

     RCC_ClkInitTypeDef RCC_ClkInitStruct;
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8000b52:	2501      	movs	r5, #1
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8000b54:	930d      	str	r3, [sp, #52]	; 0x34
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 8000b56:	9410      	str	r4, [sp, #64]	; 0x40
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 8000b58:	9414      	str	r4, [sp, #80]	; 0x50
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
 8000b5a:	960c      	str	r6, [sp, #48]	; 0x30
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000b5c:	f000 f8b8 	bl	8000cd0 <HAL_RCC_OscConfig>
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000b60:	230f      	movs	r3, #15
     RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
     uint32_t flash_latency = 0;
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 8000b62:	4621      	mov	r1, r4
 8000b64:	a802      	add	r0, sp, #8
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000b66:	9302      	str	r3, [sp, #8]
     RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 8000b68:	9404      	str	r4, [sp, #16]
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b6a:	9405      	str	r4, [sp, #20]
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b6c:	9406      	str	r4, [sp, #24]
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8000b6e:	9503      	str	r5, [sp, #12]
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 8000b70:	f000 fb18 	bl	80011a4 <HAL_RCC_ClockConfig>




#if (PLATFORM==CWLITEARM)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <platform_init+0x78>)
 8000b76:	695a      	ldr	r2, [r3, #20]
 8000b78:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000b7c:	615a      	str	r2, [r3, #20]
 8000b7e:	695b      	ldr	r3, [r3, #20]
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
  GpioInit.Pull      = GPIO_NOPULL;
 8000b80:	9409      	str	r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8000b86:	4c0e      	ldr	r4, [pc, #56]	; (8000bc0 <platform_init+0x7c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b88:	9301      	str	r3, [sp, #4]
 8000b8a:	9b01      	ldr	r3, [sp, #4]
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000b8c:	9508      	str	r5, [sp, #32]
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
 8000b8e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8000b92:	a907      	add	r1, sp, #28
 8000b94:	4620      	mov	r0, r4
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
 8000b96:	9307      	str	r3, [sp, #28]
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000b98:	960a      	str	r6, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8000b9a:	f000 fba9 	bl	80012f0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8000b9e:	462a      	mov	r2, r5
 8000ba0:	4620      	mov	r0, r4
 8000ba2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ba6:	f000 fc65 	bl	8001474 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8000baa:	462a      	mov	r2, r5
 8000bac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bb0:	4620      	mov	r0, r4
 8000bb2:	f000 fc5f 	bl	8001474 <HAL_GPIO_WritePin>
#endif
}
 8000bb6:	b016      	add	sp, #88	; 0x58
 8000bb8:	bd70      	pop	{r4, r5, r6, pc}
 8000bba:	bf00      	nop
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	48000800 	.word	0x48000800

08000bc4 <init_uart>:

void init_uart(void)
{
 8000bc4:	b510      	push	{r4, lr}
 8000bc6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
 8000bc8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bcc:	9303      	str	r3, [sp, #12]
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	9304      	str	r3, [sp, #16]
  GpioInit.Pull      = GPIO_PULLUP;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	9305      	str	r3, [sp, #20]
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000bd6:	2303      	movs	r3, #3
  GpioInit.Alternate = GPIO_AF7_USART1;
  __GPIOA_CLK_ENABLE();
 8000bd8:	4c15      	ldr	r4, [pc, #84]	; (8000c30 <init_uart+0x6c>)
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000bda:	9306      	str	r3, [sp, #24]
  GpioInit.Alternate = GPIO_AF7_USART1;
 8000bdc:	2307      	movs	r3, #7
 8000bde:	9307      	str	r3, [sp, #28]
  __GPIOA_CLK_ENABLE();
 8000be0:	6963      	ldr	r3, [r4, #20]
 8000be2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be6:	6163      	str	r3, [r4, #20]
 8000be8:	6963      	ldr	r3, [r4, #20]
 8000bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bee:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8000bf0:	a903      	add	r1, sp, #12
 8000bf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __GPIOA_CLK_ENABLE();
 8000bf6:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8000bf8:	f000 fb7a 	bl	80012f0 <HAL_GPIO_Init>

  UartHandle.Instance        = USART1;
 8000bfc:	480d      	ldr	r0, [pc, #52]	; (8000c34 <init_uart+0x70>)
  UartHandle.Init.BaudRate   = 38400;
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <init_uart+0x74>)
 8000c00:	f44f 4e16 	mov.w	lr, #38400	; 0x9600
 8000c04:	e880 4008 	stmia.w	r0, {r3, lr}
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	6083      	str	r3, [r0, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000c0c:	60c3      	str	r3, [r0, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8000c0e:	6103      	str	r3, [r0, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000c10:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8000c12:	230c      	movs	r3, #12
 8000c14:	6143      	str	r3, [r0, #20]
  __USART1_CLK_ENABLE();
 8000c16:	69a3      	ldr	r3, [r4, #24]
 8000c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1c:	61a3      	str	r3, [r4, #24]
 8000c1e:	69a3      	ldr	r3, [r4, #24]
 8000c20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c24:	9302      	str	r3, [sp, #8]
 8000c26:	9b02      	ldr	r3, [sp, #8]
  HAL_UART_Init(&UartHandle);
 8000c28:	f000 fd78 	bl	800171c <HAL_UART_Init>
}
 8000c2c:	b008      	add	sp, #32
 8000c2e:	bd10      	pop	{r4, pc}
 8000c30:	40021000 	.word	0x40021000
 8000c34:	20000484 	.word	0x20000484
 8000c38:	40013800 	.word	0x40013800

08000c3c <trigger_setup>:

void trigger_setup(void)
{
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3c:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <trigger_setup+0x44>)
{
 8000c3e:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c40:	695a      	ldr	r2, [r3, #20]
 8000c42:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000c46:	615a      	str	r2, [r3, #20]
 8000c48:	695b      	ldr	r3, [r3, #20]
{
 8000c4a:	b087      	sub	sp, #28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c50:	9300      	str	r3, [sp, #0]
 8000c52:	9b00      	ldr	r3, [sp, #0]

  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_12;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000c54:	2301      	movs	r3, #1
  GpioInit.Pin       = GPIO_PIN_12;
 8000c56:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000c5a:	9302      	str	r3, [sp, #8]
  GpioInit.Pull      = GPIO_NOPULL;
 8000c5c:	2500      	movs	r5, #0
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000c5e:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8000c60:	a901      	add	r1, sp, #4
 8000c62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000c66:	9304      	str	r3, [sp, #16]
  GpioInit.Pin       = GPIO_PIN_12;
 8000c68:	9401      	str	r4, [sp, #4]
  GpioInit.Pull      = GPIO_NOPULL;
 8000c6a:	9503      	str	r5, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8000c6c:	f000 fb40 	bl	80012f0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8000c70:	462a      	mov	r2, r5
 8000c72:	4621      	mov	r1, r4
 8000c74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c78:	f000 fbfc 	bl	8001474 <HAL_GPIO_WritePin>
}
 8000c7c:	b007      	add	sp, #28
 8000c7e:	bd30      	pop	{r4, r5, pc}
 8000c80:	40021000 	.word	0x40021000

08000c84 <trigger_high>:

void trigger_high(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 8000c84:	2201      	movs	r2, #1
 8000c86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c8e:	f000 bbf1 	b.w	8001474 <HAL_GPIO_WritePin>

08000c92 <trigger_low>:
}

void trigger_low(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8000c92:	2200      	movs	r2, #0
 8000c94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c9c:	f000 bbea 	b.w	8001474 <HAL_GPIO_WritePin>

08000ca0 <putch>:
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK);
  return d;
}

void putch(char c)
{
 8000ca0:	b507      	push	{r0, r1, r2, lr}
  uint8_t d  = c;
 8000ca2:	a902      	add	r1, sp, #8
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8000ca4:	f241 3388 	movw	r3, #5000	; 0x1388
  uint8_t d  = c;
 8000ca8:	f801 0d01 	strb.w	r0, [r1, #-1]!
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8000cac:	2201      	movs	r2, #1
 8000cae:	4803      	ldr	r0, [pc, #12]	; (8000cbc <putch+0x1c>)
 8000cb0:	f000 fd5f 	bl	8001772 <HAL_UART_Transmit>
}
 8000cb4:	b003      	add	sp, #12
 8000cb6:	f85d fb04 	ldr.w	pc, [sp], #4
 8000cba:	bf00      	nop
 8000cbc:	20000484 	.word	0x20000484

08000cc0 <HAL_GetTick>:
	hal_sys_tick = 0;
	return HAL_OK;
}
uint32_t HAL_GetTick(void)
{
	return hal_sys_tick++;
 8000cc0:	4b02      	ldr	r3, [pc, #8]	; (8000ccc <HAL_GetTick+0xc>)
 8000cc2:	6818      	ldr	r0, [r3, #0]
 8000cc4:	1c42      	adds	r2, r0, #1
 8000cc6:	601a      	str	r2, [r3, #0]
}
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	2000047c 	.word	0x2000047c

08000cd0 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cd0:	6803      	ldr	r3, [r0, #0]
{
 8000cd2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cd6:	07d9      	lsls	r1, r3, #31
{
 8000cd8:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cda:	d411      	bmi.n	8000d00 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cdc:	6823      	ldr	r3, [r4, #0]
 8000cde:	079a      	lsls	r2, r3, #30
 8000ce0:	f100 8086 	bmi.w	8000df0 <HAL_RCC_OscConfig+0x120>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ce4:	6823      	ldr	r3, [r4, #0]
 8000ce6:	071e      	lsls	r6, r3, #28
 8000ce8:	f100 80f4 	bmi.w	8000ed4 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000cec:	6823      	ldr	r3, [r4, #0]
 8000cee:	075d      	lsls	r5, r3, #29
 8000cf0:	f100 813b 	bmi.w	8000f6a <HAL_RCC_OscConfig+0x29a>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000cf4:	69e2      	ldr	r2, [r4, #28]
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 81cf 	bne.w	800109a <HAL_RCC_OscConfig+0x3ca>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	e021      	b.n	8000d44 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d00:	49b7      	ldr	r1, [pc, #732]	; (8000fe0 <HAL_RCC_OscConfig+0x310>)
 8000d02:	684b      	ldr	r3, [r1, #4]
 8000d04:	f003 030c 	and.w	r3, r3, #12
 8000d08:	2b04      	cmp	r3, #4
 8000d0a:	d007      	beq.n	8000d1c <HAL_RCC_OscConfig+0x4c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d0c:	684b      	ldr	r3, [r1, #4]
 8000d0e:	f003 030c 	and.w	r3, r3, #12
 8000d12:	2b08      	cmp	r3, #8
 8000d14:	d119      	bne.n	8000d4a <HAL_RCC_OscConfig+0x7a>
 8000d16:	684b      	ldr	r3, [r1, #4]
 8000d18:	03db      	lsls	r3, r3, #15
 8000d1a:	d516      	bpl.n	8000d4a <HAL_RCC_OscConfig+0x7a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d20:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d24:	6809      	ldr	r1, [r1, #0]
 8000d26:	fa93 f3a3 	rbit	r3, r3
 8000d2a:	fab3 f383 	clz	r3, r3
 8000d2e:	f003 031f 	and.w	r3, r3, #31
 8000d32:	2201      	movs	r2, #1
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	420b      	tst	r3, r1
 8000d3a:	d0cf      	beq.n	8000cdc <HAL_RCC_OscConfig+0xc>
 8000d3c:	6863      	ldr	r3, [r4, #4]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d1cc      	bne.n	8000cdc <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000d42:	2001      	movs	r0, #1
}
 8000d44:	b003      	add	sp, #12
 8000d46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d4a:	6862      	ldr	r2, [r4, #4]
 8000d4c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000d50:	d124      	bne.n	8000d9c <HAL_RCC_OscConfig+0xcc>
 8000d52:	680b      	ldr	r3, [r1, #0]
 8000d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d58:	600b      	str	r3, [r1, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000d5a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8000d5c:	68a0      	ldr	r0, [r4, #8]
 8000d5e:	f023 030f 	bic.w	r3, r3, #15
 8000d62:	4303      	orrs	r3, r0
 8000d64:	62cb      	str	r3, [r1, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d66:	b34a      	cbz	r2, 8000dbc <HAL_RCC_OscConfig+0xec>
        tickstart = HAL_GetTick();
 8000d68:	f7ff ffaa 	bl	8000cc0 <HAL_GetTick>
 8000d6c:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8000d70:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d72:	2601      	movs	r6, #1
 8000d74:	fa95 f3a5 	rbit	r3, r5
 8000d78:	680a      	ldr	r2, [r1, #0]
 8000d7a:	fa95 f3a5 	rbit	r3, r5
 8000d7e:	fab3 f383 	clz	r3, r3
 8000d82:	f003 031f 	and.w	r3, r3, #31
 8000d86:	fa06 f303 	lsl.w	r3, r6, r3
 8000d8a:	4213      	tst	r3, r2
 8000d8c:	d1a6      	bne.n	8000cdc <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d8e:	f7ff ff97 	bl	8000cc0 <HAL_GetTick>
 8000d92:	1bc0      	subs	r0, r0, r7
 8000d94:	2864      	cmp	r0, #100	; 0x64
 8000d96:	d9ed      	bls.n	8000d74 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
 8000d98:	2003      	movs	r0, #3
 8000d9a:	e7d3      	b.n	8000d44 <HAL_RCC_OscConfig+0x74>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d9c:	680b      	ldr	r3, [r1, #0]
 8000d9e:	b932      	cbnz	r2, 8000dae <HAL_RCC_OscConfig+0xde>
 8000da0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000da4:	600b      	str	r3, [r1, #0]
 8000da6:	680b      	ldr	r3, [r1, #0]
 8000da8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dac:	e7d4      	b.n	8000d58 <HAL_RCC_OscConfig+0x88>
 8000dae:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000db2:	d1f5      	bne.n	8000da0 <HAL_RCC_OscConfig+0xd0>
 8000db4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000db8:	600b      	str	r3, [r1, #0]
 8000dba:	e7ca      	b.n	8000d52 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8000dbc:	f7ff ff80 	bl	8000cc0 <HAL_GetTick>
 8000dc0:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8000dc4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dc6:	2601      	movs	r6, #1
 8000dc8:	fa95 f3a5 	rbit	r3, r5
 8000dcc:	680a      	ldr	r2, [r1, #0]
 8000dce:	fa95 f3a5 	rbit	r3, r5
 8000dd2:	fab3 f383 	clz	r3, r3
 8000dd6:	f003 031f 	and.w	r3, r3, #31
 8000dda:	fa06 f303 	lsl.w	r3, r6, r3
 8000dde:	4213      	tst	r3, r2
 8000de0:	f43f af7c 	beq.w	8000cdc <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000de4:	f7ff ff6c 	bl	8000cc0 <HAL_GetTick>
 8000de8:	1bc0      	subs	r0, r0, r7
 8000dea:	2864      	cmp	r0, #100	; 0x64
 8000dec:	d9ec      	bls.n	8000dc8 <HAL_RCC_OscConfig+0xf8>
 8000dee:	e7d3      	b.n	8000d98 <HAL_RCC_OscConfig+0xc8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000df0:	497b      	ldr	r1, [pc, #492]	; (8000fe0 <HAL_RCC_OscConfig+0x310>)
 8000df2:	684b      	ldr	r3, [r1, #4]
 8000df4:	f013 0f0c 	tst.w	r3, #12
 8000df8:	d007      	beq.n	8000e0a <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000dfa:	684b      	ldr	r3, [r1, #4]
 8000dfc:	f003 030c 	and.w	r3, r3, #12
 8000e00:	2b08      	cmp	r3, #8
 8000e02:	d121      	bne.n	8000e48 <HAL_RCC_OscConfig+0x178>
 8000e04:	684b      	ldr	r3, [r1, #4]
 8000e06:	03df      	lsls	r7, r3, #15
 8000e08:	d41e      	bmi.n	8000e48 <HAL_RCC_OscConfig+0x178>
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e10:	6808      	ldr	r0, [r1, #0]
 8000e12:	fa93 f3a3 	rbit	r3, r3
 8000e16:	fab3 f383 	clz	r3, r3
 8000e1a:	f003 031f 	and.w	r3, r3, #31
 8000e1e:	2201      	movs	r2, #1
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	4203      	tst	r3, r0
 8000e26:	d002      	beq.n	8000e2e <HAL_RCC_OscConfig+0x15e>
 8000e28:	6923      	ldr	r3, [r4, #16]
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d189      	bne.n	8000d42 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e2e:	6808      	ldr	r0, [r1, #0]
 8000e30:	23f8      	movs	r3, #248	; 0xf8
 8000e32:	fa93 f3a3 	rbit	r3, r3
 8000e36:	fab3 f283 	clz	r2, r3
 8000e3a:	6963      	ldr	r3, [r4, #20]
 8000e3c:	4093      	lsls	r3, r2
 8000e3e:	f020 02f8 	bic.w	r2, r0, #248	; 0xf8
 8000e42:	4313      	orrs	r3, r2
 8000e44:	600b      	str	r3, [r1, #0]
 8000e46:	e74d      	b.n	8000ce4 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e48:	6922      	ldr	r2, [r4, #16]
 8000e4a:	2501      	movs	r5, #1
 8000e4c:	b302      	cbz	r2, 8000e90 <HAL_RCC_OscConfig+0x1c0>
 8000e4e:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 8000e52:	fab3 f383 	clz	r3, r3
 8000e56:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000e5a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	2602      	movs	r6, #2
 8000e62:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8000e64:	f7ff ff2c 	bl	8000cc0 <HAL_GetTick>
 8000e68:	4607      	mov	r7, r0
 8000e6a:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e6e:	680a      	ldr	r2, [r1, #0]
 8000e70:	fa96 f3a6 	rbit	r3, r6
 8000e74:	fab3 f383 	clz	r3, r3
 8000e78:	f003 031f 	and.w	r3, r3, #31
 8000e7c:	fa05 f303 	lsl.w	r3, r5, r3
 8000e80:	4213      	tst	r3, r2
 8000e82:	d1d4      	bne.n	8000e2e <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e84:	f7ff ff1c 	bl	8000cc0 <HAL_GetTick>
 8000e88:	1bc0      	subs	r0, r0, r7
 8000e8a:	2802      	cmp	r0, #2
 8000e8c:	d9ed      	bls.n	8000e6a <HAL_RCC_OscConfig+0x19a>
 8000e8e:	e783      	b.n	8000d98 <HAL_RCC_OscConfig+0xc8>
 8000e90:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8000e94:	fab3 f383 	clz	r3, r3
 8000e98:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000e9c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	2602      	movs	r6, #2
 8000ea4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ea6:	f7ff ff0b 	bl	8000cc0 <HAL_GetTick>
 8000eaa:	4607      	mov	r7, r0
 8000eac:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eb0:	680a      	ldr	r2, [r1, #0]
 8000eb2:	fa96 f3a6 	rbit	r3, r6
 8000eb6:	fab3 f383 	clz	r3, r3
 8000eba:	f003 031f 	and.w	r3, r3, #31
 8000ebe:	fa05 f303 	lsl.w	r3, r5, r3
 8000ec2:	4213      	tst	r3, r2
 8000ec4:	f43f af0e 	beq.w	8000ce4 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ec8:	f7ff fefa 	bl	8000cc0 <HAL_GetTick>
 8000ecc:	1bc0      	subs	r0, r0, r7
 8000ece:	2802      	cmp	r0, #2
 8000ed0:	d9ec      	bls.n	8000eac <HAL_RCC_OscConfig+0x1dc>
 8000ed2:	e761      	b.n	8000d98 <HAL_RCC_OscConfig+0xc8>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ed4:	69a2      	ldr	r2, [r4, #24]
 8000ed6:	4d42      	ldr	r5, [pc, #264]	; (8000fe0 <HAL_RCC_OscConfig+0x310>)
 8000ed8:	4842      	ldr	r0, [pc, #264]	; (8000fe4 <HAL_RCC_OscConfig+0x314>)
 8000eda:	2101      	movs	r1, #1
 8000edc:	b312      	cbz	r2, 8000f24 <HAL_RCC_OscConfig+0x254>
 8000ede:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_ENABLE();
 8000ee2:	fab3 f383 	clz	r3, r3
 8000ee6:	4403      	add	r3, r0
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	2602      	movs	r6, #2
 8000eec:	6019      	str	r1, [r3, #0]
      tickstart = HAL_GetTick();
 8000eee:	f7ff fee7 	bl	8000cc0 <HAL_GetTick>
 8000ef2:	4607      	mov	r7, r0
 8000ef4:	fa96 f3a6 	rbit	r3, r6
 8000ef8:	fa96 f3a6 	rbit	r3, r6
 8000efc:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f00:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000f02:	fa96 f3a6 	rbit	r3, r6
 8000f06:	fab3 f383 	clz	r3, r3
 8000f0a:	f003 031f 	and.w	r3, r3, #31
 8000f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f12:	4213      	tst	r3, r2
 8000f14:	f47f aeea 	bne.w	8000cec <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f18:	f7ff fed2 	bl	8000cc0 <HAL_GetTick>
 8000f1c:	1bc0      	subs	r0, r0, r7
 8000f1e:	2802      	cmp	r0, #2
 8000f20:	d9e8      	bls.n	8000ef4 <HAL_RCC_OscConfig+0x224>
 8000f22:	e739      	b.n	8000d98 <HAL_RCC_OscConfig+0xc8>
 8000f24:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_DISABLE();
 8000f28:	fab3 f383 	clz	r3, r3
 8000f2c:	4403      	add	r3, r0
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	2602      	movs	r6, #2
 8000f32:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000f34:	f7ff fec4 	bl	8000cc0 <HAL_GetTick>
 8000f38:	4607      	mov	r7, r0
 8000f3a:	fa96 f3a6 	rbit	r3, r6
 8000f3e:	fa96 f3a6 	rbit	r3, r6
 8000f42:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f46:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000f48:	fa96 f3a6 	rbit	r3, r6
 8000f4c:	fab3 f383 	clz	r3, r3
 8000f50:	f003 031f 	and.w	r3, r3, #31
 8000f54:	fa01 f303 	lsl.w	r3, r1, r3
 8000f58:	4213      	tst	r3, r2
 8000f5a:	f43f aec7 	beq.w	8000cec <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f5e:	f7ff feaf 	bl	8000cc0 <HAL_GetTick>
 8000f62:	1bc0      	subs	r0, r0, r7
 8000f64:	2802      	cmp	r0, #2
 8000f66:	d9e8      	bls.n	8000f3a <HAL_RCC_OscConfig+0x26a>
 8000f68:	e716      	b.n	8000d98 <HAL_RCC_OscConfig+0xc8>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f6a:	491d      	ldr	r1, [pc, #116]	; (8000fe0 <HAL_RCC_OscConfig+0x310>)
 8000f6c:	69cb      	ldr	r3, [r1, #28]
 8000f6e:	00d8      	lsls	r0, r3, #3
 8000f70:	d433      	bmi.n	8000fda <HAL_RCC_OscConfig+0x30a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f72:	69cb      	ldr	r3, [r1, #28]
 8000f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f78:	61cb      	str	r3, [r1, #28]
 8000f7a:	69cb      	ldr	r3, [r1, #28]
 8000f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f80:	9301      	str	r3, [sp, #4]
 8000f82:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000f84:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f86:	4e18      	ldr	r6, [pc, #96]	; (8000fe8 <HAL_RCC_OscConfig+0x318>)
 8000f88:	6833      	ldr	r3, [r6, #0]
 8000f8a:	05da      	lsls	r2, r3, #23
 8000f8c:	d52e      	bpl.n	8000fec <HAL_RCC_OscConfig+0x31c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f8e:	68e3      	ldr	r3, [r4, #12]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d13b      	bne.n	800100c <HAL_RCC_OscConfig+0x33c>
 8000f94:	6a0b      	ldr	r3, [r1, #32]
 8000f96:	f043 0301 	orr.w	r3, r3, #1
 8000f9a:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8000f9c:	f7ff fe90 	bl	8000cc0 <HAL_GetTick>
 8000fa0:	2602      	movs	r6, #2
 8000fa2:	4681      	mov	r9, r0
 8000fa4:	46b0      	mov	r8, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fa6:	2701      	movs	r7, #1
 8000fa8:	fa96 f3a6 	rbit	r3, r6
 8000fac:	fa96 f3a6 	rbit	r3, r6
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d06a      	beq.n	800108a <HAL_RCC_OscConfig+0x3ba>
 8000fb4:	6a0a      	ldr	r2, [r1, #32]
 8000fb6:	fa98 f3a8 	rbit	r3, r8
 8000fba:	fab3 f383 	clz	r3, r3
 8000fbe:	f003 031f 	and.w	r3, r3, #31
 8000fc2:	fa07 f303 	lsl.w	r3, r7, r3
 8000fc6:	4213      	tst	r3, r2
 8000fc8:	d056      	beq.n	8001078 <HAL_RCC_OscConfig+0x3a8>
    if(pwrclkchanged == SET)
 8000fca:	2d00      	cmp	r5, #0
 8000fcc:	f43f ae92 	beq.w	8000cf4 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fd0:	69cb      	ldr	r3, [r1, #28]
 8000fd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fd6:	61cb      	str	r3, [r1, #28]
 8000fd8:	e68c      	b.n	8000cf4 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8000fda:	2500      	movs	r5, #0
 8000fdc:	e7d3      	b.n	8000f86 <HAL_RCC_OscConfig+0x2b6>
 8000fde:	bf00      	nop
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	10908120 	.word	0x10908120
 8000fe8:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fec:	6833      	ldr	r3, [r6, #0]
 8000fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ff2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000ff4:	f7ff fe64 	bl	8000cc0 <HAL_GetTick>
 8000ff8:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ffa:	6833      	ldr	r3, [r6, #0]
 8000ffc:	05db      	lsls	r3, r3, #23
 8000ffe:	d4c6      	bmi.n	8000f8e <HAL_RCC_OscConfig+0x2be>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001000:	f7ff fe5e 	bl	8000cc0 <HAL_GetTick>
 8001004:	1bc0      	subs	r0, r0, r7
 8001006:	2864      	cmp	r0, #100	; 0x64
 8001008:	d9f7      	bls.n	8000ffa <HAL_RCC_OscConfig+0x32a>
 800100a:	e6c5      	b.n	8000d98 <HAL_RCC_OscConfig+0xc8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800100c:	bb33      	cbnz	r3, 800105c <HAL_RCC_OscConfig+0x38c>
 800100e:	6a0b      	ldr	r3, [r1, #32]
 8001010:	f023 0301 	bic.w	r3, r3, #1
 8001014:	620b      	str	r3, [r1, #32]
 8001016:	6a0b      	ldr	r3, [r1, #32]
 8001018:	f023 0304 	bic.w	r3, r3, #4
 800101c:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 800101e:	f7ff fe4f 	bl	8000cc0 <HAL_GetTick>
 8001022:	2602      	movs	r6, #2
 8001024:	4681      	mov	r9, r0
 8001026:	46b0      	mov	r8, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001028:	2701      	movs	r7, #1
 800102a:	fa96 f3a6 	rbit	r3, r6
 800102e:	fa96 f3a6 	rbit	r3, r6
 8001032:	b373      	cbz	r3, 8001092 <HAL_RCC_OscConfig+0x3c2>
 8001034:	6a0a      	ldr	r2, [r1, #32]
 8001036:	fa98 f3a8 	rbit	r3, r8
 800103a:	fab3 f383 	clz	r3, r3
 800103e:	f003 031f 	and.w	r3, r3, #31
 8001042:	fa07 f303 	lsl.w	r3, r7, r3
 8001046:	4213      	tst	r3, r2
 8001048:	d0bf      	beq.n	8000fca <HAL_RCC_OscConfig+0x2fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800104a:	f7ff fe39 	bl	8000cc0 <HAL_GetTick>
 800104e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001052:	eba0 0009 	sub.w	r0, r0, r9
 8001056:	4298      	cmp	r0, r3
 8001058:	d9e7      	bls.n	800102a <HAL_RCC_OscConfig+0x35a>
 800105a:	e69d      	b.n	8000d98 <HAL_RCC_OscConfig+0xc8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800105c:	2b05      	cmp	r3, #5
 800105e:	6a0b      	ldr	r3, [r1, #32]
 8001060:	d103      	bne.n	800106a <HAL_RCC_OscConfig+0x39a>
 8001062:	f043 0304 	orr.w	r3, r3, #4
 8001066:	620b      	str	r3, [r1, #32]
 8001068:	e794      	b.n	8000f94 <HAL_RCC_OscConfig+0x2c4>
 800106a:	f023 0301 	bic.w	r3, r3, #1
 800106e:	620b      	str	r3, [r1, #32]
 8001070:	6a0b      	ldr	r3, [r1, #32]
 8001072:	f023 0304 	bic.w	r3, r3, #4
 8001076:	e790      	b.n	8000f9a <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001078:	f7ff fe22 	bl	8000cc0 <HAL_GetTick>
 800107c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001080:	eba0 0009 	sub.w	r0, r0, r9
 8001084:	4298      	cmp	r0, r3
 8001086:	d98f      	bls.n	8000fa8 <HAL_RCC_OscConfig+0x2d8>
 8001088:	e686      	b.n	8000d98 <HAL_RCC_OscConfig+0xc8>
 800108a:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800108e:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001090:	e791      	b.n	8000fb6 <HAL_RCC_OscConfig+0x2e6>
 8001092:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001096:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001098:	e7cd      	b.n	8001036 <HAL_RCC_OscConfig+0x366>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800109a:	4941      	ldr	r1, [pc, #260]	; (80011a0 <HAL_RCC_OscConfig+0x4d0>)
 800109c:	684b      	ldr	r3, [r1, #4]
 800109e:	f003 030c 	and.w	r3, r3, #12
 80010a2:	2b08      	cmp	r3, #8
 80010a4:	f43f ae4d 	beq.w	8000d42 <HAL_RCC_OscConfig+0x72>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010a8:	2a02      	cmp	r2, #2
 80010aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010ae:	d151      	bne.n	8001154 <HAL_RCC_OscConfig+0x484>
 80010b0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80010b4:	fab3 f383 	clz	r3, r3
 80010b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80010bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80010c6:	f7ff fdfb 	bl	8000cc0 <HAL_GetTick>
 80010ca:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 80010ce:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010d0:	2501      	movs	r5, #1
 80010d2:	fa96 f3a6 	rbit	r3, r6
 80010d6:	680a      	ldr	r2, [r1, #0]
 80010d8:	fa96 f3a6 	rbit	r3, r6
 80010dc:	fab3 f383 	clz	r3, r3
 80010e0:	f003 031f 	and.w	r3, r3, #31
 80010e4:	fa05 f303 	lsl.w	r3, r5, r3
 80010e8:	4213      	tst	r3, r2
 80010ea:	d12d      	bne.n	8001148 <HAL_RCC_OscConfig+0x478>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010ec:	684a      	ldr	r2, [r1, #4]
 80010ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80010f0:	6a20      	ldr	r0, [r4, #32]
 80010f2:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80010f6:	4303      	orrs	r3, r0
 80010f8:	4313      	orrs	r3, r2
 80010fa:	604b      	str	r3, [r1, #4]
 80010fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001100:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001104:	fab3 f383 	clz	r3, r3
 8001108:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800110c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8001116:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8001118:	f7ff fdd2 	bl	8000cc0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800111c:	2501      	movs	r5, #1
        tickstart = HAL_GetTick();
 800111e:	4606      	mov	r6, r0
 8001120:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001124:	680a      	ldr	r2, [r1, #0]
 8001126:	fa94 f3a4 	rbit	r3, r4
 800112a:	fab3 f383 	clz	r3, r3
 800112e:	f003 031f 	and.w	r3, r3, #31
 8001132:	fa05 f303 	lsl.w	r3, r5, r3
 8001136:	4213      	tst	r3, r2
 8001138:	f47f ade0 	bne.w	8000cfc <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800113c:	f7ff fdc0 	bl	8000cc0 <HAL_GetTick>
 8001140:	1b80      	subs	r0, r0, r6
 8001142:	2802      	cmp	r0, #2
 8001144:	d9ec      	bls.n	8001120 <HAL_RCC_OscConfig+0x450>
 8001146:	e627      	b.n	8000d98 <HAL_RCC_OscConfig+0xc8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001148:	f7ff fdba 	bl	8000cc0 <HAL_GetTick>
 800114c:	1bc0      	subs	r0, r0, r7
 800114e:	2802      	cmp	r0, #2
 8001150:	d9bf      	bls.n	80010d2 <HAL_RCC_OscConfig+0x402>
 8001152:	e621      	b.n	8000d98 <HAL_RCC_OscConfig+0xc8>
 8001154:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001158:	fab3 f383 	clz	r3, r3
 800115c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001160:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800116a:	f7ff fda9 	bl	8000cc0 <HAL_GetTick>
 800116e:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8001172:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001174:	2501      	movs	r5, #1
 8001176:	fa94 f3a4 	rbit	r3, r4
 800117a:	680a      	ldr	r2, [r1, #0]
 800117c:	fa94 f3a4 	rbit	r3, r4
 8001180:	fab3 f383 	clz	r3, r3
 8001184:	f003 031f 	and.w	r3, r3, #31
 8001188:	fa05 f303 	lsl.w	r3, r5, r3
 800118c:	4213      	tst	r3, r2
 800118e:	f43f adb5 	beq.w	8000cfc <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001192:	f7ff fd95 	bl	8000cc0 <HAL_GetTick>
 8001196:	1b80      	subs	r0, r0, r6
 8001198:	2802      	cmp	r0, #2
 800119a:	d9ec      	bls.n	8001176 <HAL_RCC_OscConfig+0x4a6>
 800119c:	e5fc      	b.n	8000d98 <HAL_RCC_OscConfig+0xc8>
 800119e:	bf00      	nop
 80011a0:	40021000 	.word	0x40021000

080011a4 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80011a4:	4a50      	ldr	r2, [pc, #320]	; (80012e8 <HAL_RCC_ClockConfig+0x144>)
{
 80011a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80011a8:	6813      	ldr	r3, [r2, #0]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	428b      	cmp	r3, r1
{
 80011b0:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80011b2:	d31b      	bcc.n	80011ec <HAL_RCC_ClockConfig+0x48>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011b4:	682a      	ldr	r2, [r5, #0]
 80011b6:	0790      	lsls	r0, r2, #30
 80011b8:	d424      	bmi.n	8001204 <HAL_RCC_ClockConfig+0x60>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011ba:	07d2      	lsls	r2, r2, #31
 80011bc:	d42a      	bmi.n	8001214 <HAL_RCC_ClockConfig+0x70>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80011be:	4a4a      	ldr	r2, [pc, #296]	; (80012e8 <HAL_RCC_ClockConfig+0x144>)
 80011c0:	6813      	ldr	r3, [r2, #0]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	4299      	cmp	r1, r3
 80011c8:	d37a      	bcc.n	80012c0 <HAL_RCC_ClockConfig+0x11c>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011ca:	6828      	ldr	r0, [r5, #0]
 80011cc:	0743      	lsls	r3, r0, #29
 80011ce:	f100 8082 	bmi.w	80012d6 <HAL_RCC_ClockConfig+0x132>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011d2:	f010 0008 	ands.w	r0, r0, #8
 80011d6:	d008      	beq.n	80011ea <HAL_RCC_ClockConfig+0x46>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011d8:	4a44      	ldr	r2, [pc, #272]	; (80012ec <HAL_RCC_ClockConfig+0x148>)
 80011da:	6929      	ldr	r1, [r5, #16]
 80011dc:	6853      	ldr	r3, [r2, #4]
 80011de:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80011e2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80011e6:	6053      	str	r3, [r2, #4]
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 80011e8:	2000      	movs	r0, #0
}
 80011ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ec:	6813      	ldr	r3, [r2, #0]
 80011ee:	f023 0307 	bic.w	r3, r3, #7
 80011f2:	430b      	orrs	r3, r1
 80011f4:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80011f6:	6813      	ldr	r3, [r2, #0]
 80011f8:	f003 0307 	and.w	r3, r3, #7
 80011fc:	4299      	cmp	r1, r3
 80011fe:	d0d9      	beq.n	80011b4 <HAL_RCC_ClockConfig+0x10>
      return HAL_ERROR;
 8001200:	2001      	movs	r0, #1
 8001202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001204:	4839      	ldr	r0, [pc, #228]	; (80012ec <HAL_RCC_ClockConfig+0x148>)
 8001206:	68ac      	ldr	r4, [r5, #8]
 8001208:	6843      	ldr	r3, [r0, #4]
 800120a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800120e:	4323      	orrs	r3, r4
 8001210:	6043      	str	r3, [r0, #4]
 8001212:	e7d2      	b.n	80011ba <HAL_RCC_ClockConfig+0x16>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001214:	686a      	ldr	r2, [r5, #4]
 8001216:	4c35      	ldr	r4, [pc, #212]	; (80012ec <HAL_RCC_ClockConfig+0x148>)
 8001218:	2a01      	cmp	r2, #1
 800121a:	d127      	bne.n	800126c <HAL_RCC_ClockConfig+0xc8>
 800121c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001220:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001224:	6820      	ldr	r0, [r4, #0]
 8001226:	fa93 f3a3 	rbit	r3, r3
 800122a:	fab3 f383 	clz	r3, r3
 800122e:	f003 031f 	and.w	r3, r3, #31
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	4203      	tst	r3, r0
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001238:	d0e2      	beq.n	8001200 <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800123a:	6863      	ldr	r3, [r4, #4]
 800123c:	f023 0303 	bic.w	r3, r3, #3
 8001240:	431a      	orrs	r2, r3
 8001242:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 8001244:	f7ff fd3c 	bl	8000cc0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001248:	686b      	ldr	r3, [r5, #4]
 800124a:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 800124c:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800124e:	f241 3788 	movw	r7, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001252:	d11e      	bne.n	8001292 <HAL_RCC_ClockConfig+0xee>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001254:	6863      	ldr	r3, [r4, #4]
 8001256:	f003 030c 	and.w	r3, r3, #12
 800125a:	2b04      	cmp	r3, #4
 800125c:	d0af      	beq.n	80011be <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800125e:	f7ff fd2f 	bl	8000cc0 <HAL_GetTick>
 8001262:	1b80      	subs	r0, r0, r6
 8001264:	42b8      	cmp	r0, r7
 8001266:	d9f5      	bls.n	8001254 <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 8001268:	2003      	movs	r0, #3
 800126a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800126c:	2a02      	cmp	r2, #2
 800126e:	bf0c      	ite	eq
 8001270:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001274:	2302      	movne	r3, #2
 8001276:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800127a:	6826      	ldr	r6, [r4, #0]
 800127c:	fa93 f3a3 	rbit	r3, r3
 8001280:	fab3 f383 	clz	r3, r3
 8001284:	f003 031f 	and.w	r3, r3, #31
 8001288:	2001      	movs	r0, #1
 800128a:	fa00 f303 	lsl.w	r3, r0, r3
 800128e:	4233      	tst	r3, r6
 8001290:	e7d2      	b.n	8001238 <HAL_RCC_ClockConfig+0x94>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001292:	2b02      	cmp	r3, #2
 8001294:	d10f      	bne.n	80012b6 <HAL_RCC_ClockConfig+0x112>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001296:	6863      	ldr	r3, [r4, #4]
 8001298:	f003 030c 	and.w	r3, r3, #12
 800129c:	2b08      	cmp	r3, #8
 800129e:	d08e      	beq.n	80011be <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012a0:	f7ff fd0e 	bl	8000cc0 <HAL_GetTick>
 80012a4:	1b80      	subs	r0, r0, r6
 80012a6:	42b8      	cmp	r0, r7
 80012a8:	d9f5      	bls.n	8001296 <HAL_RCC_ClockConfig+0xf2>
 80012aa:	e7dd      	b.n	8001268 <HAL_RCC_ClockConfig+0xc4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012ac:	f7ff fd08 	bl	8000cc0 <HAL_GetTick>
 80012b0:	1b80      	subs	r0, r0, r6
 80012b2:	42b8      	cmp	r0, r7
 80012b4:	d8d8      	bhi.n	8001268 <HAL_RCC_ClockConfig+0xc4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80012b6:	6863      	ldr	r3, [r4, #4]
 80012b8:	f013 0f0c 	tst.w	r3, #12
 80012bc:	d1f6      	bne.n	80012ac <HAL_RCC_ClockConfig+0x108>
 80012be:	e77e      	b.n	80011be <HAL_RCC_ClockConfig+0x1a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012c0:	6813      	ldr	r3, [r2, #0]
 80012c2:	f023 0307 	bic.w	r3, r3, #7
 80012c6:	430b      	orrs	r3, r1
 80012c8:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80012ca:	6813      	ldr	r3, [r2, #0]
 80012cc:	f003 0307 	and.w	r3, r3, #7
 80012d0:	4299      	cmp	r1, r3
 80012d2:	d195      	bne.n	8001200 <HAL_RCC_ClockConfig+0x5c>
 80012d4:	e779      	b.n	80011ca <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012d6:	4a05      	ldr	r2, [pc, #20]	; (80012ec <HAL_RCC_ClockConfig+0x148>)
 80012d8:	68e9      	ldr	r1, [r5, #12]
 80012da:	6853      	ldr	r3, [r2, #4]
 80012dc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80012e0:	430b      	orrs	r3, r1
 80012e2:	6053      	str	r3, [r2, #4]
 80012e4:	e775      	b.n	80011d2 <HAL_RCC_ClockConfig+0x2e>
 80012e6:	bf00      	nop
 80012e8:	40022000 	.word	0x40022000
 80012ec:	40021000 	.word	0x40021000

080012f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80012f4:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f8:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8001470 <HAL_GPIO_Init+0x180>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012fc:	4a5a      	ldr	r2, [pc, #360]	; (8001468 <HAL_GPIO_Init+0x178>)
  uint32_t position = 0x00U;
 80012fe:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001300:	fa38 f403 	lsrs.w	r4, r8, r3
 8001304:	d102      	bne.n	800130c <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 8001306:	b003      	add	sp, #12
 8001308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800130c:	2401      	movs	r4, #1
 800130e:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 8001312:	ea18 050a 	ands.w	r5, r8, sl
 8001316:	f000 809c 	beq.w	8001452 <HAL_GPIO_Init+0x162>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800131a:	684c      	ldr	r4, [r1, #4]
 800131c:	f024 0b10 	bic.w	fp, r4, #16
 8001320:	f1bb 0f02 	cmp.w	fp, #2
 8001324:	d114      	bne.n	8001350 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3];
 8001326:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 800132a:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800132e:	f003 0c07 	and.w	ip, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8001332:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001336:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800133a:	270f      	movs	r7, #15
 800133c:	fa07 f70c 	lsl.w	r7, r7, ip
 8001340:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001344:	690e      	ldr	r6, [r1, #16]
 8001346:	fa06 f60c 	lsl.w	r6, r6, ip
 800134a:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 800134c:	f8ce 6020 	str.w	r6, [lr, #32]
 8001350:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001354:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8001356:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001358:	fa07 f70c 	lsl.w	r7, r7, ip
 800135c:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800135e:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001362:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001364:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001368:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800136c:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001370:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8001374:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001376:	d811      	bhi.n	800139c <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 8001378:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800137a:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 800137e:	68ce      	ldr	r6, [r1, #12]
 8001380:	fa06 fe0c 	lsl.w	lr, r6, ip
 8001384:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8001388:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800138a:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800138c:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001390:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8001394:	409e      	lsls	r6, r3
 8001396:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 800139a:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 800139c:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800139e:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013a0:	688e      	ldr	r6, [r1, #8]
 80013a2:	fa06 f60c 	lsl.w	r6, r6, ip
 80013a6:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013a8:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 80013aa:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013ac:	d551      	bpl.n	8001452 <HAL_GPIO_Init+0x162>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ae:	f8d9 6018 	ldr.w	r6, [r9, #24]
 80013b2:	f046 0601 	orr.w	r6, r6, #1
 80013b6:	f8c9 6018 	str.w	r6, [r9, #24]
 80013ba:	f8d9 6018 	ldr.w	r6, [r9, #24]
 80013be:	f023 0703 	bic.w	r7, r3, #3
 80013c2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80013c6:	f006 0601 	and.w	r6, r6, #1
 80013ca:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80013ce:	9601      	str	r6, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80013d0:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d4:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 80013d6:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80013d8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80013dc:	f04f 0e0f 	mov.w	lr, #15
 80013e0:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80013e4:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80013e8:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80013ec:	d033      	beq.n	8001456 <HAL_GPIO_Init+0x166>
 80013ee:	4e1f      	ldr	r6, [pc, #124]	; (800146c <HAL_GPIO_Init+0x17c>)
 80013f0:	42b0      	cmp	r0, r6
 80013f2:	d032      	beq.n	800145a <HAL_GPIO_Init+0x16a>
 80013f4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80013f8:	42b0      	cmp	r0, r6
 80013fa:	d030      	beq.n	800145e <HAL_GPIO_Init+0x16e>
 80013fc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001400:	42b0      	cmp	r0, r6
 8001402:	d02e      	beq.n	8001462 <HAL_GPIO_Init+0x172>
 8001404:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001408:	42b0      	cmp	r0, r6
 800140a:	bf14      	ite	ne
 800140c:	2605      	movne	r6, #5
 800140e:	2604      	moveq	r6, #4
 8001410:	fa06 f60c 	lsl.w	r6, r6, ip
 8001414:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8001418:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 800141a:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800141c:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800141e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001422:	bf0c      	ite	eq
 8001424:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001426:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 8001428:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 800142a:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800142c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001430:	bf0c      	ite	eq
 8001432:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001434:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 8001436:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8001438:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800143a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800143e:	bf0c      	ite	eq
 8001440:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001442:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 8001444:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8001446:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001448:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800144a:	bf54      	ite	pl
 800144c:	403e      	andpl	r6, r7
          temp |= iocurrent;
 800144e:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 8001450:	60d6      	str	r6, [r2, #12]
    position++;
 8001452:	3301      	adds	r3, #1
 8001454:	e754      	b.n	8001300 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001456:	2600      	movs	r6, #0
 8001458:	e7da      	b.n	8001410 <HAL_GPIO_Init+0x120>
 800145a:	2601      	movs	r6, #1
 800145c:	e7d8      	b.n	8001410 <HAL_GPIO_Init+0x120>
 800145e:	2602      	movs	r6, #2
 8001460:	e7d6      	b.n	8001410 <HAL_GPIO_Init+0x120>
 8001462:	2603      	movs	r6, #3
 8001464:	e7d4      	b.n	8001410 <HAL_GPIO_Init+0x120>
 8001466:	bf00      	nop
 8001468:	40010400 	.word	0x40010400
 800146c:	48000400 	.word	0x48000400
 8001470:	40021000 	.word	0x40021000

08001474 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001474:	b10a      	cbz	r2, 800147a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001476:	6181      	str	r1, [r0, #24]
 8001478:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800147a:	6281      	str	r1, [r0, #40]	; 0x28
 800147c:	4770      	bx	lr
 800147e:	0000      	movs	r0, r0

08001480 <UART_SetConfig>:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001480:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001482:	6881      	ldr	r1, [r0, #8]
 8001484:	69c3      	ldr	r3, [r0, #28]
{
 8001486:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001488:	6905      	ldr	r5, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800148a:	6814      	ldr	r4, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800148c:	4329      	orrs	r1, r5
 800148e:	6945      	ldr	r5, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001490:	f424 4416 	bic.w	r4, r4, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001494:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001496:	f024 040c 	bic.w	r4, r4, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800149a:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800149c:	4321      	orrs	r1, r4
 800149e:	6011      	str	r1, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80014a0:	6851      	ldr	r1, [r2, #4]
 80014a2:	68c4      	ldr	r4, [r0, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80014a4:	6a05      	ldr	r5, [r0, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80014a6:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80014aa:	4321      	orrs	r1, r4
 80014ac:	6051      	str	r1, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80014ae:	6894      	ldr	r4, [r2, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80014b0:	6981      	ldr	r1, [r0, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80014b2:	f424 6430 	bic.w	r4, r4, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80014b6:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80014b8:	4321      	orrs	r1, r4
 80014ba:	6091      	str	r1, [r2, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80014bc:	4962      	ldr	r1, [pc, #392]	; (8001648 <UART_SetConfig+0x1c8>)
 80014be:	428a      	cmp	r2, r1
 80014c0:	d112      	bne.n	80014e8 <UART_SetConfig+0x68>
 80014c2:	f501 4158 	add.w	r1, r1, #55296	; 0xd800
 80014c6:	4c61      	ldr	r4, [pc, #388]	; (800164c <UART_SetConfig+0x1cc>)
 80014c8:	6b09      	ldr	r1, [r1, #48]	; 0x30
 80014ca:	f001 0103 	and.w	r1, r1, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80014ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014d2:	5c61      	ldrb	r1, [r4, r1]
 80014d4:	d06e      	beq.n	80015b4 <UART_SetConfig+0x134>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 80014d6:	2908      	cmp	r1, #8
 80014d8:	d819      	bhi.n	800150e <UART_SetConfig+0x8e>
 80014da:	e8df f001 	tbb	[pc, r1]
 80014de:	8bb0      	.short	0x8bb0
 80014e0:	18b01896 	.word	0x18b01896
 80014e4:	1818      	.short	0x1818
 80014e6:	a0          	.byte	0xa0
 80014e7:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80014e8:	4959      	ldr	r1, [pc, #356]	; (8001650 <UART_SetConfig+0x1d0>)
 80014ea:	428a      	cmp	r2, r1
 80014ec:	d12c      	bne.n	8001548 <UART_SetConfig+0xc8>
 80014ee:	f501 31e6 	add.w	r1, r1, #117760	; 0x1cc00
 80014f2:	6b09      	ldr	r1, [r1, #48]	; 0x30
 80014f4:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
 80014f8:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80014fc:	f000 809c 	beq.w	8001638 <UART_SetConfig+0x1b8>
 8001500:	d807      	bhi.n	8001512 <UART_SetConfig+0x92>
 8001502:	2900      	cmp	r1, #0
 8001504:	f000 8098 	beq.w	8001638 <UART_SetConfig+0x1b8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001508:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800150c:	d06f      	beq.n	80015ee <UART_SetConfig+0x16e>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800150e:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 8001510:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001512:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8001516:	f000 8087 	beq.w	8001628 <UART_SetConfig+0x1a8>
 800151a:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 800151e:	d1f3      	bne.n	8001508 <UART_SetConfig+0x88>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001520:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001524:	d171      	bne.n	800160a <UART_SetConfig+0x18a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001526:	6841      	ldr	r1, [r0, #4]
 8001528:	084b      	lsrs	r3, r1, #1
 800152a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800152e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001532:	fbb3 f3f1 	udiv	r3, r3, r1
  HAL_StatusTypeDef ret               = HAL_OK;
 8001536:	2000      	movs	r0, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001538:	b29b      	uxth	r3, r3
    brrtemp = usartdiv & 0xFFF0U;
 800153a:	f023 010f 	bic.w	r1, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800153e:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8001542:	430b      	orrs	r3, r1
 8001544:	60d3      	str	r3, [r2, #12]
 8001546:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001548:	4942      	ldr	r1, [pc, #264]	; (8001654 <UART_SetConfig+0x1d4>)
 800154a:	428a      	cmp	r2, r1
 800154c:	d10e      	bne.n	800156c <UART_SetConfig+0xec>
 800154e:	f501 31e4 	add.w	r1, r1, #116736	; 0x1c800
 8001552:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8001554:	f401 2140 	and.w	r1, r1, #786432	; 0xc0000
 8001558:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 800155c:	d06c      	beq.n	8001638 <UART_SetConfig+0x1b8>
 800155e:	d9d0      	bls.n	8001502 <UART_SetConfig+0x82>
 8001560:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 8001564:	d060      	beq.n	8001628 <UART_SetConfig+0x1a8>
 8001566:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
 800156a:	e7d8      	b.n	800151e <UART_SetConfig+0x9e>
 800156c:	493a      	ldr	r1, [pc, #232]	; (8001658 <UART_SetConfig+0x1d8>)
 800156e:	428a      	cmp	r2, r1
 8001570:	d10e      	bne.n	8001590 <UART_SetConfig+0x110>
 8001572:	f501 31e2 	add.w	r1, r1, #115712	; 0x1c400
 8001576:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8001578:	f401 1140 	and.w	r1, r1, #3145728	; 0x300000
 800157c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8001580:	d05a      	beq.n	8001638 <UART_SetConfig+0x1b8>
 8001582:	d9be      	bls.n	8001502 <UART_SetConfig+0x82>
 8001584:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8001588:	d04e      	beq.n	8001628 <UART_SetConfig+0x1a8>
 800158a:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 800158e:	e7c6      	b.n	800151e <UART_SetConfig+0x9e>
 8001590:	4932      	ldr	r1, [pc, #200]	; (800165c <UART_SetConfig+0x1dc>)
 8001592:	428a      	cmp	r2, r1
 8001594:	d1b8      	bne.n	8001508 <UART_SetConfig+0x88>
 8001596:	f501 31e0 	add.w	r1, r1, #114688	; 0x1c000
 800159a:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800159c:	f401 0140 	and.w	r1, r1, #12582912	; 0xc00000
 80015a0:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 80015a4:	d048      	beq.n	8001638 <UART_SetConfig+0x1b8>
 80015a6:	d9ac      	bls.n	8001502 <UART_SetConfig+0x82>
 80015a8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80015ac:	d03c      	beq.n	8001628 <UART_SetConfig+0x1a8>
 80015ae:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 80015b2:	e7b4      	b.n	800151e <UART_SetConfig+0x9e>
    switch (clocksource)
 80015b4:	2908      	cmp	r1, #8
 80015b6:	d81a      	bhi.n	80015ee <UART_SetConfig+0x16e>
 80015b8:	a301      	add	r3, pc, #4	; (adr r3, 80015c0 <UART_SetConfig+0x140>)
 80015ba:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80015be:	bf00      	nop
 80015c0:	080015e5 	.word	0x080015e5
 80015c4:	080015e5 	.word	0x080015e5
 80015c8:	08001527 	.word	0x08001527
 80015cc:	080015ef 	.word	0x080015ef
 80015d0:	080015e5 	.word	0x080015e5
 80015d4:	080015ef 	.word	0x080015ef
 80015d8:	080015ef 	.word	0x080015ef
 80015dc:	080015ef 	.word	0x080015ef
 80015e0:	0800162f 	.word	0x0800162f
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80015e4:	6841      	ldr	r1, [r0, #4]
 80015e6:	084b      	lsrs	r3, r1, #1
 80015e8:	f503 0361 	add.w	r3, r3, #14745600	; 0xe10000
 80015ec:	e7a1      	b.n	8001532 <UART_SetConfig+0xb2>
        ret = HAL_ERROR;
 80015ee:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80015f0:	2300      	movs	r3, #0
 80015f2:	e7a2      	b.n	800153a <UART_SetConfig+0xba>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80015f4:	6842      	ldr	r2, [r0, #4]
 80015f6:	0853      	lsrs	r3, r2, #1
 80015f8:	f503 03e1 	add.w	r3, r3, #7372800	; 0x708000
 80015fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8001600:	4a11      	ldr	r2, [pc, #68]	; (8001648 <UART_SetConfig+0x1c8>)
 8001602:	b29b      	uxth	r3, r3
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001604:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001606:	2000      	movs	r0, #0
        break;
 8001608:	bd30      	pop	{r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800160a:	6841      	ldr	r1, [r0, #4]
 800160c:	084b      	lsrs	r3, r1, #1
 800160e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001612:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001616:	fbb3 f3f1 	udiv	r3, r3, r1
 800161a:	b29b      	uxth	r3, r3
 800161c:	e7f2      	b.n	8001604 <UART_SetConfig+0x184>
 800161e:	6841      	ldr	r1, [r0, #4]
 8001620:	084b      	lsrs	r3, r1, #1
 8001622:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001626:	e7f6      	b.n	8001616 <UART_SetConfig+0x196>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001628:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800162c:	d1f7      	bne.n	800161e <UART_SetConfig+0x19e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800162e:	6841      	ldr	r1, [r0, #4]
 8001630:	084b      	lsrs	r3, r1, #1
 8001632:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001636:	e77c      	b.n	8001532 <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001638:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800163c:	d0d2      	beq.n	80015e4 <UART_SetConfig+0x164>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800163e:	6841      	ldr	r1, [r0, #4]
 8001640:	084b      	lsrs	r3, r1, #1
 8001642:	f503 03e1 	add.w	r3, r3, #7372800	; 0x708000
 8001646:	e7e6      	b.n	8001616 <UART_SetConfig+0x196>
 8001648:	40013800 	.word	0x40013800
 800164c:	080018f4 	.word	0x080018f4
 8001650:	40004400 	.word	0x40004400
 8001654:	40004800 	.word	0x40004800
 8001658:	40004c00 	.word	0x40004c00
 800165c:	40005000 	.word	0x40005000

08001660 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001662:	9d06      	ldr	r5, [sp, #24]
 8001664:	4604      	mov	r4, r0
 8001666:	4616      	mov	r6, r2
 8001668:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800166a:	6820      	ldr	r0, [r4, #0]
 800166c:	69c2      	ldr	r2, [r0, #28]
 800166e:	ea31 0302 	bics.w	r3, r1, r2
 8001672:	bf0c      	ite	eq
 8001674:	2201      	moveq	r2, #1
 8001676:	2200      	movne	r2, #0
 8001678:	42b2      	cmp	r2, r6
 800167a:	d001      	beq.n	8001680 <UART_WaitOnFlagUntilTimeout+0x20>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800167c:	2000      	movs	r0, #0
}
 800167e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001680:	1c6b      	adds	r3, r5, #1
 8001682:	d0f3      	beq.n	800166c <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001684:	b995      	cbnz	r5, 80016ac <UART_WaitOnFlagUntilTimeout+0x4c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001686:	6823      	ldr	r3, [r4, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800168e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001690:	689a      	ldr	r2, [r3, #8]
 8001692:	f022 0201 	bic.w	r2, r2, #1
 8001696:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8001698:	2320      	movs	r3, #32
 800169a:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800169e:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 80016a2:	2300      	movs	r3, #0
 80016a4:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80016a8:	2003      	movs	r0, #3
 80016aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80016ac:	f7ff fb08 	bl	8000cc0 <HAL_GetTick>
 80016b0:	1bc0      	subs	r0, r0, r7
 80016b2:	4285      	cmp	r5, r0
 80016b4:	d2d9      	bcs.n	800166a <UART_WaitOnFlagUntilTimeout+0xa>
 80016b6:	e7e6      	b.n	8001686 <UART_WaitOnFlagUntilTimeout+0x26>

080016b8 <UART_CheckIdleState>:
{
 80016b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80016ba:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016bc:	2100      	movs	r1, #0
 80016be:	66c1      	str	r1, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 80016c0:	f7ff fafe 	bl	8000cc0 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80016c4:	6823      	ldr	r3, [r4, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 80016ca:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80016cc:	d417      	bmi.n	80016fe <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80016ce:	6823      	ldr	r3, [r4, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	075b      	lsls	r3, r3, #29
 80016d4:	d50a      	bpl.n	80016ec <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80016d6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	2200      	movs	r2, #0
 80016de:	462b      	mov	r3, r5
 80016e0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80016e4:	4620      	mov	r0, r4
 80016e6:	f7ff ffbb 	bl	8001660 <UART_WaitOnFlagUntilTimeout>
 80016ea:	b9a0      	cbnz	r0, 8001716 <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 80016ec:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80016ee:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 80016f0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 80016f4:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 80016f8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 80016fc:	e00c      	b.n	8001718 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80016fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	460a      	mov	r2, r1
 8001706:	4603      	mov	r3, r0
 8001708:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800170c:	4620      	mov	r0, r4
 800170e:	f7ff ffa7 	bl	8001660 <UART_WaitOnFlagUntilTimeout>
 8001712:	2800      	cmp	r0, #0
 8001714:	d0db      	beq.n	80016ce <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001716:	2003      	movs	r0, #3
}
 8001718:	b003      	add	sp, #12
 800171a:	bd30      	pop	{r4, r5, pc}

0800171c <HAL_UART_Init>:
{
 800171c:	b510      	push	{r4, lr}
  if(huart == NULL)
 800171e:	4604      	mov	r4, r0
 8001720:	b328      	cbz	r0, 800176e <HAL_UART_Init+0x52>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001722:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001726:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800172a:	b90b      	cbnz	r3, 8001730 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 800172c:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
  __HAL_UART_DISABLE(huart);
 8001730:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001732:	2324      	movs	r3, #36	; 0x24
 8001734:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8001738:	6813      	ldr	r3, [r2, #0]
 800173a:	f023 0301 	bic.w	r3, r3, #1
 800173e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001740:	4620      	mov	r0, r4
 8001742:	f7ff fe9d 	bl	8001480 <UART_SetConfig>
 8001746:	2801      	cmp	r0, #1
 8001748:	d011      	beq.n	800176e <HAL_UART_Init+0x52>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800174a:	6823      	ldr	r3, [r4, #0]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001752:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001754:	689a      	ldr	r2, [r3, #8]
 8001756:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800175a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	f042 0201 	orr.w	r2, r2, #1
  return UART_CheckIdleState(huart);
 8001762:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001764:	601a      	str	r2, [r3, #0]
}
 8001766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return UART_CheckIdleState(huart);
 800176a:	f7ff bfa5 	b.w	80016b8 <UART_CheckIdleState>
}
 800176e:	2001      	movs	r0, #1
 8001770:	bd10      	pop	{r4, pc}

08001772 <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001772:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001774:	461f      	mov	r7, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8001776:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800177a:	2b20      	cmp	r3, #32
{
 800177c:	460d      	mov	r5, r1
 800177e:	4604      	mov	r4, r0
 8001780:	4611      	mov	r1, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8001782:	d14b      	bne.n	800181c <HAL_UART_Transmit+0xaa>
  {
    if((pData == NULL ) || (Size == 0U))
 8001784:	2d00      	cmp	r5, #0
 8001786:	d047      	beq.n	8001818 <HAL_UART_Transmit+0xa6>
 8001788:	2a00      	cmp	r2, #0
 800178a:	d045      	beq.n	8001818 <HAL_UART_Transmit+0xa6>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800178c:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8001790:	2b01      	cmp	r3, #1
 8001792:	d043      	beq.n	800181c <HAL_UART_Transmit+0xaa>
 8001794:	2301      	movs	r3, #1
 8001796:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800179a:	2300      	movs	r3, #0
 800179c:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800179e:	2321      	movs	r3, #33	; 0x21
 80017a0:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80017a4:	f7ff fa8c 	bl	8000cc0 <HAL_GetTick>
 80017a8:	4606      	mov	r6, r0

    huart->TxXferSize = Size;
 80017aa:	f8a4 1050 	strh.w	r1, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 80017ae:	f8a4 1052 	strh.w	r1, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 80017b2:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80017b6:	b292      	uxth	r2, r2
 80017b8:	b962      	cbnz	r2, 80017d4 <HAL_UART_Transmit+0x62>
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80017ba:	9700      	str	r7, [sp, #0]
 80017bc:	4633      	mov	r3, r6
 80017be:	2140      	movs	r1, #64	; 0x40
 80017c0:	4620      	mov	r0, r4
 80017c2:	f7ff ff4d 	bl	8001660 <UART_WaitOnFlagUntilTimeout>
 80017c6:	b998      	cbnz	r0, 80017f0 <HAL_UART_Transmit+0x7e>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80017c8:	2320      	movs	r3, #32
 80017ca:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80017ce:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

    return HAL_OK;
 80017d2:	e00e      	b.n	80017f2 <HAL_UART_Transmit+0x80>
      huart->TxXferCount--;
 80017d4:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80017d8:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 80017da:	3b01      	subs	r3, #1
 80017dc:	b29b      	uxth	r3, r3
 80017de:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80017e2:	2200      	movs	r2, #0
 80017e4:	4633      	mov	r3, r6
 80017e6:	2180      	movs	r1, #128	; 0x80
 80017e8:	4620      	mov	r0, r4
 80017ea:	f7ff ff39 	bl	8001660 <UART_WaitOnFlagUntilTimeout>
 80017ee:	b110      	cbz	r0, 80017f6 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 80017f0:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_BUSY;
  }
}
 80017f2:	b003      	add	sp, #12
 80017f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80017f6:	68a3      	ldr	r3, [r4, #8]
 80017f8:	6822      	ldr	r2, [r4, #0]
 80017fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017fe:	d107      	bne.n	8001810 <HAL_UART_Transmit+0x9e>
 8001800:	6923      	ldr	r3, [r4, #16]
 8001802:	b92b      	cbnz	r3, 8001810 <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001804:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800180c:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 800180e:	e7d0      	b.n	80017b2 <HAL_UART_Transmit+0x40>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001810:	782b      	ldrb	r3, [r5, #0]
 8001812:	8513      	strh	r3, [r2, #40]	; 0x28
 8001814:	3501      	adds	r5, #1
 8001816:	e7cc      	b.n	80017b2 <HAL_UART_Transmit+0x40>
      return  HAL_ERROR;
 8001818:	2001      	movs	r0, #1
 800181a:	e7ea      	b.n	80017f2 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 800181c:	2002      	movs	r0, #2
 800181e:	e7e8      	b.n	80017f2 <HAL_UART_Transmit+0x80>

08001820 <Reset_Handler>:
 8001820:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001822:	e003      	b.n	800182c <LoopCopyDataInit>

08001824 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001824:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <LoopForever+0x2>)
	ldr	r3, [r3, r1]
 8001826:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001828:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800182a:	3104      	adds	r1, #4

0800182c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800182c:	480a      	ldr	r0, [pc, #40]	; (8001858 <LoopForever+0x6>)
	ldr	r3, =_edata
 800182e:	4b0b      	ldr	r3, [pc, #44]	; (800185c <LoopForever+0xa>)
	adds	r2, r0, r1
 8001830:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001832:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001834:	d3f6      	bcc.n	8001824 <CopyDataInit>
	ldr	r2, =_sbss
 8001836:	4a0a      	ldr	r2, [pc, #40]	; (8001860 <LoopForever+0xe>)
	b	LoopFillZerobss
 8001838:	e002      	b.n	8001840 <LoopFillZerobss>

0800183a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs r3, #0
 800183a:	2300      	movs	r3, #0
 	str  r3, [r2]
 800183c:	6013      	str	r3, [r2, #0]
	adds r2, r2, #4
 800183e:	3204      	adds	r2, #4

08001840 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001840:	4b08      	ldr	r3, [pc, #32]	; (8001864 <LoopForever+0x12>)
	cmp	r2, r3
 8001842:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001844:	d3f9      	bcc.n	800183a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001846:	f3af 8000 	nop.w
/* Call static constructors */
    bl __libc_init_array
 800184a:	f000 f80f 	bl	800186c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800184e:	f7fe fd95 	bl	800037c <main>

08001852 <LoopForever>:



LoopForever:
    b LoopForever
 8001852:	e7fe      	b.n	8001852 <LoopForever>
 8001854:	08001924 	.word	0x08001924
 8001858:	20000000 	.word	0x20000000
 800185c:	20000458 	.word	0x20000458
 8001860:	20000458 	.word	0x20000458
 8001864:	200004f4 	.word	0x200004f4

08001868 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001868:	e7fe      	b.n	8001868 <BusFault_Handler>
 800186a:	0000      	movs	r0, r0

0800186c <__libc_init_array>:
 800186c:	b570      	push	{r4, r5, r6, lr}
 800186e:	4e0d      	ldr	r6, [pc, #52]	; (80018a4 <__libc_init_array+0x38>)
 8001870:	4c0d      	ldr	r4, [pc, #52]	; (80018a8 <__libc_init_array+0x3c>)
 8001872:	1ba4      	subs	r4, r4, r6
 8001874:	10a4      	asrs	r4, r4, #2
 8001876:	2500      	movs	r5, #0
 8001878:	42a5      	cmp	r5, r4
 800187a:	d109      	bne.n	8001890 <__libc_init_array+0x24>
 800187c:	4e0b      	ldr	r6, [pc, #44]	; (80018ac <__libc_init_array+0x40>)
 800187e:	4c0c      	ldr	r4, [pc, #48]	; (80018b0 <__libc_init_array+0x44>)
 8001880:	f000 f824 	bl	80018cc <_init>
 8001884:	1ba4      	subs	r4, r4, r6
 8001886:	10a4      	asrs	r4, r4, #2
 8001888:	2500      	movs	r5, #0
 800188a:	42a5      	cmp	r5, r4
 800188c:	d105      	bne.n	800189a <__libc_init_array+0x2e>
 800188e:	bd70      	pop	{r4, r5, r6, pc}
 8001890:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001894:	4798      	blx	r3
 8001896:	3501      	adds	r5, #1
 8001898:	e7ee      	b.n	8001878 <__libc_init_array+0xc>
 800189a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800189e:	4798      	blx	r3
 80018a0:	3501      	adds	r5, #1
 80018a2:	e7f2      	b.n	800188a <__libc_init_array+0x1e>
 80018a4:	0800191c 	.word	0x0800191c
 80018a8:	0800191c 	.word	0x0800191c
 80018ac:	0800191c 	.word	0x0800191c
 80018b0:	08001920 	.word	0x08001920

080018b4 <memcpy>:
 80018b4:	b510      	push	{r4, lr}
 80018b6:	1e43      	subs	r3, r0, #1
 80018b8:	440a      	add	r2, r1
 80018ba:	4291      	cmp	r1, r2
 80018bc:	d100      	bne.n	80018c0 <memcpy+0xc>
 80018be:	bd10      	pop	{r4, pc}
 80018c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80018c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80018c8:	e7f7      	b.n	80018ba <memcpy+0x6>
 80018ca:	0000      	movs	r0, r0

080018cc <_init>:
 80018cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018ce:	bf00      	nop
 80018d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018d2:	bc08      	pop	{r3}
 80018d4:	469e      	mov	lr, r3
 80018d6:	4770      	bx	lr

080018d8 <_fini>:
 80018d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018da:	bf00      	nop
 80018dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018de:	bc08      	pop	{r3}
 80018e0:	469e      	mov	lr, r3
 80018e2:	4770      	bx	lr
