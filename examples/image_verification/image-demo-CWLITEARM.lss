
image-demo-CWLITEARM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001840  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080019d0  080019d0  000119d0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a38  08001a38  000204b8  2**0
                  CONTENTS
  4 .ARM          00000000  08001a38  08001a38  000204b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a38  08001a38  000204b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a38  08001a38  00011a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a3c  08001a3c  00011a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004b8  20000000  08001a40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  200004b8  08001ef8  000204b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  2000055c  08001ef8  0002055c  2**0
                  ALLOC
 11 .ARM.attributes 0000002c  00000000  00000000  000204b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000564e  00000000  00000000  000204e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000be3  00000000  00000000  00025b32  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001a5b  00000000  00000000  00026715  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001a8  00000000  00000000  00028170  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000370  00000000  00000000  00028318  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000013ec  00000000  00000000  00028688  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000018c0  00000000  00000000  00029a74  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007f  00000000  00000000  0002b334  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000087c  00000000  00000000  0002b3b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000144  00000000  00000000  0002bc30  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000077  00000000  00000000  0002bd74  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200004b8 	.word	0x200004b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080019b8 	.word	0x080019b8

080001b4 <frame_dummy>:
 80001b4:	4b0c      	ldr	r3, [pc, #48]	; (80001e8 <frame_dummy+0x34>)
 80001b6:	b143      	cbz	r3, 80001ca <frame_dummy+0x16>
 80001b8:	480c      	ldr	r0, [pc, #48]	; (80001ec <frame_dummy+0x38>)
 80001ba:	490d      	ldr	r1, [pc, #52]	; (80001f0 <frame_dummy+0x3c>)
 80001bc:	b510      	push	{r4, lr}
 80001be:	f3af 8000 	nop.w
 80001c2:	480c      	ldr	r0, [pc, #48]	; (80001f4 <frame_dummy+0x40>)
 80001c4:	6803      	ldr	r3, [r0, #0]
 80001c6:	b923      	cbnz	r3, 80001d2 <frame_dummy+0x1e>
 80001c8:	bd10      	pop	{r4, pc}
 80001ca:	480a      	ldr	r0, [pc, #40]	; (80001f4 <frame_dummy+0x40>)
 80001cc:	6803      	ldr	r3, [r0, #0]
 80001ce:	b933      	cbnz	r3, 80001de <frame_dummy+0x2a>
 80001d0:	4770      	bx	lr
 80001d2:	4b09      	ldr	r3, [pc, #36]	; (80001f8 <frame_dummy+0x44>)
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d0f7      	beq.n	80001c8 <frame_dummy+0x14>
 80001d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80001dc:	4718      	bx	r3
 80001de:	4b06      	ldr	r3, [pc, #24]	; (80001f8 <frame_dummy+0x44>)
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d0f5      	beq.n	80001d0 <frame_dummy+0x1c>
 80001e4:	4718      	bx	r3
 80001e6:	bf00      	nop
 80001e8:	00000000 	.word	0x00000000
 80001ec:	080019b8 	.word	0x080019b8
 80001f0:	200004bc 	.word	0x200004bc
 80001f4:	200004b8 	.word	0x200004b8
 80001f8:	00000000 	.word	0x00000000
 80001fc:	00000000 	.word	0x00000000

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <puts>:

int snprintf(char *, size_t, char *, ...);

/* Avoid stdio.h as not sure what platform provides */
int puts(const char * s)
{
 80002a0:	b538      	push	{r3, r4, r5, lr}
 80002a2:	1e45      	subs	r5, r0, #1
    while(*s){
 80002a4:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 80002a8:	b924      	cbnz	r4, 80002b4 <puts+0x14>
        putch(*s++);
    }
    putch('\n');
 80002aa:	200a      	movs	r0, #10
 80002ac:	f000 f92c 	bl	8000508 <putch>
    
    return 0;
}
 80002b0:	4620      	mov	r0, r4
 80002b2:	bd38      	pop	{r3, r4, r5, pc}
        putch(*s++);
 80002b4:	4620      	mov	r0, r4
 80002b6:	f000 f927 	bl	8000508 <putch>
 80002ba:	e7f3      	b.n	80002a4 <puts+0x4>

080002bc <some_hash_function>:
/**
 This would be a SHA256 hash in real bootloaders, here a dumb 32-bit thingy is
 done instead to simplify the example. (NOTE: THIS FUNCTION IS NOT A HASH! IT'S FOR DEMO!)
 */
uint32_t some_hash_function(uint8_t * image, uint32_t data_len)
{
 80002bc:	4603      	mov	r3, r0
 80002be:	4401      	add	r1, r0
    uint32_t temp;
    uint32_t hash = 0;
 80002c0:	2000      	movs	r0, #0
    uint32_t i = 0;
    
    while(data_len){
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d100      	bne.n	80002c8 <some_hash_function+0xc>
        data_len--;
    }

    
    return hash;
}
 80002c6:	4770      	bx	lr
        hash ^= image[i++];
 80002c8:	f813 2b01 	ldrb.w	r2, [r3], #1
        hash ^= temp;
 80002cc:	ea82 6030 	eor.w	r0, r2, r0, ror #24
 80002d0:	e7f7      	b.n	80002c2 <some_hash_function+0x6>
 80002d2:	0000      	movs	r0, r0

080002d4 <some_crypto_function>:
/**
 This would be a pub-key enc/dec function such as RSA. Here a dumb 32-bit thingy is
 done instead to simplify the example. (NOTE: THIS FUNCTION IS NOT PUBLIC KEY CRYPTO! IT'S FOR DEMO!)
*/
uint32_t some_crypto_function(uint32_t user_signature, uint8_t manf_public_key[])
{
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	b0c3      	sub	sp, #268	; 0x10c
 80002d8:	ad01      	add	r5, sp, #4
    
    uint32_t temp;
    uint32_t hash = 0;    
    
    for(uint32_t i = 0; i < 4; i++){
 80002da:	2300      	movs	r3, #0
{
 80002dc:	6028      	str	r0, [r5, #0]
    uint32_t hash = 0;    
 80002de:	461c      	mov	r4, r3
        temp = (hash >> 24);
        hash = hash << 8;
        hash ^= manf_public_key[i];
        hash ^= *((uint8_t*)(&user_signature) + i);
        hash ^= temp;
 80002e0:	5cca      	ldrb	r2, [r1, r3]
 80002e2:	5ce8      	ldrb	r0, [r5, r3]
    for(uint32_t i = 0; i < 4; i++){
 80002e4:	3301      	adds	r3, #1
        hash ^= temp;
 80002e6:	4042      	eors	r2, r0
    for(uint32_t i = 0; i < 4; i++){
 80002e8:	2b04      	cmp	r3, #4
        hash ^= temp;
 80002ea:	ea82 6434 	eor.w	r4, r2, r4, ror #24
    for(uint32_t i = 0; i < 4; i++){
 80002ee:	d1f7      	bne.n	80002e0 <some_crypto_function+0xc>
    }
    
    char buf[256];
    snprintf(buf, 255, "Hash: %#lX\n", hash);
 80002f0:	4623      	mov	r3, r4
 80002f2:	4a05      	ldr	r2, [pc, #20]	; (8000308 <some_crypto_function+0x34>)
 80002f4:	21ff      	movs	r1, #255	; 0xff
 80002f6:	a802      	add	r0, sp, #8
 80002f8:	f000 ff30 	bl	800115c <sniprintf>
    puts(buf);
 80002fc:	a802      	add	r0, sp, #8
 80002fe:	f7ff ffcf 	bl	80002a0 <puts>
    return hash;
}
 8000302:	4620      	mov	r0, r4
 8000304:	b043      	add	sp, #268	; 0x10c
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	080019e3 	.word	0x080019e3

0800030c <rtos_init>:

/** RTOS init function */
void rtos_init(void)
{
    puts("RTOS Booted!\n");
 800030c:	4801      	ldr	r0, [pc, #4]	; (8000314 <rtos_init+0x8>)
 800030e:	f7ff bfc7 	b.w	80002a0 <puts>
 8000312:	bf00      	nop
 8000314:	080019ef 	.word	0x080019ef

08000318 <boot_new_image>:

/**
 Firmware update function, called once we know all images are OK.
 */
 void boot_new_image(image_t * image)
 {
 8000318:	b510      	push	{r4, lr}
 800031a:	4604      	mov	r4, r0
     puts("Booting image ");
 800031c:	4805      	ldr	r0, [pc, #20]	; (8000334 <boot_new_image+0x1c>)
 800031e:	f7ff ffbf 	bl	80002a0 <puts>
     puts(image->image_name);
 8000322:	4620      	mov	r0, r4
 8000324:	f7ff ffbc 	bl	80002a0 <puts>
     puts("\n");
 8000328:	4803      	ldr	r0, [pc, #12]	; (8000338 <boot_new_image+0x20>)
     
     //Here would go code to actually do the real stuff
 }
 800032a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     puts("\n");
 800032e:	f7ff bfb7 	b.w	80002a0 <puts>
 8000332:	bf00      	nop
 8000334:	080019d4 	.word	0x080019d4
 8000338:	080019fb 	.word	0x080019fb

0800033c <validate_sigature>:

/**
 Original validation function which is vulnerable to FI.
 */
int validate_sigature(uint32_t short_hash, uint32_t signature, uint8_t * pub_key)
{
 800033c:	b510      	push	{r4, lr}
 800033e:	460c      	mov	r4, r1
    if (some_crypto_function(short_hash, pub_key) == signature){
 8000340:	4611      	mov	r1, r2
 8000342:	f7ff ffc7 	bl	80002d4 <some_crypto_function>
        return 1;
    } else {
        return 0;
    }
}
 8000346:	1b03      	subs	r3, r0, r4
 8000348:	4258      	negs	r0, r3
 800034a:	4158      	adcs	r0, r3
 800034c:	bd10      	pop	{r4, pc}
 800034e:	0000      	movs	r0, r0

08000350 <checkfwupdate_original>:

/**
 Original function which is vulnerable to FI.
 */
int checkfwupdate_original(void)
{
 8000350:	b510      	push	{r4, lr}
    //Flag indicates new firmware file present
    if(bootloader_flag == FLAG_PENDING_UPDATE){
 8000352:	4c0e      	ldr	r4, [pc, #56]	; (800038c <checkfwupdate_original+0x3c>)
 8000354:	4b0e      	ldr	r3, [pc, #56]	; (8000390 <checkfwupdate_original+0x40>)
 8000356:	6822      	ldr	r2, [r4, #0]
 8000358:	429a      	cmp	r2, r3
 800035a:	d111      	bne.n	8000380 <checkfwupdate_original+0x30>
        
        //Check signature matches proposed hashes
        //glitch vulnerability here
        trigger_high();
 800035c:	f000 f8c6 	bl	80004ec <trigger_high>
        if (validate_sigature(some_hash_function(image.image_data, image.image_data_len),
 8000360:	f8d4 144c 	ldr.w	r1, [r4, #1100]	; 0x44c
 8000364:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8000368:	f7ff ffa8 	bl	80002bc <some_hash_function>
 800036c:	1d22      	adds	r2, r4, #4
 800036e:	f8d4 1450 	ldr.w	r1, [r4, #1104]	; 0x450
 8000372:	f7ff ffe3 	bl	800033c <validate_sigature>
 8000376:	b138      	cbz	r0, 8000388 <checkfwupdate_original+0x38>
                              image.signature, manf_public_key)) {
            
            boot_new_image(&image);
 8000378:	f104 000c 	add.w	r0, r4, #12
 800037c:	f7ff ffcc 	bl	8000318 <boot_new_image>
        } else {
            //signature failed
            bootloader_flag = 0;
        }
    }
    trigger_low();
 8000380:	f000 f8bb 	bl	80004fa <trigger_low>
    
    return 0;
}
 8000384:	2000      	movs	r0, #0
 8000386:	bd10      	pop	{r4, pc}
            bootloader_flag = 0;
 8000388:	6020      	str	r0, [r4, #0]
 800038a:	e7f9      	b.n	8000380 <checkfwupdate_original+0x30>
 800038c:	20000000 	.word	0x20000000
 8000390:	feedb347 	.word	0xfeedb347

08000394 <main>:
{
 8000394:	b508      	push	{r3, lr}
    platform_init();
 8000396:	f000 f809 	bl	80003ac <platform_init>
    init_uart();
 800039a:	f000 f847 	bl	800042c <init_uart>
    trigger_setup();
 800039e:	f000 f881 	bl	80004a4 <trigger_setup>
    checkfwupdate_original();
 80003a2:	f7ff ffd5 	bl	8000350 <checkfwupdate_original>
    rtos_init();
 80003a6:	f7ff ffb1 	bl	800030c <rtos_init>
 80003aa:	e7fe      	b.n	80003aa <main+0x16>

080003ac <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 80003ac:	b570      	push	{r4, r5, r6, lr}
 80003ae:	b096      	sub	sp, #88	; 0x58
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
  #else
     RCC_OscInitTypeDef RCC_OscInitStruct;
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 80003b0:	2400      	movs	r4, #0
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
 80003b2:	2603      	movs	r6, #3
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 80003b4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80003b8:	a80c      	add	r0, sp, #48	; 0x30

     RCC_ClkInitTypeDef RCC_ClkInitStruct;
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 80003ba:	2501      	movs	r5, #1
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 80003bc:	930d      	str	r3, [sp, #52]	; 0x34
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 80003be:	9410      	str	r4, [sp, #64]	; 0x40
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 80003c0:	9414      	str	r4, [sp, #80]	; 0x50
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
 80003c2:	960c      	str	r6, [sp, #48]	; 0x30
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80003c4:	f000 f8b8 	bl	8000538 <HAL_RCC_OscConfig>
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80003c8:	230f      	movs	r3, #15
     RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
     uint32_t flash_latency = 0;
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 80003ca:	4621      	mov	r1, r4
 80003cc:	a802      	add	r0, sp, #8
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80003ce:	9302      	str	r3, [sp, #8]
     RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 80003d0:	9404      	str	r4, [sp, #16]
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003d2:	9405      	str	r4, [sp, #20]
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d4:	9406      	str	r4, [sp, #24]
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 80003d6:	9503      	str	r5, [sp, #12]
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 80003d8:	f000 fb18 	bl	8000a0c <HAL_RCC_ClockConfig>




#if (PLATFORM==CWLITEARM)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003dc:	4b11      	ldr	r3, [pc, #68]	; (8000424 <platform_init+0x78>)
 80003de:	695a      	ldr	r2, [r3, #20]
 80003e0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80003e4:	615a      	str	r2, [r3, #20]
 80003e6:	695b      	ldr	r3, [r3, #20]
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
  GpioInit.Pull      = GPIO_NOPULL;
 80003e8:	9409      	str	r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOC, &GpioInit);
 80003ee:	4c0e      	ldr	r4, [pc, #56]	; (8000428 <platform_init+0x7c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003f0:	9301      	str	r3, [sp, #4]
 80003f2:	9b01      	ldr	r3, [sp, #4]
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 80003f4:	9508      	str	r5, [sp, #32]
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
 80003f6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 80003fa:	a907      	add	r1, sp, #28
 80003fc:	4620      	mov	r0, r4
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
 80003fe:	9307      	str	r3, [sp, #28]
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000400:	960a      	str	r6, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8000402:	f000 fba9 	bl	8000b58 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8000406:	462a      	mov	r2, r5
 8000408:	4620      	mov	r0, r4
 800040a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800040e:	f000 fc65 	bl	8000cdc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8000412:	462a      	mov	r2, r5
 8000414:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000418:	4620      	mov	r0, r4
 800041a:	f000 fc5f 	bl	8000cdc <HAL_GPIO_WritePin>
#endif
}
 800041e:	b016      	add	sp, #88	; 0x58
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	bf00      	nop
 8000424:	40021000 	.word	0x40021000
 8000428:	48000800 	.word	0x48000800

0800042c <init_uart>:

void init_uart(void)
{
 800042c:	b510      	push	{r4, lr}
 800042e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
 8000430:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000434:	9303      	str	r3, [sp, #12]
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 8000436:	2302      	movs	r3, #2
 8000438:	9304      	str	r3, [sp, #16]
  GpioInit.Pull      = GPIO_PULLUP;
 800043a:	2301      	movs	r3, #1
 800043c:	9305      	str	r3, [sp, #20]
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 800043e:	2303      	movs	r3, #3
  GpioInit.Alternate = GPIO_AF7_USART1;
  __GPIOA_CLK_ENABLE();
 8000440:	4c15      	ldr	r4, [pc, #84]	; (8000498 <init_uart+0x6c>)
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000442:	9306      	str	r3, [sp, #24]
  GpioInit.Alternate = GPIO_AF7_USART1;
 8000444:	2307      	movs	r3, #7
 8000446:	9307      	str	r3, [sp, #28]
  __GPIOA_CLK_ENABLE();
 8000448:	6963      	ldr	r3, [r4, #20]
 800044a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800044e:	6163      	str	r3, [r4, #20]
 8000450:	6963      	ldr	r3, [r4, #20]
 8000452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000456:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8000458:	a903      	add	r1, sp, #12
 800045a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __GPIOA_CLK_ENABLE();
 800045e:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8000460:	f000 fb7a 	bl	8000b58 <HAL_GPIO_Init>

  UartHandle.Instance        = USART1;
 8000464:	480d      	ldr	r0, [pc, #52]	; (800049c <init_uart+0x70>)
  UartHandle.Init.BaudRate   = 38400;
 8000466:	4b0e      	ldr	r3, [pc, #56]	; (80004a0 <init_uart+0x74>)
 8000468:	f44f 4e16 	mov.w	lr, #38400	; 0x9600
 800046c:	e880 4008 	stmia.w	r0, {r3, lr}
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000470:	2300      	movs	r3, #0
 8000472:	6083      	str	r3, [r0, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000474:	60c3      	str	r3, [r0, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8000476:	6103      	str	r3, [r0, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000478:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 800047a:	230c      	movs	r3, #12
 800047c:	6143      	str	r3, [r0, #20]
  __USART1_CLK_ENABLE();
 800047e:	69a3      	ldr	r3, [r4, #24]
 8000480:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000484:	61a3      	str	r3, [r4, #24]
 8000486:	69a3      	ldr	r3, [r4, #24]
 8000488:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800048c:	9302      	str	r3, [sp, #8]
 800048e:	9b02      	ldr	r3, [sp, #8]
  HAL_UART_Init(&UartHandle);
 8000490:	f000 fd78 	bl	8000f84 <HAL_UART_Init>
}
 8000494:	b008      	add	sp, #32
 8000496:	bd10      	pop	{r4, pc}
 8000498:	40021000 	.word	0x40021000
 800049c:	200004e8 	.word	0x200004e8
 80004a0:	40013800 	.word	0x40013800

080004a4 <trigger_setup>:

void trigger_setup(void)
{
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a4:	4b10      	ldr	r3, [pc, #64]	; (80004e8 <trigger_setup+0x44>)
{
 80004a6:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a8:	695a      	ldr	r2, [r3, #20]
 80004aa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80004ae:	615a      	str	r2, [r3, #20]
 80004b0:	695b      	ldr	r3, [r3, #20]
{
 80004b2:	b087      	sub	sp, #28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004b8:	9300      	str	r3, [sp, #0]
 80004ba:	9b00      	ldr	r3, [sp, #0]

  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_12;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 80004bc:	2301      	movs	r3, #1
  GpioInit.Pin       = GPIO_PIN_12;
 80004be:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 80004c2:	9302      	str	r3, [sp, #8]
  GpioInit.Pull      = GPIO_NOPULL;
 80004c4:	2500      	movs	r5, #0
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80004c6:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GpioInit);
 80004c8:	a901      	add	r1, sp, #4
 80004ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80004ce:	9304      	str	r3, [sp, #16]
  GpioInit.Pin       = GPIO_PIN_12;
 80004d0:	9401      	str	r4, [sp, #4]
  GpioInit.Pull      = GPIO_NOPULL;
 80004d2:	9503      	str	r5, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 80004d4:	f000 fb40 	bl	8000b58 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 80004d8:	462a      	mov	r2, r5
 80004da:	4621      	mov	r1, r4
 80004dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e0:	f000 fbfc 	bl	8000cdc <HAL_GPIO_WritePin>
}
 80004e4:	b007      	add	sp, #28
 80004e6:	bd30      	pop	{r4, r5, pc}
 80004e8:	40021000 	.word	0x40021000

080004ec <trigger_high>:

void trigger_high(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 80004ec:	2201      	movs	r2, #1
 80004ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f6:	f000 bbf1 	b.w	8000cdc <HAL_GPIO_WritePin>

080004fa <trigger_low>:
}

void trigger_low(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 80004fa:	2200      	movs	r2, #0
 80004fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000500:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000504:	f000 bbea 	b.w	8000cdc <HAL_GPIO_WritePin>

08000508 <putch>:
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK);
  return d;
}

void putch(char c)
{
 8000508:	b507      	push	{r0, r1, r2, lr}
  uint8_t d  = c;
 800050a:	a902      	add	r1, sp, #8
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 800050c:	f241 3388 	movw	r3, #5000	; 0x1388
  uint8_t d  = c;
 8000510:	f801 0d01 	strb.w	r0, [r1, #-1]!
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8000514:	2201      	movs	r2, #1
 8000516:	4803      	ldr	r0, [pc, #12]	; (8000524 <putch+0x1c>)
 8000518:	f000 fd5f 	bl	8000fda <HAL_UART_Transmit>
}
 800051c:	b003      	add	sp, #12
 800051e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000522:	bf00      	nop
 8000524:	200004e8 	.word	0x200004e8

08000528 <HAL_GetTick>:
	hal_sys_tick = 0;
	return HAL_OK;
}
uint32_t HAL_GetTick(void)
{
	return hal_sys_tick++;
 8000528:	4b02      	ldr	r3, [pc, #8]	; (8000534 <HAL_GetTick+0xc>)
 800052a:	6818      	ldr	r0, [r3, #0]
 800052c:	1c42      	adds	r2, r0, #1
 800052e:	601a      	str	r2, [r3, #0]
}
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	200004d4 	.word	0x200004d4

08000538 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000538:	6803      	ldr	r3, [r0, #0]
{
 800053a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800053e:	07d9      	lsls	r1, r3, #31
{
 8000540:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000542:	d411      	bmi.n	8000568 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000544:	6823      	ldr	r3, [r4, #0]
 8000546:	079a      	lsls	r2, r3, #30
 8000548:	f100 8086 	bmi.w	8000658 <HAL_RCC_OscConfig+0x120>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800054c:	6823      	ldr	r3, [r4, #0]
 800054e:	071e      	lsls	r6, r3, #28
 8000550:	f100 80f4 	bmi.w	800073c <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000554:	6823      	ldr	r3, [r4, #0]
 8000556:	075d      	lsls	r5, r3, #29
 8000558:	f100 813b 	bmi.w	80007d2 <HAL_RCC_OscConfig+0x29a>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800055c:	69e2      	ldr	r2, [r4, #28]
 800055e:	2a00      	cmp	r2, #0
 8000560:	f040 81cf 	bne.w	8000902 <HAL_RCC_OscConfig+0x3ca>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000564:	2000      	movs	r0, #0
 8000566:	e021      	b.n	80005ac <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000568:	49b7      	ldr	r1, [pc, #732]	; (8000848 <HAL_RCC_OscConfig+0x310>)
 800056a:	684b      	ldr	r3, [r1, #4]
 800056c:	f003 030c 	and.w	r3, r3, #12
 8000570:	2b04      	cmp	r3, #4
 8000572:	d007      	beq.n	8000584 <HAL_RCC_OscConfig+0x4c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000574:	684b      	ldr	r3, [r1, #4]
 8000576:	f003 030c 	and.w	r3, r3, #12
 800057a:	2b08      	cmp	r3, #8
 800057c:	d119      	bne.n	80005b2 <HAL_RCC_OscConfig+0x7a>
 800057e:	684b      	ldr	r3, [r1, #4]
 8000580:	03db      	lsls	r3, r3, #15
 8000582:	d516      	bpl.n	80005b2 <HAL_RCC_OscConfig+0x7a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000584:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000588:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800058c:	6809      	ldr	r1, [r1, #0]
 800058e:	fa93 f3a3 	rbit	r3, r3
 8000592:	fab3 f383 	clz	r3, r3
 8000596:	f003 031f 	and.w	r3, r3, #31
 800059a:	2201      	movs	r2, #1
 800059c:	fa02 f303 	lsl.w	r3, r2, r3
 80005a0:	420b      	tst	r3, r1
 80005a2:	d0cf      	beq.n	8000544 <HAL_RCC_OscConfig+0xc>
 80005a4:	6863      	ldr	r3, [r4, #4]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d1cc      	bne.n	8000544 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80005aa:	2001      	movs	r0, #1
}
 80005ac:	b003      	add	sp, #12
 80005ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005b2:	6862      	ldr	r2, [r4, #4]
 80005b4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80005b8:	d124      	bne.n	8000604 <HAL_RCC_OscConfig+0xcc>
 80005ba:	680b      	ldr	r3, [r1, #0]
 80005bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005c0:	600b      	str	r3, [r1, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80005c2:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80005c4:	68a0      	ldr	r0, [r4, #8]
 80005c6:	f023 030f 	bic.w	r3, r3, #15
 80005ca:	4303      	orrs	r3, r0
 80005cc:	62cb      	str	r3, [r1, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80005ce:	b34a      	cbz	r2, 8000624 <HAL_RCC_OscConfig+0xec>
        tickstart = HAL_GetTick();
 80005d0:	f7ff ffaa 	bl	8000528 <HAL_GetTick>
 80005d4:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 80005d8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005da:	2601      	movs	r6, #1
 80005dc:	fa95 f3a5 	rbit	r3, r5
 80005e0:	680a      	ldr	r2, [r1, #0]
 80005e2:	fa95 f3a5 	rbit	r3, r5
 80005e6:	fab3 f383 	clz	r3, r3
 80005ea:	f003 031f 	and.w	r3, r3, #31
 80005ee:	fa06 f303 	lsl.w	r3, r6, r3
 80005f2:	4213      	tst	r3, r2
 80005f4:	d1a6      	bne.n	8000544 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005f6:	f7ff ff97 	bl	8000528 <HAL_GetTick>
 80005fa:	1bc0      	subs	r0, r0, r7
 80005fc:	2864      	cmp	r0, #100	; 0x64
 80005fe:	d9ed      	bls.n	80005dc <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
 8000600:	2003      	movs	r0, #3
 8000602:	e7d3      	b.n	80005ac <HAL_RCC_OscConfig+0x74>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000604:	680b      	ldr	r3, [r1, #0]
 8000606:	b932      	cbnz	r2, 8000616 <HAL_RCC_OscConfig+0xde>
 8000608:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800060c:	600b      	str	r3, [r1, #0]
 800060e:	680b      	ldr	r3, [r1, #0]
 8000610:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000614:	e7d4      	b.n	80005c0 <HAL_RCC_OscConfig+0x88>
 8000616:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800061a:	d1f5      	bne.n	8000608 <HAL_RCC_OscConfig+0xd0>
 800061c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000620:	600b      	str	r3, [r1, #0]
 8000622:	e7ca      	b.n	80005ba <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8000624:	f7ff ff80 	bl	8000528 <HAL_GetTick>
 8000628:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 800062c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800062e:	2601      	movs	r6, #1
 8000630:	fa95 f3a5 	rbit	r3, r5
 8000634:	680a      	ldr	r2, [r1, #0]
 8000636:	fa95 f3a5 	rbit	r3, r5
 800063a:	fab3 f383 	clz	r3, r3
 800063e:	f003 031f 	and.w	r3, r3, #31
 8000642:	fa06 f303 	lsl.w	r3, r6, r3
 8000646:	4213      	tst	r3, r2
 8000648:	f43f af7c 	beq.w	8000544 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800064c:	f7ff ff6c 	bl	8000528 <HAL_GetTick>
 8000650:	1bc0      	subs	r0, r0, r7
 8000652:	2864      	cmp	r0, #100	; 0x64
 8000654:	d9ec      	bls.n	8000630 <HAL_RCC_OscConfig+0xf8>
 8000656:	e7d3      	b.n	8000600 <HAL_RCC_OscConfig+0xc8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000658:	497b      	ldr	r1, [pc, #492]	; (8000848 <HAL_RCC_OscConfig+0x310>)
 800065a:	684b      	ldr	r3, [r1, #4]
 800065c:	f013 0f0c 	tst.w	r3, #12
 8000660:	d007      	beq.n	8000672 <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000662:	684b      	ldr	r3, [r1, #4]
 8000664:	f003 030c 	and.w	r3, r3, #12
 8000668:	2b08      	cmp	r3, #8
 800066a:	d121      	bne.n	80006b0 <HAL_RCC_OscConfig+0x178>
 800066c:	684b      	ldr	r3, [r1, #4]
 800066e:	03df      	lsls	r7, r3, #15
 8000670:	d41e      	bmi.n	80006b0 <HAL_RCC_OscConfig+0x178>
 8000672:	2302      	movs	r3, #2
 8000674:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000678:	6808      	ldr	r0, [r1, #0]
 800067a:	fa93 f3a3 	rbit	r3, r3
 800067e:	fab3 f383 	clz	r3, r3
 8000682:	f003 031f 	and.w	r3, r3, #31
 8000686:	2201      	movs	r2, #1
 8000688:	fa02 f303 	lsl.w	r3, r2, r3
 800068c:	4203      	tst	r3, r0
 800068e:	d002      	beq.n	8000696 <HAL_RCC_OscConfig+0x15e>
 8000690:	6923      	ldr	r3, [r4, #16]
 8000692:	4293      	cmp	r3, r2
 8000694:	d189      	bne.n	80005aa <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000696:	6808      	ldr	r0, [r1, #0]
 8000698:	23f8      	movs	r3, #248	; 0xf8
 800069a:	fa93 f3a3 	rbit	r3, r3
 800069e:	fab3 f283 	clz	r2, r3
 80006a2:	6963      	ldr	r3, [r4, #20]
 80006a4:	4093      	lsls	r3, r2
 80006a6:	f020 02f8 	bic.w	r2, r0, #248	; 0xf8
 80006aa:	4313      	orrs	r3, r2
 80006ac:	600b      	str	r3, [r1, #0]
 80006ae:	e74d      	b.n	800054c <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80006b0:	6922      	ldr	r2, [r4, #16]
 80006b2:	2501      	movs	r5, #1
 80006b4:	b302      	cbz	r2, 80006f8 <HAL_RCC_OscConfig+0x1c0>
 80006b6:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 80006ba:	fab3 f383 	clz	r3, r3
 80006be:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80006c2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80006c6:	009b      	lsls	r3, r3, #2
 80006c8:	2602      	movs	r6, #2
 80006ca:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 80006cc:	f7ff ff2c 	bl	8000528 <HAL_GetTick>
 80006d0:	4607      	mov	r7, r0
 80006d2:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80006d6:	680a      	ldr	r2, [r1, #0]
 80006d8:	fa96 f3a6 	rbit	r3, r6
 80006dc:	fab3 f383 	clz	r3, r3
 80006e0:	f003 031f 	and.w	r3, r3, #31
 80006e4:	fa05 f303 	lsl.w	r3, r5, r3
 80006e8:	4213      	tst	r3, r2
 80006ea:	d1d4      	bne.n	8000696 <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006ec:	f7ff ff1c 	bl	8000528 <HAL_GetTick>
 80006f0:	1bc0      	subs	r0, r0, r7
 80006f2:	2802      	cmp	r0, #2
 80006f4:	d9ed      	bls.n	80006d2 <HAL_RCC_OscConfig+0x19a>
 80006f6:	e783      	b.n	8000600 <HAL_RCC_OscConfig+0xc8>
 80006f8:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 80006fc:	fab3 f383 	clz	r3, r3
 8000700:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000704:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	2602      	movs	r6, #2
 800070c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800070e:	f7ff ff0b 	bl	8000528 <HAL_GetTick>
 8000712:	4607      	mov	r7, r0
 8000714:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000718:	680a      	ldr	r2, [r1, #0]
 800071a:	fa96 f3a6 	rbit	r3, r6
 800071e:	fab3 f383 	clz	r3, r3
 8000722:	f003 031f 	and.w	r3, r3, #31
 8000726:	fa05 f303 	lsl.w	r3, r5, r3
 800072a:	4213      	tst	r3, r2
 800072c:	f43f af0e 	beq.w	800054c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000730:	f7ff fefa 	bl	8000528 <HAL_GetTick>
 8000734:	1bc0      	subs	r0, r0, r7
 8000736:	2802      	cmp	r0, #2
 8000738:	d9ec      	bls.n	8000714 <HAL_RCC_OscConfig+0x1dc>
 800073a:	e761      	b.n	8000600 <HAL_RCC_OscConfig+0xc8>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800073c:	69a2      	ldr	r2, [r4, #24]
 800073e:	4d42      	ldr	r5, [pc, #264]	; (8000848 <HAL_RCC_OscConfig+0x310>)
 8000740:	4842      	ldr	r0, [pc, #264]	; (800084c <HAL_RCC_OscConfig+0x314>)
 8000742:	2101      	movs	r1, #1
 8000744:	b312      	cbz	r2, 800078c <HAL_RCC_OscConfig+0x254>
 8000746:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_ENABLE();
 800074a:	fab3 f383 	clz	r3, r3
 800074e:	4403      	add	r3, r0
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	2602      	movs	r6, #2
 8000754:	6019      	str	r1, [r3, #0]
      tickstart = HAL_GetTick();
 8000756:	f7ff fee7 	bl	8000528 <HAL_GetTick>
 800075a:	4607      	mov	r7, r0
 800075c:	fa96 f3a6 	rbit	r3, r6
 8000760:	fa96 f3a6 	rbit	r3, r6
 8000764:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000768:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800076a:	fa96 f3a6 	rbit	r3, r6
 800076e:	fab3 f383 	clz	r3, r3
 8000772:	f003 031f 	and.w	r3, r3, #31
 8000776:	fa01 f303 	lsl.w	r3, r1, r3
 800077a:	4213      	tst	r3, r2
 800077c:	f47f aeea 	bne.w	8000554 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000780:	f7ff fed2 	bl	8000528 <HAL_GetTick>
 8000784:	1bc0      	subs	r0, r0, r7
 8000786:	2802      	cmp	r0, #2
 8000788:	d9e8      	bls.n	800075c <HAL_RCC_OscConfig+0x224>
 800078a:	e739      	b.n	8000600 <HAL_RCC_OscConfig+0xc8>
 800078c:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_DISABLE();
 8000790:	fab3 f383 	clz	r3, r3
 8000794:	4403      	add	r3, r0
 8000796:	009b      	lsls	r3, r3, #2
 8000798:	2602      	movs	r6, #2
 800079a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800079c:	f7ff fec4 	bl	8000528 <HAL_GetTick>
 80007a0:	4607      	mov	r7, r0
 80007a2:	fa96 f3a6 	rbit	r3, r6
 80007a6:	fa96 f3a6 	rbit	r3, r6
 80007aa:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80007ae:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80007b0:	fa96 f3a6 	rbit	r3, r6
 80007b4:	fab3 f383 	clz	r3, r3
 80007b8:	f003 031f 	and.w	r3, r3, #31
 80007bc:	fa01 f303 	lsl.w	r3, r1, r3
 80007c0:	4213      	tst	r3, r2
 80007c2:	f43f aec7 	beq.w	8000554 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007c6:	f7ff feaf 	bl	8000528 <HAL_GetTick>
 80007ca:	1bc0      	subs	r0, r0, r7
 80007cc:	2802      	cmp	r0, #2
 80007ce:	d9e8      	bls.n	80007a2 <HAL_RCC_OscConfig+0x26a>
 80007d0:	e716      	b.n	8000600 <HAL_RCC_OscConfig+0xc8>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80007d2:	491d      	ldr	r1, [pc, #116]	; (8000848 <HAL_RCC_OscConfig+0x310>)
 80007d4:	69cb      	ldr	r3, [r1, #28]
 80007d6:	00d8      	lsls	r0, r3, #3
 80007d8:	d433      	bmi.n	8000842 <HAL_RCC_OscConfig+0x30a>
      __HAL_RCC_PWR_CLK_ENABLE();
 80007da:	69cb      	ldr	r3, [r1, #28]
 80007dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e0:	61cb      	str	r3, [r1, #28]
 80007e2:	69cb      	ldr	r3, [r1, #28]
 80007e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e8:	9301      	str	r3, [sp, #4]
 80007ea:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80007ec:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80007ee:	4e18      	ldr	r6, [pc, #96]	; (8000850 <HAL_RCC_OscConfig+0x318>)
 80007f0:	6833      	ldr	r3, [r6, #0]
 80007f2:	05da      	lsls	r2, r3, #23
 80007f4:	d52e      	bpl.n	8000854 <HAL_RCC_OscConfig+0x31c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007f6:	68e3      	ldr	r3, [r4, #12]
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d13b      	bne.n	8000874 <HAL_RCC_OscConfig+0x33c>
 80007fc:	6a0b      	ldr	r3, [r1, #32]
 80007fe:	f043 0301 	orr.w	r3, r3, #1
 8000802:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8000804:	f7ff fe90 	bl	8000528 <HAL_GetTick>
 8000808:	2602      	movs	r6, #2
 800080a:	4681      	mov	r9, r0
 800080c:	46b0      	mov	r8, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800080e:	2701      	movs	r7, #1
 8000810:	fa96 f3a6 	rbit	r3, r6
 8000814:	fa96 f3a6 	rbit	r3, r6
 8000818:	2b00      	cmp	r3, #0
 800081a:	d06a      	beq.n	80008f2 <HAL_RCC_OscConfig+0x3ba>
 800081c:	6a0a      	ldr	r2, [r1, #32]
 800081e:	fa98 f3a8 	rbit	r3, r8
 8000822:	fab3 f383 	clz	r3, r3
 8000826:	f003 031f 	and.w	r3, r3, #31
 800082a:	fa07 f303 	lsl.w	r3, r7, r3
 800082e:	4213      	tst	r3, r2
 8000830:	d056      	beq.n	80008e0 <HAL_RCC_OscConfig+0x3a8>
    if(pwrclkchanged == SET)
 8000832:	2d00      	cmp	r5, #0
 8000834:	f43f ae92 	beq.w	800055c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000838:	69cb      	ldr	r3, [r1, #28]
 800083a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800083e:	61cb      	str	r3, [r1, #28]
 8000840:	e68c      	b.n	800055c <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8000842:	2500      	movs	r5, #0
 8000844:	e7d3      	b.n	80007ee <HAL_RCC_OscConfig+0x2b6>
 8000846:	bf00      	nop
 8000848:	40021000 	.word	0x40021000
 800084c:	10908120 	.word	0x10908120
 8000850:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000854:	6833      	ldr	r3, [r6, #0]
 8000856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800085a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800085c:	f7ff fe64 	bl	8000528 <HAL_GetTick>
 8000860:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000862:	6833      	ldr	r3, [r6, #0]
 8000864:	05db      	lsls	r3, r3, #23
 8000866:	d4c6      	bmi.n	80007f6 <HAL_RCC_OscConfig+0x2be>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000868:	f7ff fe5e 	bl	8000528 <HAL_GetTick>
 800086c:	1bc0      	subs	r0, r0, r7
 800086e:	2864      	cmp	r0, #100	; 0x64
 8000870:	d9f7      	bls.n	8000862 <HAL_RCC_OscConfig+0x32a>
 8000872:	e6c5      	b.n	8000600 <HAL_RCC_OscConfig+0xc8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000874:	bb33      	cbnz	r3, 80008c4 <HAL_RCC_OscConfig+0x38c>
 8000876:	6a0b      	ldr	r3, [r1, #32]
 8000878:	f023 0301 	bic.w	r3, r3, #1
 800087c:	620b      	str	r3, [r1, #32]
 800087e:	6a0b      	ldr	r3, [r1, #32]
 8000880:	f023 0304 	bic.w	r3, r3, #4
 8000884:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8000886:	f7ff fe4f 	bl	8000528 <HAL_GetTick>
 800088a:	2602      	movs	r6, #2
 800088c:	4681      	mov	r9, r0
 800088e:	46b0      	mov	r8, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000890:	2701      	movs	r7, #1
 8000892:	fa96 f3a6 	rbit	r3, r6
 8000896:	fa96 f3a6 	rbit	r3, r6
 800089a:	b373      	cbz	r3, 80008fa <HAL_RCC_OscConfig+0x3c2>
 800089c:	6a0a      	ldr	r2, [r1, #32]
 800089e:	fa98 f3a8 	rbit	r3, r8
 80008a2:	fab3 f383 	clz	r3, r3
 80008a6:	f003 031f 	and.w	r3, r3, #31
 80008aa:	fa07 f303 	lsl.w	r3, r7, r3
 80008ae:	4213      	tst	r3, r2
 80008b0:	d0bf      	beq.n	8000832 <HAL_RCC_OscConfig+0x2fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008b2:	f7ff fe39 	bl	8000528 <HAL_GetTick>
 80008b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80008ba:	eba0 0009 	sub.w	r0, r0, r9
 80008be:	4298      	cmp	r0, r3
 80008c0:	d9e7      	bls.n	8000892 <HAL_RCC_OscConfig+0x35a>
 80008c2:	e69d      	b.n	8000600 <HAL_RCC_OscConfig+0xc8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008c4:	2b05      	cmp	r3, #5
 80008c6:	6a0b      	ldr	r3, [r1, #32]
 80008c8:	d103      	bne.n	80008d2 <HAL_RCC_OscConfig+0x39a>
 80008ca:	f043 0304 	orr.w	r3, r3, #4
 80008ce:	620b      	str	r3, [r1, #32]
 80008d0:	e794      	b.n	80007fc <HAL_RCC_OscConfig+0x2c4>
 80008d2:	f023 0301 	bic.w	r3, r3, #1
 80008d6:	620b      	str	r3, [r1, #32]
 80008d8:	6a0b      	ldr	r3, [r1, #32]
 80008da:	f023 0304 	bic.w	r3, r3, #4
 80008de:	e790      	b.n	8000802 <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008e0:	f7ff fe22 	bl	8000528 <HAL_GetTick>
 80008e4:	f241 3388 	movw	r3, #5000	; 0x1388
 80008e8:	eba0 0009 	sub.w	r0, r0, r9
 80008ec:	4298      	cmp	r0, r3
 80008ee:	d98f      	bls.n	8000810 <HAL_RCC_OscConfig+0x2d8>
 80008f0:	e686      	b.n	8000600 <HAL_RCC_OscConfig+0xc8>
 80008f2:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80008f6:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80008f8:	e791      	b.n	800081e <HAL_RCC_OscConfig+0x2e6>
 80008fa:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80008fe:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8000900:	e7cd      	b.n	800089e <HAL_RCC_OscConfig+0x366>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000902:	4941      	ldr	r1, [pc, #260]	; (8000a08 <HAL_RCC_OscConfig+0x4d0>)
 8000904:	684b      	ldr	r3, [r1, #4]
 8000906:	f003 030c 	and.w	r3, r3, #12
 800090a:	2b08      	cmp	r3, #8
 800090c:	f43f ae4d 	beq.w	80005aa <HAL_RCC_OscConfig+0x72>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000910:	2a02      	cmp	r2, #2
 8000912:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000916:	d151      	bne.n	80009bc <HAL_RCC_OscConfig+0x484>
 8000918:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800091c:	fab3 f383 	clz	r3, r3
 8000920:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000924:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800092e:	f7ff fdfb 	bl	8000528 <HAL_GetTick>
 8000932:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8000936:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000938:	2501      	movs	r5, #1
 800093a:	fa96 f3a6 	rbit	r3, r6
 800093e:	680a      	ldr	r2, [r1, #0]
 8000940:	fa96 f3a6 	rbit	r3, r6
 8000944:	fab3 f383 	clz	r3, r3
 8000948:	f003 031f 	and.w	r3, r3, #31
 800094c:	fa05 f303 	lsl.w	r3, r5, r3
 8000950:	4213      	tst	r3, r2
 8000952:	d12d      	bne.n	80009b0 <HAL_RCC_OscConfig+0x478>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000954:	684a      	ldr	r2, [r1, #4]
 8000956:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000958:	6a20      	ldr	r0, [r4, #32]
 800095a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800095e:	4303      	orrs	r3, r0
 8000960:	4313      	orrs	r3, r2
 8000962:	604b      	str	r3, [r1, #4]
 8000964:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000968:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 800096c:	fab3 f383 	clz	r3, r3
 8000970:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000974:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 800097e:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8000980:	f7ff fdd2 	bl	8000528 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000984:	2501      	movs	r5, #1
        tickstart = HAL_GetTick();
 8000986:	4606      	mov	r6, r0
 8000988:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800098c:	680a      	ldr	r2, [r1, #0]
 800098e:	fa94 f3a4 	rbit	r3, r4
 8000992:	fab3 f383 	clz	r3, r3
 8000996:	f003 031f 	and.w	r3, r3, #31
 800099a:	fa05 f303 	lsl.w	r3, r5, r3
 800099e:	4213      	tst	r3, r2
 80009a0:	f47f ade0 	bne.w	8000564 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009a4:	f7ff fdc0 	bl	8000528 <HAL_GetTick>
 80009a8:	1b80      	subs	r0, r0, r6
 80009aa:	2802      	cmp	r0, #2
 80009ac:	d9ec      	bls.n	8000988 <HAL_RCC_OscConfig+0x450>
 80009ae:	e627      	b.n	8000600 <HAL_RCC_OscConfig+0xc8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009b0:	f7ff fdba 	bl	8000528 <HAL_GetTick>
 80009b4:	1bc0      	subs	r0, r0, r7
 80009b6:	2802      	cmp	r0, #2
 80009b8:	d9bf      	bls.n	800093a <HAL_RCC_OscConfig+0x402>
 80009ba:	e621      	b.n	8000600 <HAL_RCC_OscConfig+0xc8>
 80009bc:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80009c0:	fab3 f383 	clz	r3, r3
 80009c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80009c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009d2:	f7ff fda9 	bl	8000528 <HAL_GetTick>
 80009d6:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 80009da:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80009dc:	2501      	movs	r5, #1
 80009de:	fa94 f3a4 	rbit	r3, r4
 80009e2:	680a      	ldr	r2, [r1, #0]
 80009e4:	fa94 f3a4 	rbit	r3, r4
 80009e8:	fab3 f383 	clz	r3, r3
 80009ec:	f003 031f 	and.w	r3, r3, #31
 80009f0:	fa05 f303 	lsl.w	r3, r5, r3
 80009f4:	4213      	tst	r3, r2
 80009f6:	f43f adb5 	beq.w	8000564 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009fa:	f7ff fd95 	bl	8000528 <HAL_GetTick>
 80009fe:	1b80      	subs	r0, r0, r6
 8000a00:	2802      	cmp	r0, #2
 8000a02:	d9ec      	bls.n	80009de <HAL_RCC_OscConfig+0x4a6>
 8000a04:	e5fc      	b.n	8000600 <HAL_RCC_OscConfig+0xc8>
 8000a06:	bf00      	nop
 8000a08:	40021000 	.word	0x40021000

08000a0c <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a0c:	4a50      	ldr	r2, [pc, #320]	; (8000b50 <HAL_RCC_ClockConfig+0x144>)
{
 8000a0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a10:	6813      	ldr	r3, [r2, #0]
 8000a12:	f003 0307 	and.w	r3, r3, #7
 8000a16:	428b      	cmp	r3, r1
{
 8000a18:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a1a:	d31b      	bcc.n	8000a54 <HAL_RCC_ClockConfig+0x48>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a1c:	682a      	ldr	r2, [r5, #0]
 8000a1e:	0790      	lsls	r0, r2, #30
 8000a20:	d424      	bmi.n	8000a6c <HAL_RCC_ClockConfig+0x60>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a22:	07d2      	lsls	r2, r2, #31
 8000a24:	d42a      	bmi.n	8000a7c <HAL_RCC_ClockConfig+0x70>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a26:	4a4a      	ldr	r2, [pc, #296]	; (8000b50 <HAL_RCC_ClockConfig+0x144>)
 8000a28:	6813      	ldr	r3, [r2, #0]
 8000a2a:	f003 0307 	and.w	r3, r3, #7
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	d37a      	bcc.n	8000b28 <HAL_RCC_ClockConfig+0x11c>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a32:	6828      	ldr	r0, [r5, #0]
 8000a34:	0743      	lsls	r3, r0, #29
 8000a36:	f100 8082 	bmi.w	8000b3e <HAL_RCC_ClockConfig+0x132>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a3a:	f010 0008 	ands.w	r0, r0, #8
 8000a3e:	d008      	beq.n	8000a52 <HAL_RCC_ClockConfig+0x46>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000a40:	4a44      	ldr	r2, [pc, #272]	; (8000b54 <HAL_RCC_ClockConfig+0x148>)
 8000a42:	6929      	ldr	r1, [r5, #16]
 8000a44:	6853      	ldr	r3, [r2, #4]
 8000a46:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000a4a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000a4e:	6053      	str	r3, [r2, #4]
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 8000a50:	2000      	movs	r0, #0
}
 8000a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a54:	6813      	ldr	r3, [r2, #0]
 8000a56:	f023 0307 	bic.w	r3, r3, #7
 8000a5a:	430b      	orrs	r3, r1
 8000a5c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000a5e:	6813      	ldr	r3, [r2, #0]
 8000a60:	f003 0307 	and.w	r3, r3, #7
 8000a64:	4299      	cmp	r1, r3
 8000a66:	d0d9      	beq.n	8000a1c <HAL_RCC_ClockConfig+0x10>
      return HAL_ERROR;
 8000a68:	2001      	movs	r0, #1
 8000a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000a6c:	4839      	ldr	r0, [pc, #228]	; (8000b54 <HAL_RCC_ClockConfig+0x148>)
 8000a6e:	68ac      	ldr	r4, [r5, #8]
 8000a70:	6843      	ldr	r3, [r0, #4]
 8000a72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a76:	4323      	orrs	r3, r4
 8000a78:	6043      	str	r3, [r0, #4]
 8000a7a:	e7d2      	b.n	8000a22 <HAL_RCC_ClockConfig+0x16>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a7c:	686a      	ldr	r2, [r5, #4]
 8000a7e:	4c35      	ldr	r4, [pc, #212]	; (8000b54 <HAL_RCC_ClockConfig+0x148>)
 8000a80:	2a01      	cmp	r2, #1
 8000a82:	d127      	bne.n	8000ad4 <HAL_RCC_ClockConfig+0xc8>
 8000a84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a88:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a8c:	6820      	ldr	r0, [r4, #0]
 8000a8e:	fa93 f3a3 	rbit	r3, r3
 8000a92:	fab3 f383 	clz	r3, r3
 8000a96:	f003 031f 	and.w	r3, r3, #31
 8000a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9e:	4203      	tst	r3, r0
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000aa0:	d0e2      	beq.n	8000a68 <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000aa2:	6863      	ldr	r3, [r4, #4]
 8000aa4:	f023 0303 	bic.w	r3, r3, #3
 8000aa8:	431a      	orrs	r2, r3
 8000aaa:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 8000aac:	f7ff fd3c 	bl	8000528 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ab0:	686b      	ldr	r3, [r5, #4]
 8000ab2:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8000ab4:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ab6:	f241 3788 	movw	r7, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000aba:	d11e      	bne.n	8000afa <HAL_RCC_ClockConfig+0xee>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000abc:	6863      	ldr	r3, [r4, #4]
 8000abe:	f003 030c 	and.w	r3, r3, #12
 8000ac2:	2b04      	cmp	r3, #4
 8000ac4:	d0af      	beq.n	8000a26 <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ac6:	f7ff fd2f 	bl	8000528 <HAL_GetTick>
 8000aca:	1b80      	subs	r0, r0, r6
 8000acc:	42b8      	cmp	r0, r7
 8000ace:	d9f5      	bls.n	8000abc <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 8000ad0:	2003      	movs	r0, #3
 8000ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ad4:	2a02      	cmp	r2, #2
 8000ad6:	bf0c      	ite	eq
 8000ad8:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000adc:	2302      	movne	r3, #2
 8000ade:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ae2:	6826      	ldr	r6, [r4, #0]
 8000ae4:	fa93 f3a3 	rbit	r3, r3
 8000ae8:	fab3 f383 	clz	r3, r3
 8000aec:	f003 031f 	and.w	r3, r3, #31
 8000af0:	2001      	movs	r0, #1
 8000af2:	fa00 f303 	lsl.w	r3, r0, r3
 8000af6:	4233      	tst	r3, r6
 8000af8:	e7d2      	b.n	8000aa0 <HAL_RCC_ClockConfig+0x94>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000afa:	2b02      	cmp	r3, #2
 8000afc:	d10f      	bne.n	8000b1e <HAL_RCC_ClockConfig+0x112>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000afe:	6863      	ldr	r3, [r4, #4]
 8000b00:	f003 030c 	and.w	r3, r3, #12
 8000b04:	2b08      	cmp	r3, #8
 8000b06:	d08e      	beq.n	8000a26 <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b08:	f7ff fd0e 	bl	8000528 <HAL_GetTick>
 8000b0c:	1b80      	subs	r0, r0, r6
 8000b0e:	42b8      	cmp	r0, r7
 8000b10:	d9f5      	bls.n	8000afe <HAL_RCC_ClockConfig+0xf2>
 8000b12:	e7dd      	b.n	8000ad0 <HAL_RCC_ClockConfig+0xc4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b14:	f7ff fd08 	bl	8000528 <HAL_GetTick>
 8000b18:	1b80      	subs	r0, r0, r6
 8000b1a:	42b8      	cmp	r0, r7
 8000b1c:	d8d8      	bhi.n	8000ad0 <HAL_RCC_ClockConfig+0xc4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b1e:	6863      	ldr	r3, [r4, #4]
 8000b20:	f013 0f0c 	tst.w	r3, #12
 8000b24:	d1f6      	bne.n	8000b14 <HAL_RCC_ClockConfig+0x108>
 8000b26:	e77e      	b.n	8000a26 <HAL_RCC_ClockConfig+0x1a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b28:	6813      	ldr	r3, [r2, #0]
 8000b2a:	f023 0307 	bic.w	r3, r3, #7
 8000b2e:	430b      	orrs	r3, r1
 8000b30:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000b32:	6813      	ldr	r3, [r2, #0]
 8000b34:	f003 0307 	and.w	r3, r3, #7
 8000b38:	4299      	cmp	r1, r3
 8000b3a:	d195      	bne.n	8000a68 <HAL_RCC_ClockConfig+0x5c>
 8000b3c:	e779      	b.n	8000a32 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000b3e:	4a05      	ldr	r2, [pc, #20]	; (8000b54 <HAL_RCC_ClockConfig+0x148>)
 8000b40:	68e9      	ldr	r1, [r5, #12]
 8000b42:	6853      	ldr	r3, [r2, #4]
 8000b44:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b48:	430b      	orrs	r3, r1
 8000b4a:	6053      	str	r3, [r2, #4]
 8000b4c:	e775      	b.n	8000a3a <HAL_RCC_ClockConfig+0x2e>
 8000b4e:	bf00      	nop
 8000b50:	40022000 	.word	0x40022000
 8000b54:	40021000 	.word	0x40021000

08000b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000b5c:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b60:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8000cd8 <HAL_GPIO_Init+0x180>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b64:	4a5a      	ldr	r2, [pc, #360]	; (8000cd0 <HAL_GPIO_Init+0x178>)
  uint32_t position = 0x00U;
 8000b66:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000b68:	fa38 f403 	lsrs.w	r4, r8, r3
 8000b6c:	d102      	bne.n	8000b74 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 8000b6e:	b003      	add	sp, #12
 8000b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000b74:	2401      	movs	r4, #1
 8000b76:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 8000b7a:	ea18 050a 	ands.w	r5, r8, sl
 8000b7e:	f000 809c 	beq.w	8000cba <HAL_GPIO_Init+0x162>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b82:	684c      	ldr	r4, [r1, #4]
 8000b84:	f024 0b10 	bic.w	fp, r4, #16
 8000b88:	f1bb 0f02 	cmp.w	fp, #2
 8000b8c:	d114      	bne.n	8000bb8 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3];
 8000b8e:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8000b92:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b96:	f003 0c07 	and.w	ip, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000b9a:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b9e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000ba2:	270f      	movs	r7, #15
 8000ba4:	fa07 f70c 	lsl.w	r7, r7, ip
 8000ba8:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000bac:	690e      	ldr	r6, [r1, #16]
 8000bae:	fa06 f60c 	lsl.w	r6, r6, ip
 8000bb2:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 8000bb4:	f8ce 6020 	str.w	r6, [lr, #32]
 8000bb8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bbc:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8000bbe:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bc0:	fa07 f70c 	lsl.w	r7, r7, ip
 8000bc4:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bc6:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bca:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bcc:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bd0:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bd4:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bd8:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8000bdc:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bde:	d811      	bhi.n	8000c04 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 8000be0:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000be2:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000be6:	68ce      	ldr	r6, [r1, #12]
 8000be8:	fa06 fe0c 	lsl.w	lr, r6, ip
 8000bec:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8000bf0:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000bf2:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bf4:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000bf8:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8000bfc:	409e      	lsls	r6, r3
 8000bfe:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8000c02:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8000c04:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c06:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c08:	688e      	ldr	r6, [r1, #8]
 8000c0a:	fa06 f60c 	lsl.w	r6, r6, ip
 8000c0e:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c10:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8000c12:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c14:	d551      	bpl.n	8000cba <HAL_GPIO_Init+0x162>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c16:	f8d9 6018 	ldr.w	r6, [r9, #24]
 8000c1a:	f046 0601 	orr.w	r6, r6, #1
 8000c1e:	f8c9 6018 	str.w	r6, [r9, #24]
 8000c22:	f8d9 6018 	ldr.w	r6, [r9, #24]
 8000c26:	f023 0703 	bic.w	r7, r3, #3
 8000c2a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000c2e:	f006 0601 	and.w	r6, r6, #1
 8000c32:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000c36:	9601      	str	r6, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000c38:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3c:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000c3e:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000c40:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000c44:	f04f 0e0f 	mov.w	lr, #15
 8000c48:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000c4c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000c50:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000c54:	d033      	beq.n	8000cbe <HAL_GPIO_Init+0x166>
 8000c56:	4e1f      	ldr	r6, [pc, #124]	; (8000cd4 <HAL_GPIO_Init+0x17c>)
 8000c58:	42b0      	cmp	r0, r6
 8000c5a:	d032      	beq.n	8000cc2 <HAL_GPIO_Init+0x16a>
 8000c5c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c60:	42b0      	cmp	r0, r6
 8000c62:	d030      	beq.n	8000cc6 <HAL_GPIO_Init+0x16e>
 8000c64:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c68:	42b0      	cmp	r0, r6
 8000c6a:	d02e      	beq.n	8000cca <HAL_GPIO_Init+0x172>
 8000c6c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c70:	42b0      	cmp	r0, r6
 8000c72:	bf14      	ite	ne
 8000c74:	2605      	movne	r6, #5
 8000c76:	2604      	moveq	r6, #4
 8000c78:	fa06 f60c 	lsl.w	r6, r6, ip
 8000c7c:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000c80:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000c82:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000c84:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c86:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000c8a:	bf0c      	ite	eq
 8000c8c:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000c8e:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 8000c90:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8000c92:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c94:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000c98:	bf0c      	ite	eq
 8000c9a:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000c9c:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 8000c9e:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8000ca0:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ca2:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000ca6:	bf0c      	ite	eq
 8000ca8:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000caa:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 8000cac:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8000cae:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cb0:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000cb2:	bf54      	ite	pl
 8000cb4:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000cb6:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 8000cb8:	60d6      	str	r6, [r2, #12]
    position++;
 8000cba:	3301      	adds	r3, #1
 8000cbc:	e754      	b.n	8000b68 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000cbe:	2600      	movs	r6, #0
 8000cc0:	e7da      	b.n	8000c78 <HAL_GPIO_Init+0x120>
 8000cc2:	2601      	movs	r6, #1
 8000cc4:	e7d8      	b.n	8000c78 <HAL_GPIO_Init+0x120>
 8000cc6:	2602      	movs	r6, #2
 8000cc8:	e7d6      	b.n	8000c78 <HAL_GPIO_Init+0x120>
 8000cca:	2603      	movs	r6, #3
 8000ccc:	e7d4      	b.n	8000c78 <HAL_GPIO_Init+0x120>
 8000cce:	bf00      	nop
 8000cd0:	40010400 	.word	0x40010400
 8000cd4:	48000400 	.word	0x48000400
 8000cd8:	40021000 	.word	0x40021000

08000cdc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000cdc:	b10a      	cbz	r2, 8000ce2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cde:	6181      	str	r1, [r0, #24]
 8000ce0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ce2:	6281      	str	r1, [r0, #40]	; 0x28
 8000ce4:	4770      	bx	lr
 8000ce6:	0000      	movs	r0, r0

08000ce8 <UART_SetConfig>:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000ce8:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000cea:	6881      	ldr	r1, [r0, #8]
 8000cec:	69c3      	ldr	r3, [r0, #28]
{
 8000cee:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000cf0:	6905      	ldr	r5, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000cf2:	6814      	ldr	r4, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000cf4:	4329      	orrs	r1, r5
 8000cf6:	6945      	ldr	r5, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000cf8:	f424 4416 	bic.w	r4, r4, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000cfc:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000cfe:	f024 040c 	bic.w	r4, r4, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000d02:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000d04:	4321      	orrs	r1, r4
 8000d06:	6011      	str	r1, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000d08:	6851      	ldr	r1, [r2, #4]
 8000d0a:	68c4      	ldr	r4, [r0, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000d0c:	6a05      	ldr	r5, [r0, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000d0e:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8000d12:	4321      	orrs	r1, r4
 8000d14:	6051      	str	r1, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000d16:	6894      	ldr	r4, [r2, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000d18:	6981      	ldr	r1, [r0, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000d1a:	f424 6430 	bic.w	r4, r4, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000d1e:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000d20:	4321      	orrs	r1, r4
 8000d22:	6091      	str	r1, [r2, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000d24:	4962      	ldr	r1, [pc, #392]	; (8000eb0 <UART_SetConfig+0x1c8>)
 8000d26:	428a      	cmp	r2, r1
 8000d28:	d112      	bne.n	8000d50 <UART_SetConfig+0x68>
 8000d2a:	f501 4158 	add.w	r1, r1, #55296	; 0xd800
 8000d2e:	4c61      	ldr	r4, [pc, #388]	; (8000eb4 <UART_SetConfig+0x1cc>)
 8000d30:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8000d32:	f001 0103 	and.w	r1, r1, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000d36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d3a:	5c61      	ldrb	r1, [r4, r1]
 8000d3c:	d06e      	beq.n	8000e1c <UART_SetConfig+0x134>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 8000d3e:	2908      	cmp	r1, #8
 8000d40:	d819      	bhi.n	8000d76 <UART_SetConfig+0x8e>
 8000d42:	e8df f001 	tbb	[pc, r1]
 8000d46:	8bb0      	.short	0x8bb0
 8000d48:	18b01896 	.word	0x18b01896
 8000d4c:	1818      	.short	0x1818
 8000d4e:	a0          	.byte	0xa0
 8000d4f:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000d50:	4959      	ldr	r1, [pc, #356]	; (8000eb8 <UART_SetConfig+0x1d0>)
 8000d52:	428a      	cmp	r2, r1
 8000d54:	d12c      	bne.n	8000db0 <UART_SetConfig+0xc8>
 8000d56:	f501 31e6 	add.w	r1, r1, #117760	; 0x1cc00
 8000d5a:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8000d5c:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
 8000d60:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8000d64:	f000 809c 	beq.w	8000ea0 <UART_SetConfig+0x1b8>
 8000d68:	d807      	bhi.n	8000d7a <UART_SetConfig+0x92>
 8000d6a:	2900      	cmp	r1, #0
 8000d6c:	f000 8098 	beq.w	8000ea0 <UART_SetConfig+0x1b8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000d70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d74:	d06f      	beq.n	8000e56 <UART_SetConfig+0x16e>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8000d76:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 8000d78:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000d7a:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8000d7e:	f000 8087 	beq.w	8000e90 <UART_SetConfig+0x1a8>
 8000d82:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 8000d86:	d1f3      	bne.n	8000d70 <UART_SetConfig+0x88>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000d88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d8c:	d171      	bne.n	8000e72 <UART_SetConfig+0x18a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8000d8e:	6841      	ldr	r1, [r0, #4]
 8000d90:	084b      	lsrs	r3, r1, #1
 8000d92:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8000d96:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000d9a:	fbb3 f3f1 	udiv	r3, r3, r1
  HAL_StatusTypeDef ret               = HAL_OK;
 8000d9e:	2000      	movs	r0, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000da0:	b29b      	uxth	r3, r3
    brrtemp = usartdiv & 0xFFF0U;
 8000da2:	f023 010f 	bic.w	r1, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000da6:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8000daa:	430b      	orrs	r3, r1
 8000dac:	60d3      	str	r3, [r2, #12]
 8000dae:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000db0:	4942      	ldr	r1, [pc, #264]	; (8000ebc <UART_SetConfig+0x1d4>)
 8000db2:	428a      	cmp	r2, r1
 8000db4:	d10e      	bne.n	8000dd4 <UART_SetConfig+0xec>
 8000db6:	f501 31e4 	add.w	r1, r1, #116736	; 0x1c800
 8000dba:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8000dbc:	f401 2140 	and.w	r1, r1, #786432	; 0xc0000
 8000dc0:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8000dc4:	d06c      	beq.n	8000ea0 <UART_SetConfig+0x1b8>
 8000dc6:	d9d0      	bls.n	8000d6a <UART_SetConfig+0x82>
 8000dc8:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 8000dcc:	d060      	beq.n	8000e90 <UART_SetConfig+0x1a8>
 8000dce:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
 8000dd2:	e7d8      	b.n	8000d86 <UART_SetConfig+0x9e>
 8000dd4:	493a      	ldr	r1, [pc, #232]	; (8000ec0 <UART_SetConfig+0x1d8>)
 8000dd6:	428a      	cmp	r2, r1
 8000dd8:	d10e      	bne.n	8000df8 <UART_SetConfig+0x110>
 8000dda:	f501 31e2 	add.w	r1, r1, #115712	; 0x1c400
 8000dde:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8000de0:	f401 1140 	and.w	r1, r1, #3145728	; 0x300000
 8000de4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000de8:	d05a      	beq.n	8000ea0 <UART_SetConfig+0x1b8>
 8000dea:	d9be      	bls.n	8000d6a <UART_SetConfig+0x82>
 8000dec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000df0:	d04e      	beq.n	8000e90 <UART_SetConfig+0x1a8>
 8000df2:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8000df6:	e7c6      	b.n	8000d86 <UART_SetConfig+0x9e>
 8000df8:	4932      	ldr	r1, [pc, #200]	; (8000ec4 <UART_SetConfig+0x1dc>)
 8000dfa:	428a      	cmp	r2, r1
 8000dfc:	d1b8      	bne.n	8000d70 <UART_SetConfig+0x88>
 8000dfe:	f501 31e0 	add.w	r1, r1, #114688	; 0x1c000
 8000e02:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8000e04:	f401 0140 	and.w	r1, r1, #12582912	; 0xc00000
 8000e08:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8000e0c:	d048      	beq.n	8000ea0 <UART_SetConfig+0x1b8>
 8000e0e:	d9ac      	bls.n	8000d6a <UART_SetConfig+0x82>
 8000e10:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e14:	d03c      	beq.n	8000e90 <UART_SetConfig+0x1a8>
 8000e16:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8000e1a:	e7b4      	b.n	8000d86 <UART_SetConfig+0x9e>
    switch (clocksource)
 8000e1c:	2908      	cmp	r1, #8
 8000e1e:	d81a      	bhi.n	8000e56 <UART_SetConfig+0x16e>
 8000e20:	a301      	add	r3, pc, #4	; (adr r3, 8000e28 <UART_SetConfig+0x140>)
 8000e22:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8000e26:	bf00      	nop
 8000e28:	08000e4d 	.word	0x08000e4d
 8000e2c:	08000e4d 	.word	0x08000e4d
 8000e30:	08000d8f 	.word	0x08000d8f
 8000e34:	08000e57 	.word	0x08000e57
 8000e38:	08000e4d 	.word	0x08000e4d
 8000e3c:	08000e57 	.word	0x08000e57
 8000e40:	08000e57 	.word	0x08000e57
 8000e44:	08000e57 	.word	0x08000e57
 8000e48:	08000e97 	.word	0x08000e97
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000e4c:	6841      	ldr	r1, [r0, #4]
 8000e4e:	084b      	lsrs	r3, r1, #1
 8000e50:	f503 0361 	add.w	r3, r3, #14745600	; 0xe10000
 8000e54:	e7a1      	b.n	8000d9a <UART_SetConfig+0xb2>
        ret = HAL_ERROR;
 8000e56:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	e7a2      	b.n	8000da2 <UART_SetConfig+0xba>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8000e5c:	6842      	ldr	r2, [r0, #4]
 8000e5e:	0853      	lsrs	r3, r2, #1
 8000e60:	f503 03e1 	add.w	r3, r3, #7372800	; 0x708000
 8000e64:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e68:	4a11      	ldr	r2, [pc, #68]	; (8000eb0 <UART_SetConfig+0x1c8>)
 8000e6a:	b29b      	uxth	r3, r3
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8000e6c:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8000e6e:	2000      	movs	r0, #0
        break;
 8000e70:	bd30      	pop	{r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8000e72:	6841      	ldr	r1, [r0, #4]
 8000e74:	084b      	lsrs	r3, r1, #1
 8000e76:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8000e7a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8000e7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	e7f2      	b.n	8000e6c <UART_SetConfig+0x184>
 8000e86:	6841      	ldr	r1, [r0, #4]
 8000e88:	084b      	lsrs	r3, r1, #1
 8000e8a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000e8e:	e7f6      	b.n	8000e7e <UART_SetConfig+0x196>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000e90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e94:	d1f7      	bne.n	8000e86 <UART_SetConfig+0x19e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000e96:	6841      	ldr	r1, [r0, #4]
 8000e98:	084b      	lsrs	r3, r1, #1
 8000e9a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000e9e:	e77c      	b.n	8000d9a <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000ea0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ea4:	d0d2      	beq.n	8000e4c <UART_SetConfig+0x164>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000ea6:	6841      	ldr	r1, [r0, #4]
 8000ea8:	084b      	lsrs	r3, r1, #1
 8000eaa:	f503 03e1 	add.w	r3, r3, #7372800	; 0x708000
 8000eae:	e7e6      	b.n	8000e7e <UART_SetConfig+0x196>
 8000eb0:	40013800 	.word	0x40013800
 8000eb4:	080019d0 	.word	0x080019d0
 8000eb8:	40004400 	.word	0x40004400
 8000ebc:	40004800 	.word	0x40004800
 8000ec0:	40004c00 	.word	0x40004c00
 8000ec4:	40005000 	.word	0x40005000

08000ec8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8000ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eca:	9d06      	ldr	r5, [sp, #24]
 8000ecc:	4604      	mov	r4, r0
 8000ece:	4616      	mov	r6, r2
 8000ed0:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000ed2:	6820      	ldr	r0, [r4, #0]
 8000ed4:	69c2      	ldr	r2, [r0, #28]
 8000ed6:	ea31 0302 	bics.w	r3, r1, r2
 8000eda:	bf0c      	ite	eq
 8000edc:	2201      	moveq	r2, #1
 8000ede:	2200      	movne	r2, #0
 8000ee0:	42b2      	cmp	r2, r6
 8000ee2:	d001      	beq.n	8000ee8 <UART_WaitOnFlagUntilTimeout+0x20>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8000ee4:	2000      	movs	r0, #0
}
 8000ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000ee8:	1c6b      	adds	r3, r5, #1
 8000eea:	d0f3      	beq.n	8000ed4 <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000eec:	b995      	cbnz	r5, 8000f14 <UART_WaitOnFlagUntilTimeout+0x4c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000eee:	6823      	ldr	r3, [r4, #0]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000ef6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000ef8:	689a      	ldr	r2, [r3, #8]
 8000efa:	f022 0201 	bic.w	r2, r2, #1
 8000efe:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8000f00:	2320      	movs	r3, #32
 8000f02:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8000f06:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8000f10:	2003      	movs	r0, #3
 8000f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000f14:	f7ff fb08 	bl	8000528 <HAL_GetTick>
 8000f18:	1bc0      	subs	r0, r0, r7
 8000f1a:	4285      	cmp	r5, r0
 8000f1c:	d2d9      	bcs.n	8000ed2 <UART_WaitOnFlagUntilTimeout+0xa>
 8000f1e:	e7e6      	b.n	8000eee <UART_WaitOnFlagUntilTimeout+0x26>

08000f20 <UART_CheckIdleState>:
{
 8000f20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000f22:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f24:	2100      	movs	r1, #0
 8000f26:	66c1      	str	r1, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8000f28:	f7ff fafe 	bl	8000528 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8000f2c:	6823      	ldr	r3, [r4, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8000f32:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8000f34:	d417      	bmi.n	8000f66 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8000f36:	6823      	ldr	r3, [r4, #0]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	075b      	lsls	r3, r3, #29
 8000f3c:	d50a      	bpl.n	8000f54 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8000f3e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8000f42:	9300      	str	r3, [sp, #0]
 8000f44:	2200      	movs	r2, #0
 8000f46:	462b      	mov	r3, r5
 8000f48:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8000f4c:	4620      	mov	r0, r4
 8000f4e:	f7ff ffbb 	bl	8000ec8 <UART_WaitOnFlagUntilTimeout>
 8000f52:	b9a0      	cbnz	r0, 8000f7e <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8000f54:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8000f56:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8000f58:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8000f5c:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8000f60:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8000f64:	e00c      	b.n	8000f80 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8000f66:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	460a      	mov	r2, r1
 8000f6e:	4603      	mov	r3, r0
 8000f70:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8000f74:	4620      	mov	r0, r4
 8000f76:	f7ff ffa7 	bl	8000ec8 <UART_WaitOnFlagUntilTimeout>
 8000f7a:	2800      	cmp	r0, #0
 8000f7c:	d0db      	beq.n	8000f36 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8000f7e:	2003      	movs	r0, #3
}
 8000f80:	b003      	add	sp, #12
 8000f82:	bd30      	pop	{r4, r5, pc}

08000f84 <HAL_UART_Init>:
{
 8000f84:	b510      	push	{r4, lr}
  if(huart == NULL)
 8000f86:	4604      	mov	r4, r0
 8000f88:	b328      	cbz	r0, 8000fd6 <HAL_UART_Init+0x52>
  if(huart->gState == HAL_UART_STATE_RESET)
 8000f8a:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8000f8e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f92:	b90b      	cbnz	r3, 8000f98 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 8000f94:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
  __HAL_UART_DISABLE(huart);
 8000f98:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000f9a:	2324      	movs	r3, #36	; 0x24
 8000f9c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8000fa0:	6813      	ldr	r3, [r2, #0]
 8000fa2:	f023 0301 	bic.w	r3, r3, #1
 8000fa6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8000fa8:	4620      	mov	r0, r4
 8000faa:	f7ff fe9d 	bl	8000ce8 <UART_SetConfig>
 8000fae:	2801      	cmp	r0, #1
 8000fb0:	d011      	beq.n	8000fd6 <HAL_UART_Init+0x52>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000fb2:	6823      	ldr	r3, [r4, #0]
 8000fb4:	685a      	ldr	r2, [r3, #4]
 8000fb6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000fba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000fbc:	689a      	ldr	r2, [r3, #8]
 8000fbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000fc2:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	f042 0201 	orr.w	r2, r2, #1
  return UART_CheckIdleState(huart);
 8000fca:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8000fcc:	601a      	str	r2, [r3, #0]
}
 8000fce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return UART_CheckIdleState(huart);
 8000fd2:	f7ff bfa5 	b.w	8000f20 <UART_CheckIdleState>
}
 8000fd6:	2001      	movs	r0, #1
 8000fd8:	bd10      	pop	{r4, pc}

08000fda <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000fda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000fdc:	461f      	mov	r7, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8000fde:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8000fe2:	2b20      	cmp	r3, #32
{
 8000fe4:	460d      	mov	r5, r1
 8000fe6:	4604      	mov	r4, r0
 8000fe8:	4611      	mov	r1, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8000fea:	d14b      	bne.n	8001084 <HAL_UART_Transmit+0xaa>
  {
    if((pData == NULL ) || (Size == 0U))
 8000fec:	2d00      	cmp	r5, #0
 8000fee:	d047      	beq.n	8001080 <HAL_UART_Transmit+0xa6>
 8000ff0:	2a00      	cmp	r2, #0
 8000ff2:	d045      	beq.n	8001080 <HAL_UART_Transmit+0xa6>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8000ff4:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d043      	beq.n	8001084 <HAL_UART_Transmit+0xaa>
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001002:	2300      	movs	r3, #0
 8001004:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001006:	2321      	movs	r3, #33	; 0x21
 8001008:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800100c:	f7ff fa8c 	bl	8000528 <HAL_GetTick>
 8001010:	4606      	mov	r6, r0

    huart->TxXferSize = Size;
 8001012:	f8a4 1050 	strh.w	r1, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8001016:	f8a4 1052 	strh.w	r1, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 800101a:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800101e:	b292      	uxth	r2, r2
 8001020:	b962      	cbnz	r2, 800103c <HAL_UART_Transmit+0x62>
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001022:	9700      	str	r7, [sp, #0]
 8001024:	4633      	mov	r3, r6
 8001026:	2140      	movs	r1, #64	; 0x40
 8001028:	4620      	mov	r0, r4
 800102a:	f7ff ff4d 	bl	8000ec8 <UART_WaitOnFlagUntilTimeout>
 800102e:	b998      	cbnz	r0, 8001058 <HAL_UART_Transmit+0x7e>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001030:	2320      	movs	r3, #32
 8001032:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001036:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

    return HAL_OK;
 800103a:	e00e      	b.n	800105a <HAL_UART_Transmit+0x80>
      huart->TxXferCount--;
 800103c:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001040:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 8001042:	3b01      	subs	r3, #1
 8001044:	b29b      	uxth	r3, r3
 8001046:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800104a:	2200      	movs	r2, #0
 800104c:	4633      	mov	r3, r6
 800104e:	2180      	movs	r1, #128	; 0x80
 8001050:	4620      	mov	r0, r4
 8001052:	f7ff ff39 	bl	8000ec8 <UART_WaitOnFlagUntilTimeout>
 8001056:	b110      	cbz	r0, 800105e <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8001058:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800105a:	b003      	add	sp, #12
 800105c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800105e:	68a3      	ldr	r3, [r4, #8]
 8001060:	6822      	ldr	r2, [r4, #0]
 8001062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001066:	d107      	bne.n	8001078 <HAL_UART_Transmit+0x9e>
 8001068:	6923      	ldr	r3, [r4, #16]
 800106a:	b92b      	cbnz	r3, 8001078 <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800106c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001074:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 8001076:	e7d0      	b.n	800101a <HAL_UART_Transmit+0x40>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001078:	782b      	ldrb	r3, [r5, #0]
 800107a:	8513      	strh	r3, [r2, #40]	; 0x28
 800107c:	3501      	adds	r5, #1
 800107e:	e7cc      	b.n	800101a <HAL_UART_Transmit+0x40>
      return  HAL_ERROR;
 8001080:	2001      	movs	r0, #1
 8001082:	e7ea      	b.n	800105a <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 8001084:	2002      	movs	r0, #2
 8001086:	e7e8      	b.n	800105a <HAL_UART_Transmit+0x80>

08001088 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001088:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800108a:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <_sbrk+0x2c>)
 800108c:	6819      	ldr	r1, [r3, #0]
{
 800108e:	4602      	mov	r2, r0
	if (heap_end == 0)
 8001090:	b909      	cbnz	r1, 8001096 <_sbrk+0xe>
		heap_end = &end;
 8001092:	4909      	ldr	r1, [pc, #36]	; (80010b8 <_sbrk+0x30>)
 8001094:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8001096:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8001098:	4669      	mov	r1, sp
 800109a:	4402      	add	r2, r0
 800109c:	428a      	cmp	r2, r1
 800109e:	d906      	bls.n	80010ae <_sbrk+0x26>
	{
		errno = ENOMEM;
 80010a0:	f000 f832 	bl	8001108 <__errno>
 80010a4:	230c      	movs	r3, #12
 80010a6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80010a8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ac:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80010ae:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80010b0:	bd08      	pop	{r3, pc}
 80010b2:	bf00      	nop
 80010b4:	200004dc 	.word	0x200004dc
 80010b8:	20000560 	.word	0x20000560

080010bc <Reset_Handler>:
 80010bc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80010be:	e003      	b.n	80010c8 <LoopCopyDataInit>

080010c0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80010c0:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <LoopForever+0x2>)
	ldr	r3, [r3, r1]
 80010c2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80010c4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80010c6:	3104      	adds	r1, #4

080010c8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80010c8:	480a      	ldr	r0, [pc, #40]	; (80010f4 <LoopForever+0x6>)
	ldr	r3, =_edata
 80010ca:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <LoopForever+0xa>)
	adds	r2, r0, r1
 80010cc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80010ce:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80010d0:	d3f6      	bcc.n	80010c0 <CopyDataInit>
	ldr	r2, =_sbss
 80010d2:	4a0a      	ldr	r2, [pc, #40]	; (80010fc <LoopForever+0xe>)
	b	LoopFillZerobss
 80010d4:	e002      	b.n	80010dc <LoopFillZerobss>

080010d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs r3, #0
 80010d6:	2300      	movs	r3, #0
 	str  r3, [r2]
 80010d8:	6013      	str	r3, [r2, #0]
	adds r2, r2, #4
 80010da:	3204      	adds	r2, #4

080010dc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <LoopForever+0x12>)
	cmp	r2, r3
 80010de:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80010e0:	d3f9      	bcc.n	80010d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010e2:	f3af 8000 	nop.w
/* Call static constructors */
    bl __libc_init_array
 80010e6:	f000 f815 	bl	8001114 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010ea:	f7ff f953 	bl	8000394 <main>

080010ee <LoopForever>:



LoopForever:
    b LoopForever
 80010ee:	e7fe      	b.n	80010ee <LoopForever>
 80010f0:	08001a40 	.word	0x08001a40
 80010f4:	20000000 	.word	0x20000000
 80010f8:	200004b8 	.word	0x200004b8
 80010fc:	200004b8 	.word	0x200004b8
 8001100:	2000055c 	.word	0x2000055c

08001104 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001104:	e7fe      	b.n	8001104 <BusFault_Handler>
 8001106:	0000      	movs	r0, r0

08001108 <__errno>:
 8001108:	4b01      	ldr	r3, [pc, #4]	; (8001110 <__errno+0x8>)
 800110a:	6818      	ldr	r0, [r3, #0]
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	20000454 	.word	0x20000454

08001114 <__libc_init_array>:
 8001114:	b570      	push	{r4, r5, r6, lr}
 8001116:	4e0d      	ldr	r6, [pc, #52]	; (800114c <__libc_init_array+0x38>)
 8001118:	4c0d      	ldr	r4, [pc, #52]	; (8001150 <__libc_init_array+0x3c>)
 800111a:	1ba4      	subs	r4, r4, r6
 800111c:	10a4      	asrs	r4, r4, #2
 800111e:	2500      	movs	r5, #0
 8001120:	42a5      	cmp	r5, r4
 8001122:	d109      	bne.n	8001138 <__libc_init_array+0x24>
 8001124:	4e0b      	ldr	r6, [pc, #44]	; (8001154 <__libc_init_array+0x40>)
 8001126:	4c0c      	ldr	r4, [pc, #48]	; (8001158 <__libc_init_array+0x44>)
 8001128:	f000 fc46 	bl	80019b8 <_init>
 800112c:	1ba4      	subs	r4, r4, r6
 800112e:	10a4      	asrs	r4, r4, #2
 8001130:	2500      	movs	r5, #0
 8001132:	42a5      	cmp	r5, r4
 8001134:	d105      	bne.n	8001142 <__libc_init_array+0x2e>
 8001136:	bd70      	pop	{r4, r5, r6, pc}
 8001138:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800113c:	4798      	blx	r3
 800113e:	3501      	adds	r5, #1
 8001140:	e7ee      	b.n	8001120 <__libc_init_array+0xc>
 8001142:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001146:	4798      	blx	r3
 8001148:	3501      	adds	r5, #1
 800114a:	e7f2      	b.n	8001132 <__libc_init_array+0x1e>
 800114c:	08001a38 	.word	0x08001a38
 8001150:	08001a38 	.word	0x08001a38
 8001154:	08001a38 	.word	0x08001a38
 8001158:	08001a3c 	.word	0x08001a3c

0800115c <sniprintf>:
 800115c:	b40c      	push	{r2, r3}
 800115e:	b530      	push	{r4, r5, lr}
 8001160:	4b17      	ldr	r3, [pc, #92]	; (80011c0 <sniprintf+0x64>)
 8001162:	1e0c      	subs	r4, r1, #0
 8001164:	b09d      	sub	sp, #116	; 0x74
 8001166:	681d      	ldr	r5, [r3, #0]
 8001168:	da08      	bge.n	800117c <sniprintf+0x20>
 800116a:	238b      	movs	r3, #139	; 0x8b
 800116c:	602b      	str	r3, [r5, #0]
 800116e:	f04f 30ff 	mov.w	r0, #4294967295
 8001172:	b01d      	add	sp, #116	; 0x74
 8001174:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001178:	b002      	add	sp, #8
 800117a:	4770      	bx	lr
 800117c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8001180:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001184:	bf14      	ite	ne
 8001186:	f104 33ff 	addne.w	r3, r4, #4294967295
 800118a:	4623      	moveq	r3, r4
 800118c:	9304      	str	r3, [sp, #16]
 800118e:	9307      	str	r3, [sp, #28]
 8001190:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001194:	9002      	str	r0, [sp, #8]
 8001196:	9006      	str	r0, [sp, #24]
 8001198:	f8ad 3016 	strh.w	r3, [sp, #22]
 800119c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800119e:	ab21      	add	r3, sp, #132	; 0x84
 80011a0:	a902      	add	r1, sp, #8
 80011a2:	4628      	mov	r0, r5
 80011a4:	9301      	str	r3, [sp, #4]
 80011a6:	f000 f869 	bl	800127c <_svfiprintf_r>
 80011aa:	1c43      	adds	r3, r0, #1
 80011ac:	bfbc      	itt	lt
 80011ae:	238b      	movlt	r3, #139	; 0x8b
 80011b0:	602b      	strlt	r3, [r5, #0]
 80011b2:	2c00      	cmp	r4, #0
 80011b4:	d0dd      	beq.n	8001172 <sniprintf+0x16>
 80011b6:	9b02      	ldr	r3, [sp, #8]
 80011b8:	2200      	movs	r2, #0
 80011ba:	701a      	strb	r2, [r3, #0]
 80011bc:	e7d9      	b.n	8001172 <sniprintf+0x16>
 80011be:	bf00      	nop
 80011c0:	20000454 	.word	0x20000454

080011c4 <__ssputs_r>:
 80011c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011c8:	688e      	ldr	r6, [r1, #8]
 80011ca:	429e      	cmp	r6, r3
 80011cc:	4682      	mov	sl, r0
 80011ce:	460c      	mov	r4, r1
 80011d0:	4691      	mov	r9, r2
 80011d2:	4698      	mov	r8, r3
 80011d4:	d835      	bhi.n	8001242 <__ssputs_r+0x7e>
 80011d6:	898a      	ldrh	r2, [r1, #12]
 80011d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80011dc:	d031      	beq.n	8001242 <__ssputs_r+0x7e>
 80011de:	6825      	ldr	r5, [r4, #0]
 80011e0:	6909      	ldr	r1, [r1, #16]
 80011e2:	1a6f      	subs	r7, r5, r1
 80011e4:	6965      	ldr	r5, [r4, #20]
 80011e6:	2302      	movs	r3, #2
 80011e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80011ec:	fb95 f5f3 	sdiv	r5, r5, r3
 80011f0:	f108 0301 	add.w	r3, r8, #1
 80011f4:	443b      	add	r3, r7
 80011f6:	429d      	cmp	r5, r3
 80011f8:	bf38      	it	cc
 80011fa:	461d      	movcc	r5, r3
 80011fc:	0553      	lsls	r3, r2, #21
 80011fe:	d531      	bpl.n	8001264 <__ssputs_r+0xa0>
 8001200:	4629      	mov	r1, r5
 8001202:	f000 fb39 	bl	8001878 <_malloc_r>
 8001206:	4606      	mov	r6, r0
 8001208:	b950      	cbnz	r0, 8001220 <__ssputs_r+0x5c>
 800120a:	230c      	movs	r3, #12
 800120c:	f8ca 3000 	str.w	r3, [sl]
 8001210:	89a3      	ldrh	r3, [r4, #12]
 8001212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001216:	81a3      	strh	r3, [r4, #12]
 8001218:	f04f 30ff 	mov.w	r0, #4294967295
 800121c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001220:	463a      	mov	r2, r7
 8001222:	6921      	ldr	r1, [r4, #16]
 8001224:	f000 fab4 	bl	8001790 <memcpy>
 8001228:	89a3      	ldrh	r3, [r4, #12]
 800122a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800122e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001232:	81a3      	strh	r3, [r4, #12]
 8001234:	6126      	str	r6, [r4, #16]
 8001236:	6165      	str	r5, [r4, #20]
 8001238:	443e      	add	r6, r7
 800123a:	1bed      	subs	r5, r5, r7
 800123c:	6026      	str	r6, [r4, #0]
 800123e:	60a5      	str	r5, [r4, #8]
 8001240:	4646      	mov	r6, r8
 8001242:	4546      	cmp	r6, r8
 8001244:	bf28      	it	cs
 8001246:	4646      	movcs	r6, r8
 8001248:	4632      	mov	r2, r6
 800124a:	4649      	mov	r1, r9
 800124c:	6820      	ldr	r0, [r4, #0]
 800124e:	f000 faaa 	bl	80017a6 <memmove>
 8001252:	68a3      	ldr	r3, [r4, #8]
 8001254:	1b9b      	subs	r3, r3, r6
 8001256:	60a3      	str	r3, [r4, #8]
 8001258:	6823      	ldr	r3, [r4, #0]
 800125a:	441e      	add	r6, r3
 800125c:	6026      	str	r6, [r4, #0]
 800125e:	2000      	movs	r0, #0
 8001260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001264:	462a      	mov	r2, r5
 8001266:	f000 fb65 	bl	8001934 <_realloc_r>
 800126a:	4606      	mov	r6, r0
 800126c:	2800      	cmp	r0, #0
 800126e:	d1e1      	bne.n	8001234 <__ssputs_r+0x70>
 8001270:	6921      	ldr	r1, [r4, #16]
 8001272:	4650      	mov	r0, sl
 8001274:	f000 fab2 	bl	80017dc <_free_r>
 8001278:	e7c7      	b.n	800120a <__ssputs_r+0x46>
 800127a:	0000      	movs	r0, r0

0800127c <_svfiprintf_r>:
 800127c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001280:	b09d      	sub	sp, #116	; 0x74
 8001282:	4680      	mov	r8, r0
 8001284:	9303      	str	r3, [sp, #12]
 8001286:	898b      	ldrh	r3, [r1, #12]
 8001288:	061c      	lsls	r4, r3, #24
 800128a:	460d      	mov	r5, r1
 800128c:	4616      	mov	r6, r2
 800128e:	d50f      	bpl.n	80012b0 <_svfiprintf_r+0x34>
 8001290:	690b      	ldr	r3, [r1, #16]
 8001292:	b96b      	cbnz	r3, 80012b0 <_svfiprintf_r+0x34>
 8001294:	2140      	movs	r1, #64	; 0x40
 8001296:	f000 faef 	bl	8001878 <_malloc_r>
 800129a:	6028      	str	r0, [r5, #0]
 800129c:	6128      	str	r0, [r5, #16]
 800129e:	b928      	cbnz	r0, 80012ac <_svfiprintf_r+0x30>
 80012a0:	230c      	movs	r3, #12
 80012a2:	f8c8 3000 	str.w	r3, [r8]
 80012a6:	f04f 30ff 	mov.w	r0, #4294967295
 80012aa:	e0c5      	b.n	8001438 <_svfiprintf_r+0x1bc>
 80012ac:	2340      	movs	r3, #64	; 0x40
 80012ae:	616b      	str	r3, [r5, #20]
 80012b0:	2300      	movs	r3, #0
 80012b2:	9309      	str	r3, [sp, #36]	; 0x24
 80012b4:	2320      	movs	r3, #32
 80012b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80012ba:	2330      	movs	r3, #48	; 0x30
 80012bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80012c0:	f04f 0b01 	mov.w	fp, #1
 80012c4:	4637      	mov	r7, r6
 80012c6:	463c      	mov	r4, r7
 80012c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d13c      	bne.n	800134a <_svfiprintf_r+0xce>
 80012d0:	ebb7 0a06 	subs.w	sl, r7, r6
 80012d4:	d00b      	beq.n	80012ee <_svfiprintf_r+0x72>
 80012d6:	4653      	mov	r3, sl
 80012d8:	4632      	mov	r2, r6
 80012da:	4629      	mov	r1, r5
 80012dc:	4640      	mov	r0, r8
 80012de:	f7ff ff71 	bl	80011c4 <__ssputs_r>
 80012e2:	3001      	adds	r0, #1
 80012e4:	f000 80a3 	beq.w	800142e <_svfiprintf_r+0x1b2>
 80012e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80012ea:	4453      	add	r3, sl
 80012ec:	9309      	str	r3, [sp, #36]	; 0x24
 80012ee:	783b      	ldrb	r3, [r7, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f000 809c 	beq.w	800142e <_svfiprintf_r+0x1b2>
 80012f6:	2300      	movs	r3, #0
 80012f8:	f04f 32ff 	mov.w	r2, #4294967295
 80012fc:	9304      	str	r3, [sp, #16]
 80012fe:	9307      	str	r3, [sp, #28]
 8001300:	9205      	str	r2, [sp, #20]
 8001302:	9306      	str	r3, [sp, #24]
 8001304:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001308:	931a      	str	r3, [sp, #104]	; 0x68
 800130a:	2205      	movs	r2, #5
 800130c:	7821      	ldrb	r1, [r4, #0]
 800130e:	4850      	ldr	r0, [pc, #320]	; (8001450 <_svfiprintf_r+0x1d4>)
 8001310:	f7fe ff76 	bl	8000200 <memchr>
 8001314:	1c67      	adds	r7, r4, #1
 8001316:	9b04      	ldr	r3, [sp, #16]
 8001318:	b9d8      	cbnz	r0, 8001352 <_svfiprintf_r+0xd6>
 800131a:	06d9      	lsls	r1, r3, #27
 800131c:	bf44      	itt	mi
 800131e:	2220      	movmi	r2, #32
 8001320:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001324:	071a      	lsls	r2, r3, #28
 8001326:	bf44      	itt	mi
 8001328:	222b      	movmi	r2, #43	; 0x2b
 800132a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800132e:	7822      	ldrb	r2, [r4, #0]
 8001330:	2a2a      	cmp	r2, #42	; 0x2a
 8001332:	d016      	beq.n	8001362 <_svfiprintf_r+0xe6>
 8001334:	9a07      	ldr	r2, [sp, #28]
 8001336:	2100      	movs	r1, #0
 8001338:	200a      	movs	r0, #10
 800133a:	4627      	mov	r7, r4
 800133c:	3401      	adds	r4, #1
 800133e:	783b      	ldrb	r3, [r7, #0]
 8001340:	3b30      	subs	r3, #48	; 0x30
 8001342:	2b09      	cmp	r3, #9
 8001344:	d951      	bls.n	80013ea <_svfiprintf_r+0x16e>
 8001346:	b1c9      	cbz	r1, 800137c <_svfiprintf_r+0x100>
 8001348:	e011      	b.n	800136e <_svfiprintf_r+0xf2>
 800134a:	2b25      	cmp	r3, #37	; 0x25
 800134c:	d0c0      	beq.n	80012d0 <_svfiprintf_r+0x54>
 800134e:	4627      	mov	r7, r4
 8001350:	e7b9      	b.n	80012c6 <_svfiprintf_r+0x4a>
 8001352:	4a3f      	ldr	r2, [pc, #252]	; (8001450 <_svfiprintf_r+0x1d4>)
 8001354:	1a80      	subs	r0, r0, r2
 8001356:	fa0b f000 	lsl.w	r0, fp, r0
 800135a:	4318      	orrs	r0, r3
 800135c:	9004      	str	r0, [sp, #16]
 800135e:	463c      	mov	r4, r7
 8001360:	e7d3      	b.n	800130a <_svfiprintf_r+0x8e>
 8001362:	9a03      	ldr	r2, [sp, #12]
 8001364:	1d11      	adds	r1, r2, #4
 8001366:	6812      	ldr	r2, [r2, #0]
 8001368:	9103      	str	r1, [sp, #12]
 800136a:	2a00      	cmp	r2, #0
 800136c:	db01      	blt.n	8001372 <_svfiprintf_r+0xf6>
 800136e:	9207      	str	r2, [sp, #28]
 8001370:	e004      	b.n	800137c <_svfiprintf_r+0x100>
 8001372:	4252      	negs	r2, r2
 8001374:	f043 0302 	orr.w	r3, r3, #2
 8001378:	9207      	str	r2, [sp, #28]
 800137a:	9304      	str	r3, [sp, #16]
 800137c:	783b      	ldrb	r3, [r7, #0]
 800137e:	2b2e      	cmp	r3, #46	; 0x2e
 8001380:	d10e      	bne.n	80013a0 <_svfiprintf_r+0x124>
 8001382:	787b      	ldrb	r3, [r7, #1]
 8001384:	2b2a      	cmp	r3, #42	; 0x2a
 8001386:	f107 0101 	add.w	r1, r7, #1
 800138a:	d132      	bne.n	80013f2 <_svfiprintf_r+0x176>
 800138c:	9b03      	ldr	r3, [sp, #12]
 800138e:	1d1a      	adds	r2, r3, #4
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	9203      	str	r2, [sp, #12]
 8001394:	2b00      	cmp	r3, #0
 8001396:	bfb8      	it	lt
 8001398:	f04f 33ff 	movlt.w	r3, #4294967295
 800139c:	3702      	adds	r7, #2
 800139e:	9305      	str	r3, [sp, #20]
 80013a0:	4c2c      	ldr	r4, [pc, #176]	; (8001454 <_svfiprintf_r+0x1d8>)
 80013a2:	7839      	ldrb	r1, [r7, #0]
 80013a4:	2203      	movs	r2, #3
 80013a6:	4620      	mov	r0, r4
 80013a8:	f7fe ff2a 	bl	8000200 <memchr>
 80013ac:	b138      	cbz	r0, 80013be <_svfiprintf_r+0x142>
 80013ae:	2340      	movs	r3, #64	; 0x40
 80013b0:	1b00      	subs	r0, r0, r4
 80013b2:	fa03 f000 	lsl.w	r0, r3, r0
 80013b6:	9b04      	ldr	r3, [sp, #16]
 80013b8:	4303      	orrs	r3, r0
 80013ba:	9304      	str	r3, [sp, #16]
 80013bc:	3701      	adds	r7, #1
 80013be:	7839      	ldrb	r1, [r7, #0]
 80013c0:	4825      	ldr	r0, [pc, #148]	; (8001458 <_svfiprintf_r+0x1dc>)
 80013c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80013c6:	2206      	movs	r2, #6
 80013c8:	1c7e      	adds	r6, r7, #1
 80013ca:	f7fe ff19 	bl	8000200 <memchr>
 80013ce:	2800      	cmp	r0, #0
 80013d0:	d035      	beq.n	800143e <_svfiprintf_r+0x1c2>
 80013d2:	4b22      	ldr	r3, [pc, #136]	; (800145c <_svfiprintf_r+0x1e0>)
 80013d4:	b9fb      	cbnz	r3, 8001416 <_svfiprintf_r+0x19a>
 80013d6:	9b03      	ldr	r3, [sp, #12]
 80013d8:	3307      	adds	r3, #7
 80013da:	f023 0307 	bic.w	r3, r3, #7
 80013de:	3308      	adds	r3, #8
 80013e0:	9303      	str	r3, [sp, #12]
 80013e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80013e4:	444b      	add	r3, r9
 80013e6:	9309      	str	r3, [sp, #36]	; 0x24
 80013e8:	e76c      	b.n	80012c4 <_svfiprintf_r+0x48>
 80013ea:	fb00 3202 	mla	r2, r0, r2, r3
 80013ee:	2101      	movs	r1, #1
 80013f0:	e7a3      	b.n	800133a <_svfiprintf_r+0xbe>
 80013f2:	2300      	movs	r3, #0
 80013f4:	9305      	str	r3, [sp, #20]
 80013f6:	4618      	mov	r0, r3
 80013f8:	240a      	movs	r4, #10
 80013fa:	460f      	mov	r7, r1
 80013fc:	3101      	adds	r1, #1
 80013fe:	783a      	ldrb	r2, [r7, #0]
 8001400:	3a30      	subs	r2, #48	; 0x30
 8001402:	2a09      	cmp	r2, #9
 8001404:	d903      	bls.n	800140e <_svfiprintf_r+0x192>
 8001406:	2b00      	cmp	r3, #0
 8001408:	d0ca      	beq.n	80013a0 <_svfiprintf_r+0x124>
 800140a:	9005      	str	r0, [sp, #20]
 800140c:	e7c8      	b.n	80013a0 <_svfiprintf_r+0x124>
 800140e:	fb04 2000 	mla	r0, r4, r0, r2
 8001412:	2301      	movs	r3, #1
 8001414:	e7f1      	b.n	80013fa <_svfiprintf_r+0x17e>
 8001416:	ab03      	add	r3, sp, #12
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	462a      	mov	r2, r5
 800141c:	4b10      	ldr	r3, [pc, #64]	; (8001460 <_svfiprintf_r+0x1e4>)
 800141e:	a904      	add	r1, sp, #16
 8001420:	4640      	mov	r0, r8
 8001422:	f3af 8000 	nop.w
 8001426:	f1b0 3fff 	cmp.w	r0, #4294967295
 800142a:	4681      	mov	r9, r0
 800142c:	d1d9      	bne.n	80013e2 <_svfiprintf_r+0x166>
 800142e:	89ab      	ldrh	r3, [r5, #12]
 8001430:	065b      	lsls	r3, r3, #25
 8001432:	f53f af38 	bmi.w	80012a6 <_svfiprintf_r+0x2a>
 8001436:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001438:	b01d      	add	sp, #116	; 0x74
 800143a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800143e:	ab03      	add	r3, sp, #12
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	462a      	mov	r2, r5
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <_svfiprintf_r+0x1e4>)
 8001446:	a904      	add	r1, sp, #16
 8001448:	4640      	mov	r0, r8
 800144a:	f000 f881 	bl	8001550 <_printf_i>
 800144e:	e7ea      	b.n	8001426 <_svfiprintf_r+0x1aa>
 8001450:	08001a04 	.word	0x08001a04
 8001454:	08001a0a 	.word	0x08001a0a
 8001458:	08001a0e 	.word	0x08001a0e
 800145c:	00000000 	.word	0x00000000
 8001460:	080011c5 	.word	0x080011c5

08001464 <_printf_common>:
 8001464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001468:	4691      	mov	r9, r2
 800146a:	461f      	mov	r7, r3
 800146c:	688a      	ldr	r2, [r1, #8]
 800146e:	690b      	ldr	r3, [r1, #16]
 8001470:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001474:	4293      	cmp	r3, r2
 8001476:	bfb8      	it	lt
 8001478:	4613      	movlt	r3, r2
 800147a:	f8c9 3000 	str.w	r3, [r9]
 800147e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001482:	4606      	mov	r6, r0
 8001484:	460c      	mov	r4, r1
 8001486:	b112      	cbz	r2, 800148e <_printf_common+0x2a>
 8001488:	3301      	adds	r3, #1
 800148a:	f8c9 3000 	str.w	r3, [r9]
 800148e:	6823      	ldr	r3, [r4, #0]
 8001490:	0699      	lsls	r1, r3, #26
 8001492:	bf42      	ittt	mi
 8001494:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001498:	3302      	addmi	r3, #2
 800149a:	f8c9 3000 	strmi.w	r3, [r9]
 800149e:	6825      	ldr	r5, [r4, #0]
 80014a0:	f015 0506 	ands.w	r5, r5, #6
 80014a4:	d107      	bne.n	80014b6 <_printf_common+0x52>
 80014a6:	f104 0a19 	add.w	sl, r4, #25
 80014aa:	68e3      	ldr	r3, [r4, #12]
 80014ac:	f8d9 2000 	ldr.w	r2, [r9]
 80014b0:	1a9b      	subs	r3, r3, r2
 80014b2:	429d      	cmp	r5, r3
 80014b4:	db29      	blt.n	800150a <_printf_common+0xa6>
 80014b6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80014ba:	6822      	ldr	r2, [r4, #0]
 80014bc:	3300      	adds	r3, #0
 80014be:	bf18      	it	ne
 80014c0:	2301      	movne	r3, #1
 80014c2:	0692      	lsls	r2, r2, #26
 80014c4:	d42e      	bmi.n	8001524 <_printf_common+0xc0>
 80014c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80014ca:	4639      	mov	r1, r7
 80014cc:	4630      	mov	r0, r6
 80014ce:	47c0      	blx	r8
 80014d0:	3001      	adds	r0, #1
 80014d2:	d021      	beq.n	8001518 <_printf_common+0xb4>
 80014d4:	6823      	ldr	r3, [r4, #0]
 80014d6:	68e5      	ldr	r5, [r4, #12]
 80014d8:	f8d9 2000 	ldr.w	r2, [r9]
 80014dc:	f003 0306 	and.w	r3, r3, #6
 80014e0:	2b04      	cmp	r3, #4
 80014e2:	bf08      	it	eq
 80014e4:	1aad      	subeq	r5, r5, r2
 80014e6:	68a3      	ldr	r3, [r4, #8]
 80014e8:	6922      	ldr	r2, [r4, #16]
 80014ea:	bf0c      	ite	eq
 80014ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80014f0:	2500      	movne	r5, #0
 80014f2:	4293      	cmp	r3, r2
 80014f4:	bfc4      	itt	gt
 80014f6:	1a9b      	subgt	r3, r3, r2
 80014f8:	18ed      	addgt	r5, r5, r3
 80014fa:	f04f 0900 	mov.w	r9, #0
 80014fe:	341a      	adds	r4, #26
 8001500:	454d      	cmp	r5, r9
 8001502:	d11b      	bne.n	800153c <_printf_common+0xd8>
 8001504:	2000      	movs	r0, #0
 8001506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800150a:	2301      	movs	r3, #1
 800150c:	4652      	mov	r2, sl
 800150e:	4639      	mov	r1, r7
 8001510:	4630      	mov	r0, r6
 8001512:	47c0      	blx	r8
 8001514:	3001      	adds	r0, #1
 8001516:	d103      	bne.n	8001520 <_printf_common+0xbc>
 8001518:	f04f 30ff 	mov.w	r0, #4294967295
 800151c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001520:	3501      	adds	r5, #1
 8001522:	e7c2      	b.n	80014aa <_printf_common+0x46>
 8001524:	18e1      	adds	r1, r4, r3
 8001526:	1c5a      	adds	r2, r3, #1
 8001528:	2030      	movs	r0, #48	; 0x30
 800152a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800152e:	4422      	add	r2, r4
 8001530:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001534:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001538:	3302      	adds	r3, #2
 800153a:	e7c4      	b.n	80014c6 <_printf_common+0x62>
 800153c:	2301      	movs	r3, #1
 800153e:	4622      	mov	r2, r4
 8001540:	4639      	mov	r1, r7
 8001542:	4630      	mov	r0, r6
 8001544:	47c0      	blx	r8
 8001546:	3001      	adds	r0, #1
 8001548:	d0e6      	beq.n	8001518 <_printf_common+0xb4>
 800154a:	f109 0901 	add.w	r9, r9, #1
 800154e:	e7d7      	b.n	8001500 <_printf_common+0x9c>

08001550 <_printf_i>:
 8001550:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001554:	4617      	mov	r7, r2
 8001556:	7e0a      	ldrb	r2, [r1, #24]
 8001558:	b085      	sub	sp, #20
 800155a:	2a6e      	cmp	r2, #110	; 0x6e
 800155c:	4698      	mov	r8, r3
 800155e:	4606      	mov	r6, r0
 8001560:	460c      	mov	r4, r1
 8001562:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001564:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8001568:	f000 80bc 	beq.w	80016e4 <_printf_i+0x194>
 800156c:	d81a      	bhi.n	80015a4 <_printf_i+0x54>
 800156e:	2a63      	cmp	r2, #99	; 0x63
 8001570:	d02e      	beq.n	80015d0 <_printf_i+0x80>
 8001572:	d80a      	bhi.n	800158a <_printf_i+0x3a>
 8001574:	2a00      	cmp	r2, #0
 8001576:	f000 80c8 	beq.w	800170a <_printf_i+0x1ba>
 800157a:	2a58      	cmp	r2, #88	; 0x58
 800157c:	f000 808a 	beq.w	8001694 <_printf_i+0x144>
 8001580:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001584:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001588:	e02a      	b.n	80015e0 <_printf_i+0x90>
 800158a:	2a64      	cmp	r2, #100	; 0x64
 800158c:	d001      	beq.n	8001592 <_printf_i+0x42>
 800158e:	2a69      	cmp	r2, #105	; 0x69
 8001590:	d1f6      	bne.n	8001580 <_printf_i+0x30>
 8001592:	6821      	ldr	r1, [r4, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	f011 0f80 	tst.w	r1, #128	; 0x80
 800159a:	d023      	beq.n	80015e4 <_printf_i+0x94>
 800159c:	1d11      	adds	r1, r2, #4
 800159e:	6019      	str	r1, [r3, #0]
 80015a0:	6813      	ldr	r3, [r2, #0]
 80015a2:	e027      	b.n	80015f4 <_printf_i+0xa4>
 80015a4:	2a73      	cmp	r2, #115	; 0x73
 80015a6:	f000 80b4 	beq.w	8001712 <_printf_i+0x1c2>
 80015aa:	d808      	bhi.n	80015be <_printf_i+0x6e>
 80015ac:	2a6f      	cmp	r2, #111	; 0x6f
 80015ae:	d02a      	beq.n	8001606 <_printf_i+0xb6>
 80015b0:	2a70      	cmp	r2, #112	; 0x70
 80015b2:	d1e5      	bne.n	8001580 <_printf_i+0x30>
 80015b4:	680a      	ldr	r2, [r1, #0]
 80015b6:	f042 0220 	orr.w	r2, r2, #32
 80015ba:	600a      	str	r2, [r1, #0]
 80015bc:	e003      	b.n	80015c6 <_printf_i+0x76>
 80015be:	2a75      	cmp	r2, #117	; 0x75
 80015c0:	d021      	beq.n	8001606 <_printf_i+0xb6>
 80015c2:	2a78      	cmp	r2, #120	; 0x78
 80015c4:	d1dc      	bne.n	8001580 <_printf_i+0x30>
 80015c6:	2278      	movs	r2, #120	; 0x78
 80015c8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80015cc:	496e      	ldr	r1, [pc, #440]	; (8001788 <_printf_i+0x238>)
 80015ce:	e064      	b.n	800169a <_printf_i+0x14a>
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80015d6:	1d11      	adds	r1, r2, #4
 80015d8:	6019      	str	r1, [r3, #0]
 80015da:	6813      	ldr	r3, [r2, #0]
 80015dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80015e0:	2301      	movs	r3, #1
 80015e2:	e0a3      	b.n	800172c <_printf_i+0x1dc>
 80015e4:	f011 0f40 	tst.w	r1, #64	; 0x40
 80015e8:	f102 0104 	add.w	r1, r2, #4
 80015ec:	6019      	str	r1, [r3, #0]
 80015ee:	d0d7      	beq.n	80015a0 <_printf_i+0x50>
 80015f0:	f9b2 3000 	ldrsh.w	r3, [r2]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	da03      	bge.n	8001600 <_printf_i+0xb0>
 80015f8:	222d      	movs	r2, #45	; 0x2d
 80015fa:	425b      	negs	r3, r3
 80015fc:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001600:	4962      	ldr	r1, [pc, #392]	; (800178c <_printf_i+0x23c>)
 8001602:	220a      	movs	r2, #10
 8001604:	e017      	b.n	8001636 <_printf_i+0xe6>
 8001606:	6820      	ldr	r0, [r4, #0]
 8001608:	6819      	ldr	r1, [r3, #0]
 800160a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800160e:	d003      	beq.n	8001618 <_printf_i+0xc8>
 8001610:	1d08      	adds	r0, r1, #4
 8001612:	6018      	str	r0, [r3, #0]
 8001614:	680b      	ldr	r3, [r1, #0]
 8001616:	e006      	b.n	8001626 <_printf_i+0xd6>
 8001618:	f010 0f40 	tst.w	r0, #64	; 0x40
 800161c:	f101 0004 	add.w	r0, r1, #4
 8001620:	6018      	str	r0, [r3, #0]
 8001622:	d0f7      	beq.n	8001614 <_printf_i+0xc4>
 8001624:	880b      	ldrh	r3, [r1, #0]
 8001626:	4959      	ldr	r1, [pc, #356]	; (800178c <_printf_i+0x23c>)
 8001628:	2a6f      	cmp	r2, #111	; 0x6f
 800162a:	bf14      	ite	ne
 800162c:	220a      	movne	r2, #10
 800162e:	2208      	moveq	r2, #8
 8001630:	2000      	movs	r0, #0
 8001632:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8001636:	6865      	ldr	r5, [r4, #4]
 8001638:	60a5      	str	r5, [r4, #8]
 800163a:	2d00      	cmp	r5, #0
 800163c:	f2c0 809c 	blt.w	8001778 <_printf_i+0x228>
 8001640:	6820      	ldr	r0, [r4, #0]
 8001642:	f020 0004 	bic.w	r0, r0, #4
 8001646:	6020      	str	r0, [r4, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d13f      	bne.n	80016cc <_printf_i+0x17c>
 800164c:	2d00      	cmp	r5, #0
 800164e:	f040 8095 	bne.w	800177c <_printf_i+0x22c>
 8001652:	4675      	mov	r5, lr
 8001654:	2a08      	cmp	r2, #8
 8001656:	d10b      	bne.n	8001670 <_printf_i+0x120>
 8001658:	6823      	ldr	r3, [r4, #0]
 800165a:	07da      	lsls	r2, r3, #31
 800165c:	d508      	bpl.n	8001670 <_printf_i+0x120>
 800165e:	6923      	ldr	r3, [r4, #16]
 8001660:	6862      	ldr	r2, [r4, #4]
 8001662:	429a      	cmp	r2, r3
 8001664:	bfde      	ittt	le
 8001666:	2330      	movle	r3, #48	; 0x30
 8001668:	f805 3c01 	strble.w	r3, [r5, #-1]
 800166c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001670:	ebae 0305 	sub.w	r3, lr, r5
 8001674:	6123      	str	r3, [r4, #16]
 8001676:	f8cd 8000 	str.w	r8, [sp]
 800167a:	463b      	mov	r3, r7
 800167c:	aa03      	add	r2, sp, #12
 800167e:	4621      	mov	r1, r4
 8001680:	4630      	mov	r0, r6
 8001682:	f7ff feef 	bl	8001464 <_printf_common>
 8001686:	3001      	adds	r0, #1
 8001688:	d155      	bne.n	8001736 <_printf_i+0x1e6>
 800168a:	f04f 30ff 	mov.w	r0, #4294967295
 800168e:	b005      	add	sp, #20
 8001690:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001694:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8001698:	493c      	ldr	r1, [pc, #240]	; (800178c <_printf_i+0x23c>)
 800169a:	6822      	ldr	r2, [r4, #0]
 800169c:	6818      	ldr	r0, [r3, #0]
 800169e:	f012 0f80 	tst.w	r2, #128	; 0x80
 80016a2:	f100 0504 	add.w	r5, r0, #4
 80016a6:	601d      	str	r5, [r3, #0]
 80016a8:	d001      	beq.n	80016ae <_printf_i+0x15e>
 80016aa:	6803      	ldr	r3, [r0, #0]
 80016ac:	e002      	b.n	80016b4 <_printf_i+0x164>
 80016ae:	0655      	lsls	r5, r2, #25
 80016b0:	d5fb      	bpl.n	80016aa <_printf_i+0x15a>
 80016b2:	8803      	ldrh	r3, [r0, #0]
 80016b4:	07d0      	lsls	r0, r2, #31
 80016b6:	bf44      	itt	mi
 80016b8:	f042 0220 	orrmi.w	r2, r2, #32
 80016bc:	6022      	strmi	r2, [r4, #0]
 80016be:	b91b      	cbnz	r3, 80016c8 <_printf_i+0x178>
 80016c0:	6822      	ldr	r2, [r4, #0]
 80016c2:	f022 0220 	bic.w	r2, r2, #32
 80016c6:	6022      	str	r2, [r4, #0]
 80016c8:	2210      	movs	r2, #16
 80016ca:	e7b1      	b.n	8001630 <_printf_i+0xe0>
 80016cc:	4675      	mov	r5, lr
 80016ce:	fbb3 f0f2 	udiv	r0, r3, r2
 80016d2:	fb02 3310 	mls	r3, r2, r0, r3
 80016d6:	5ccb      	ldrb	r3, [r1, r3]
 80016d8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80016dc:	4603      	mov	r3, r0
 80016de:	2800      	cmp	r0, #0
 80016e0:	d1f5      	bne.n	80016ce <_printf_i+0x17e>
 80016e2:	e7b7      	b.n	8001654 <_printf_i+0x104>
 80016e4:	6808      	ldr	r0, [r1, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	6949      	ldr	r1, [r1, #20]
 80016ea:	f010 0f80 	tst.w	r0, #128	; 0x80
 80016ee:	d004      	beq.n	80016fa <_printf_i+0x1aa>
 80016f0:	1d10      	adds	r0, r2, #4
 80016f2:	6018      	str	r0, [r3, #0]
 80016f4:	6813      	ldr	r3, [r2, #0]
 80016f6:	6019      	str	r1, [r3, #0]
 80016f8:	e007      	b.n	800170a <_printf_i+0x1ba>
 80016fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80016fe:	f102 0004 	add.w	r0, r2, #4
 8001702:	6018      	str	r0, [r3, #0]
 8001704:	6813      	ldr	r3, [r2, #0]
 8001706:	d0f6      	beq.n	80016f6 <_printf_i+0x1a6>
 8001708:	8019      	strh	r1, [r3, #0]
 800170a:	2300      	movs	r3, #0
 800170c:	6123      	str	r3, [r4, #16]
 800170e:	4675      	mov	r5, lr
 8001710:	e7b1      	b.n	8001676 <_printf_i+0x126>
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	1d11      	adds	r1, r2, #4
 8001716:	6019      	str	r1, [r3, #0]
 8001718:	6815      	ldr	r5, [r2, #0]
 800171a:	6862      	ldr	r2, [r4, #4]
 800171c:	2100      	movs	r1, #0
 800171e:	4628      	mov	r0, r5
 8001720:	f7fe fd6e 	bl	8000200 <memchr>
 8001724:	b108      	cbz	r0, 800172a <_printf_i+0x1da>
 8001726:	1b40      	subs	r0, r0, r5
 8001728:	6060      	str	r0, [r4, #4]
 800172a:	6863      	ldr	r3, [r4, #4]
 800172c:	6123      	str	r3, [r4, #16]
 800172e:	2300      	movs	r3, #0
 8001730:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001734:	e79f      	b.n	8001676 <_printf_i+0x126>
 8001736:	6923      	ldr	r3, [r4, #16]
 8001738:	462a      	mov	r2, r5
 800173a:	4639      	mov	r1, r7
 800173c:	4630      	mov	r0, r6
 800173e:	47c0      	blx	r8
 8001740:	3001      	adds	r0, #1
 8001742:	d0a2      	beq.n	800168a <_printf_i+0x13a>
 8001744:	6823      	ldr	r3, [r4, #0]
 8001746:	079b      	lsls	r3, r3, #30
 8001748:	d507      	bpl.n	800175a <_printf_i+0x20a>
 800174a:	2500      	movs	r5, #0
 800174c:	f104 0919 	add.w	r9, r4, #25
 8001750:	68e3      	ldr	r3, [r4, #12]
 8001752:	9a03      	ldr	r2, [sp, #12]
 8001754:	1a9b      	subs	r3, r3, r2
 8001756:	429d      	cmp	r5, r3
 8001758:	db05      	blt.n	8001766 <_printf_i+0x216>
 800175a:	68e0      	ldr	r0, [r4, #12]
 800175c:	9b03      	ldr	r3, [sp, #12]
 800175e:	4298      	cmp	r0, r3
 8001760:	bfb8      	it	lt
 8001762:	4618      	movlt	r0, r3
 8001764:	e793      	b.n	800168e <_printf_i+0x13e>
 8001766:	2301      	movs	r3, #1
 8001768:	464a      	mov	r2, r9
 800176a:	4639      	mov	r1, r7
 800176c:	4630      	mov	r0, r6
 800176e:	47c0      	blx	r8
 8001770:	3001      	adds	r0, #1
 8001772:	d08a      	beq.n	800168a <_printf_i+0x13a>
 8001774:	3501      	adds	r5, #1
 8001776:	e7eb      	b.n	8001750 <_printf_i+0x200>
 8001778:	2b00      	cmp	r3, #0
 800177a:	d1a7      	bne.n	80016cc <_printf_i+0x17c>
 800177c:	780b      	ldrb	r3, [r1, #0]
 800177e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001782:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001786:	e765      	b.n	8001654 <_printf_i+0x104>
 8001788:	08001a26 	.word	0x08001a26
 800178c:	08001a15 	.word	0x08001a15

08001790 <memcpy>:
 8001790:	b510      	push	{r4, lr}
 8001792:	1e43      	subs	r3, r0, #1
 8001794:	440a      	add	r2, r1
 8001796:	4291      	cmp	r1, r2
 8001798:	d100      	bne.n	800179c <memcpy+0xc>
 800179a:	bd10      	pop	{r4, pc}
 800179c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80017a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80017a4:	e7f7      	b.n	8001796 <memcpy+0x6>

080017a6 <memmove>:
 80017a6:	4288      	cmp	r0, r1
 80017a8:	b510      	push	{r4, lr}
 80017aa:	eb01 0302 	add.w	r3, r1, r2
 80017ae:	d803      	bhi.n	80017b8 <memmove+0x12>
 80017b0:	1e42      	subs	r2, r0, #1
 80017b2:	4299      	cmp	r1, r3
 80017b4:	d10c      	bne.n	80017d0 <memmove+0x2a>
 80017b6:	bd10      	pop	{r4, pc}
 80017b8:	4298      	cmp	r0, r3
 80017ba:	d2f9      	bcs.n	80017b0 <memmove+0xa>
 80017bc:	1881      	adds	r1, r0, r2
 80017be:	1ad2      	subs	r2, r2, r3
 80017c0:	42d3      	cmn	r3, r2
 80017c2:	d100      	bne.n	80017c6 <memmove+0x20>
 80017c4:	bd10      	pop	{r4, pc}
 80017c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80017ca:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80017ce:	e7f7      	b.n	80017c0 <memmove+0x1a>
 80017d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80017d4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80017d8:	e7eb      	b.n	80017b2 <memmove+0xc>
 80017da:	0000      	movs	r0, r0

080017dc <_free_r>:
 80017dc:	b538      	push	{r3, r4, r5, lr}
 80017de:	4605      	mov	r5, r0
 80017e0:	2900      	cmp	r1, #0
 80017e2:	d045      	beq.n	8001870 <_free_r+0x94>
 80017e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80017e8:	1f0c      	subs	r4, r1, #4
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	bfb8      	it	lt
 80017ee:	18e4      	addlt	r4, r4, r3
 80017f0:	f000 f8d6 	bl	80019a0 <__malloc_lock>
 80017f4:	4a1f      	ldr	r2, [pc, #124]	; (8001874 <_free_r+0x98>)
 80017f6:	6813      	ldr	r3, [r2, #0]
 80017f8:	4610      	mov	r0, r2
 80017fa:	b933      	cbnz	r3, 800180a <_free_r+0x2e>
 80017fc:	6063      	str	r3, [r4, #4]
 80017fe:	6014      	str	r4, [r2, #0]
 8001800:	4628      	mov	r0, r5
 8001802:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001806:	f000 b8cc 	b.w	80019a2 <__malloc_unlock>
 800180a:	42a3      	cmp	r3, r4
 800180c:	d90c      	bls.n	8001828 <_free_r+0x4c>
 800180e:	6821      	ldr	r1, [r4, #0]
 8001810:	1862      	adds	r2, r4, r1
 8001812:	4293      	cmp	r3, r2
 8001814:	bf04      	itt	eq
 8001816:	681a      	ldreq	r2, [r3, #0]
 8001818:	685b      	ldreq	r3, [r3, #4]
 800181a:	6063      	str	r3, [r4, #4]
 800181c:	bf04      	itt	eq
 800181e:	1852      	addeq	r2, r2, r1
 8001820:	6022      	streq	r2, [r4, #0]
 8001822:	6004      	str	r4, [r0, #0]
 8001824:	e7ec      	b.n	8001800 <_free_r+0x24>
 8001826:	4613      	mov	r3, r2
 8001828:	685a      	ldr	r2, [r3, #4]
 800182a:	b10a      	cbz	r2, 8001830 <_free_r+0x54>
 800182c:	42a2      	cmp	r2, r4
 800182e:	d9fa      	bls.n	8001826 <_free_r+0x4a>
 8001830:	6819      	ldr	r1, [r3, #0]
 8001832:	1858      	adds	r0, r3, r1
 8001834:	42a0      	cmp	r0, r4
 8001836:	d10b      	bne.n	8001850 <_free_r+0x74>
 8001838:	6820      	ldr	r0, [r4, #0]
 800183a:	4401      	add	r1, r0
 800183c:	1858      	adds	r0, r3, r1
 800183e:	4282      	cmp	r2, r0
 8001840:	6019      	str	r1, [r3, #0]
 8001842:	d1dd      	bne.n	8001800 <_free_r+0x24>
 8001844:	6810      	ldr	r0, [r2, #0]
 8001846:	6852      	ldr	r2, [r2, #4]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	4401      	add	r1, r0
 800184c:	6019      	str	r1, [r3, #0]
 800184e:	e7d7      	b.n	8001800 <_free_r+0x24>
 8001850:	d902      	bls.n	8001858 <_free_r+0x7c>
 8001852:	230c      	movs	r3, #12
 8001854:	602b      	str	r3, [r5, #0]
 8001856:	e7d3      	b.n	8001800 <_free_r+0x24>
 8001858:	6820      	ldr	r0, [r4, #0]
 800185a:	1821      	adds	r1, r4, r0
 800185c:	428a      	cmp	r2, r1
 800185e:	bf04      	itt	eq
 8001860:	6811      	ldreq	r1, [r2, #0]
 8001862:	6852      	ldreq	r2, [r2, #4]
 8001864:	6062      	str	r2, [r4, #4]
 8001866:	bf04      	itt	eq
 8001868:	1809      	addeq	r1, r1, r0
 800186a:	6021      	streq	r1, [r4, #0]
 800186c:	605c      	str	r4, [r3, #4]
 800186e:	e7c7      	b.n	8001800 <_free_r+0x24>
 8001870:	bd38      	pop	{r3, r4, r5, pc}
 8001872:	bf00      	nop
 8001874:	200004e0 	.word	0x200004e0

08001878 <_malloc_r>:
 8001878:	b570      	push	{r4, r5, r6, lr}
 800187a:	1ccd      	adds	r5, r1, #3
 800187c:	f025 0503 	bic.w	r5, r5, #3
 8001880:	3508      	adds	r5, #8
 8001882:	2d0c      	cmp	r5, #12
 8001884:	bf38      	it	cc
 8001886:	250c      	movcc	r5, #12
 8001888:	2d00      	cmp	r5, #0
 800188a:	4606      	mov	r6, r0
 800188c:	db01      	blt.n	8001892 <_malloc_r+0x1a>
 800188e:	42a9      	cmp	r1, r5
 8001890:	d903      	bls.n	800189a <_malloc_r+0x22>
 8001892:	230c      	movs	r3, #12
 8001894:	6033      	str	r3, [r6, #0]
 8001896:	2000      	movs	r0, #0
 8001898:	bd70      	pop	{r4, r5, r6, pc}
 800189a:	f000 f881 	bl	80019a0 <__malloc_lock>
 800189e:	4a23      	ldr	r2, [pc, #140]	; (800192c <_malloc_r+0xb4>)
 80018a0:	6814      	ldr	r4, [r2, #0]
 80018a2:	4621      	mov	r1, r4
 80018a4:	b991      	cbnz	r1, 80018cc <_malloc_r+0x54>
 80018a6:	4c22      	ldr	r4, [pc, #136]	; (8001930 <_malloc_r+0xb8>)
 80018a8:	6823      	ldr	r3, [r4, #0]
 80018aa:	b91b      	cbnz	r3, 80018b4 <_malloc_r+0x3c>
 80018ac:	4630      	mov	r0, r6
 80018ae:	f000 f867 	bl	8001980 <_sbrk_r>
 80018b2:	6020      	str	r0, [r4, #0]
 80018b4:	4629      	mov	r1, r5
 80018b6:	4630      	mov	r0, r6
 80018b8:	f000 f862 	bl	8001980 <_sbrk_r>
 80018bc:	1c43      	adds	r3, r0, #1
 80018be:	d126      	bne.n	800190e <_malloc_r+0x96>
 80018c0:	230c      	movs	r3, #12
 80018c2:	6033      	str	r3, [r6, #0]
 80018c4:	4630      	mov	r0, r6
 80018c6:	f000 f86c 	bl	80019a2 <__malloc_unlock>
 80018ca:	e7e4      	b.n	8001896 <_malloc_r+0x1e>
 80018cc:	680b      	ldr	r3, [r1, #0]
 80018ce:	1b5b      	subs	r3, r3, r5
 80018d0:	d41a      	bmi.n	8001908 <_malloc_r+0x90>
 80018d2:	2b0b      	cmp	r3, #11
 80018d4:	d90f      	bls.n	80018f6 <_malloc_r+0x7e>
 80018d6:	600b      	str	r3, [r1, #0]
 80018d8:	50cd      	str	r5, [r1, r3]
 80018da:	18cc      	adds	r4, r1, r3
 80018dc:	4630      	mov	r0, r6
 80018de:	f000 f860 	bl	80019a2 <__malloc_unlock>
 80018e2:	f104 000b 	add.w	r0, r4, #11
 80018e6:	1d23      	adds	r3, r4, #4
 80018e8:	f020 0007 	bic.w	r0, r0, #7
 80018ec:	1ac3      	subs	r3, r0, r3
 80018ee:	d01b      	beq.n	8001928 <_malloc_r+0xb0>
 80018f0:	425a      	negs	r2, r3
 80018f2:	50e2      	str	r2, [r4, r3]
 80018f4:	bd70      	pop	{r4, r5, r6, pc}
 80018f6:	428c      	cmp	r4, r1
 80018f8:	bf0d      	iteet	eq
 80018fa:	6863      	ldreq	r3, [r4, #4]
 80018fc:	684b      	ldrne	r3, [r1, #4]
 80018fe:	6063      	strne	r3, [r4, #4]
 8001900:	6013      	streq	r3, [r2, #0]
 8001902:	bf18      	it	ne
 8001904:	460c      	movne	r4, r1
 8001906:	e7e9      	b.n	80018dc <_malloc_r+0x64>
 8001908:	460c      	mov	r4, r1
 800190a:	6849      	ldr	r1, [r1, #4]
 800190c:	e7ca      	b.n	80018a4 <_malloc_r+0x2c>
 800190e:	1cc4      	adds	r4, r0, #3
 8001910:	f024 0403 	bic.w	r4, r4, #3
 8001914:	42a0      	cmp	r0, r4
 8001916:	d005      	beq.n	8001924 <_malloc_r+0xac>
 8001918:	1a21      	subs	r1, r4, r0
 800191a:	4630      	mov	r0, r6
 800191c:	f000 f830 	bl	8001980 <_sbrk_r>
 8001920:	3001      	adds	r0, #1
 8001922:	d0cd      	beq.n	80018c0 <_malloc_r+0x48>
 8001924:	6025      	str	r5, [r4, #0]
 8001926:	e7d9      	b.n	80018dc <_malloc_r+0x64>
 8001928:	bd70      	pop	{r4, r5, r6, pc}
 800192a:	bf00      	nop
 800192c:	200004e0 	.word	0x200004e0
 8001930:	200004e4 	.word	0x200004e4

08001934 <_realloc_r>:
 8001934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001936:	4607      	mov	r7, r0
 8001938:	4614      	mov	r4, r2
 800193a:	460e      	mov	r6, r1
 800193c:	b921      	cbnz	r1, 8001948 <_realloc_r+0x14>
 800193e:	4611      	mov	r1, r2
 8001940:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001944:	f7ff bf98 	b.w	8001878 <_malloc_r>
 8001948:	b922      	cbnz	r2, 8001954 <_realloc_r+0x20>
 800194a:	f7ff ff47 	bl	80017dc <_free_r>
 800194e:	4625      	mov	r5, r4
 8001950:	4628      	mov	r0, r5
 8001952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001954:	f000 f826 	bl	80019a4 <_malloc_usable_size_r>
 8001958:	4284      	cmp	r4, r0
 800195a:	d90f      	bls.n	800197c <_realloc_r+0x48>
 800195c:	4621      	mov	r1, r4
 800195e:	4638      	mov	r0, r7
 8001960:	f7ff ff8a 	bl	8001878 <_malloc_r>
 8001964:	4605      	mov	r5, r0
 8001966:	2800      	cmp	r0, #0
 8001968:	d0f2      	beq.n	8001950 <_realloc_r+0x1c>
 800196a:	4631      	mov	r1, r6
 800196c:	4622      	mov	r2, r4
 800196e:	f7ff ff0f 	bl	8001790 <memcpy>
 8001972:	4631      	mov	r1, r6
 8001974:	4638      	mov	r0, r7
 8001976:	f7ff ff31 	bl	80017dc <_free_r>
 800197a:	e7e9      	b.n	8001950 <_realloc_r+0x1c>
 800197c:	4635      	mov	r5, r6
 800197e:	e7e7      	b.n	8001950 <_realloc_r+0x1c>

08001980 <_sbrk_r>:
 8001980:	b538      	push	{r3, r4, r5, lr}
 8001982:	4c06      	ldr	r4, [pc, #24]	; (800199c <_sbrk_r+0x1c>)
 8001984:	2300      	movs	r3, #0
 8001986:	4605      	mov	r5, r0
 8001988:	4608      	mov	r0, r1
 800198a:	6023      	str	r3, [r4, #0]
 800198c:	f7ff fb7c 	bl	8001088 <_sbrk>
 8001990:	1c43      	adds	r3, r0, #1
 8001992:	d102      	bne.n	800199a <_sbrk_r+0x1a>
 8001994:	6823      	ldr	r3, [r4, #0]
 8001996:	b103      	cbz	r3, 800199a <_sbrk_r+0x1a>
 8001998:	602b      	str	r3, [r5, #0]
 800199a:	bd38      	pop	{r3, r4, r5, pc}
 800199c:	20000558 	.word	0x20000558

080019a0 <__malloc_lock>:
 80019a0:	4770      	bx	lr

080019a2 <__malloc_unlock>:
 80019a2:	4770      	bx	lr

080019a4 <_malloc_usable_size_r>:
 80019a4:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80019a8:	2800      	cmp	r0, #0
 80019aa:	f1a0 0004 	sub.w	r0, r0, #4
 80019ae:	bfbc      	itt	lt
 80019b0:	580b      	ldrlt	r3, [r1, r0]
 80019b2:	18c0      	addlt	r0, r0, r3
 80019b4:	4770      	bx	lr
 80019b6:	0000      	movs	r0, r0

080019b8 <_init>:
 80019b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ba:	bf00      	nop
 80019bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019be:	bc08      	pop	{r3}
 80019c0:	469e      	mov	lr, r3
 80019c2:	4770      	bx	lr

080019c4 <_fini>:
 80019c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019c6:	bf00      	nop
 80019c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019ca:	bc08      	pop	{r3}
 80019cc:	469e      	mov	lr, r3
 80019ce:	4770      	bx	lr
