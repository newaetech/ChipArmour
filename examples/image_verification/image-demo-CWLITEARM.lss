
image-demo-CWLITEARM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000edc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08001064  08001064  00011064  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800108c  0800108c  00020454  2**0
                  CONTENTS
  4 .ARM          00000000  0800108c  0800108c  00020454  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800108c  0800108c  00020454  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800108c  0800108c  0001108c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001090  08001090  00011090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000454  20000000  08001094  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  20000454  080014e8  00020454  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  200004e8  080014e8  000204e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020454  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005331  00000000  00000000  00020484  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000b2e  00000000  00000000  000257b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00002085  00000000  00000000  000262e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000188  00000000  00000000  00028368  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000378  00000000  00000000  000284f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000020f4  00000000  00000000  00028868  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000017ed  00000000  00000000  0002a95c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      00000076  00000000  00000000  0002c149  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000504  00000000  00000000  0002c1c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000144  00000000  00000000  0002c6c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000065  00000000  00000000  0002c808  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000454 	.word	0x20000454
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800104c 	.word	0x0800104c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000458 	.word	0x20000458
 80001c4:	0800104c 	.word	0x0800104c

080001c8 <puts>:

int snprintf(char *, size_t, char *, ...);

/* Avoid stdio.h as not sure what platform provides */
int puts(const char * s)
{
 80001c8:	b538      	push	{r3, r4, r5, lr}
 80001ca:	1e45      	subs	r5, r0, #1
    while(*s){
 80001cc:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 80001d0:	b924      	cbnz	r4, 80001dc <puts+0x14>
        putch(*s++);
    }
    putch('\n');
 80001d2:	200a      	movs	r0, #10
 80001d4:	f000 f92a 	bl	800042c <putch>
    
    return 0;
}
 80001d8:	4620      	mov	r0, r4
 80001da:	bd38      	pop	{r3, r4, r5, pc}
        putch(*s++);
 80001dc:	4620      	mov	r0, r4
 80001de:	f000 f925 	bl	800042c <putch>
 80001e2:	e7f3      	b.n	80001cc <puts+0x4>

080001e4 <some_hash_function>:
{
    uint32_t temp;
    uint32_t hash = 0;
    uint32_t i = 0;
    
    while(data_len){
 80001e4:	4603      	mov	r3, r0
 80001e6:	4401      	add	r1, r0
    uint32_t hash = 0;
 80001e8:	2000      	movs	r0, #0
    while(data_len){
 80001ea:	428b      	cmp	r3, r1
 80001ec:	d100      	bne.n	80001f0 <some_hash_function+0xc>
        data_len--;
    }

    
    return hash;
}
 80001ee:	4770      	bx	lr
        hash ^= image[i++];
 80001f0:	f813 2b01 	ldrb.w	r2, [r3], #1
        hash ^= temp;
 80001f4:	ea82 6030 	eor.w	r0, r2, r0, ror #24
        data_len--;
 80001f8:	e7f7      	b.n	80001ea <some_hash_function+0x6>

080001fa <some_crypto_function>:
/**
 This would be a pub-key enc/dec function such as RSA. Here a dumb 32-bit thingy is
 done instead to simplify the example. (NOTE: THIS FUNCTION IS NOT PUBLIC KEY CRYPTO! IT'S FOR DEMO!)
*/
uint32_t some_crypto_function(uint32_t user_signature, uint8_t manf_public_key[])
{
 80001fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80001fc:	1e4b      	subs	r3, r1, #1
 80001fe:	9001      	str	r0, [sp, #4]
    
    uint32_t temp;
    uint32_t hash = 0;    
    
    for(uint32_t i = 0; i < 4; i++){
 8000200:	aa01      	add	r2, sp, #4
 8000202:	3103      	adds	r1, #3
    uint32_t hash = 0;    
 8000204:	2000      	movs	r0, #0
        temp = (hash >> 24);
        hash = hash << 8;
        hash ^= manf_public_key[i];
 8000206:	f813 5f01 	ldrb.w	r5, [r3, #1]!
        hash ^= *((uint8_t*)(&user_signature) + i);
 800020a:	f812 4b01 	ldrb.w	r4, [r2], #1
 800020e:	ea85 6030 	eor.w	r0, r5, r0, ror #24
    for(uint32_t i = 0; i < 4; i++){
 8000212:	4299      	cmp	r1, r3
        hash ^= temp;
 8000214:	ea80 0004 	eor.w	r0, r0, r4
    for(uint32_t i = 0; i < 4; i++){
 8000218:	d1f5      	bne.n	8000206 <some_crypto_function+0xc>
    }
    
    return hash;
}
 800021a:	b003      	add	sp, #12
 800021c:	bd30      	pop	{r4, r5, pc}
 800021e:	0000      	movs	r0, r0

08000220 <rtos_init>:

/** RTOS init function */
void rtos_init(void)
{
    puts("RTOS Booted!\n");
 8000220:	4801      	ldr	r0, [pc, #4]	; (8000228 <rtos_init+0x8>)
 8000222:	f7ff bfd1 	b.w	80001c8 <puts>
 8000226:	bf00      	nop
 8000228:	08001077 	.word	0x08001077

0800022c <boot_new_image>:

/**
 Firmware update function, called once we know all images are OK.
 */
 void boot_new_image(image_t * image)
 {
 800022c:	b510      	push	{r4, lr}
 800022e:	4604      	mov	r4, r0
     puts("Booting image ");
 8000230:	4805      	ldr	r0, [pc, #20]	; (8000248 <boot_new_image+0x1c>)
 8000232:	f7ff ffc9 	bl	80001c8 <puts>
     puts(image->image_name);
 8000236:	4620      	mov	r0, r4
 8000238:	f7ff ffc6 	bl	80001c8 <puts>
     puts("\n");
 800023c:	4803      	ldr	r0, [pc, #12]	; (800024c <boot_new_image+0x20>)
     
     //Here would go code to actually do the real stuff
 }
 800023e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     puts("\n");
 8000242:	f7ff bfc1 	b.w	80001c8 <puts>
 8000246:	bf00      	nop
 8000248:	08001068 	.word	0x08001068
 800024c:	08001083 	.word	0x08001083

08000250 <validate_sigature>:

/**
 Original validation function which is vulnerable to FI.
 */
int validate_sigature(uint32_t short_hash, uint32_t signature, uint8_t * pub_key)
{
 8000250:	b570      	push	{r4, r5, r6, lr}
 8000252:	4616      	mov	r6, r2
 8000254:	4605      	mov	r5, r0
 8000256:	460c      	mov	r4, r1
    trigger_high();
 8000258:	f000 f8da 	bl	8000410 <trigger_high>
    if (some_crypto_function(short_hash, pub_key) == signature){
 800025c:	4631      	mov	r1, r6
 800025e:	4628      	mov	r0, r5
 8000260:	f7ff ffcb 	bl	80001fa <some_crypto_function>
        return 1;
    } else {
        return 0;
    }
}
 8000264:	1b03      	subs	r3, r0, r4
 8000266:	4258      	negs	r0, r3
 8000268:	4158      	adcs	r0, r3
 800026a:	bd70      	pop	{r4, r5, r6, pc}

0800026c <checkfwupdate_original>:

/**
 Original function which is vulnerable to FI.
 */
int checkfwupdate_original(void)
{
 800026c:	b538      	push	{r3, r4, r5, lr}
    //Flag indicates new firmware file present
    if(bootloader_flag == FLAG_PENDING_UPDATE){
 800026e:	4c0f      	ldr	r4, [pc, #60]	; (80002ac <checkfwupdate_original+0x40>)
 8000270:	4b0f      	ldr	r3, [pc, #60]	; (80002b0 <checkfwupdate_original+0x44>)
 8000272:	6822      	ldr	r2, [r4, #0]
 8000274:	429a      	cmp	r2, r3
 8000276:	d112      	bne.n	800029e <checkfwupdate_original+0x32>
        
        //Check signature matches proposed hashes
        //glitch vulnerability here
        if (validate_sigature(some_hash_function(image.image_data, image.image_data_len),
 8000278:	f8d4 144c 	ldr.w	r1, [r4, #1100]	; 0x44c
 800027c:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8000280:	f7ff ffb0 	bl	80001e4 <some_hash_function>
 8000284:	1d22      	adds	r2, r4, #4
 8000286:	f8d4 1450 	ldr.w	r1, [r4, #1104]	; 0x450
 800028a:	f7ff ffe1 	bl	8000250 <validate_sigature>
 800028e:	4605      	mov	r5, r0
 8000290:	b138      	cbz	r0, 80002a2 <checkfwupdate_original+0x36>
                              image.signature, manf_public_key)) {
            
            trigger_low();
 8000292:	f000 f8c4 	bl	800041e <trigger_low>
            boot_new_image(&image);
 8000296:	f104 000c 	add.w	r0, r4, #12
 800029a:	f7ff ffc7 	bl	800022c <boot_new_image>
            bootloader_flag = 0;
        }
    }
    
    return 0;
}
 800029e:	2000      	movs	r0, #0
 80002a0:	bd38      	pop	{r3, r4, r5, pc}
            trigger_low();
 80002a2:	f000 f8bc 	bl	800041e <trigger_low>
            bootloader_flag = 0;
 80002a6:	6025      	str	r5, [r4, #0]
 80002a8:	e7f9      	b.n	800029e <checkfwupdate_original+0x32>
 80002aa:	bf00      	nop
 80002ac:	20000000 	.word	0x20000000
 80002b0:	feedb347 	.word	0xfeedb347

080002b4 <main>:
{
 80002b4:	b508      	push	{r3, lr}
    platform_init();
 80002b6:	f000 f809 	bl	80002cc <platform_init>
    init_uart();
 80002ba:	f000 f847 	bl	800034c <init_uart>
    trigger_setup();
 80002be:	f000 f883 	bl	80003c8 <trigger_setup>
        checkfwupdate_original();
 80002c2:	f7ff ffd3 	bl	800026c <checkfwupdate_original>
    rtos_init();
 80002c6:	f7ff ffab 	bl	8000220 <rtos_init>
    return;
 80002ca:	e7fe      	b.n	80002ca <main+0x16>

080002cc <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 80002cc:	b570      	push	{r4, r5, r6, lr}
 80002ce:	b096      	sub	sp, #88	; 0x58
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
  #else
     RCC_OscInitTypeDef RCC_OscInitStruct;
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 80002d0:	2400      	movs	r4, #0
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 80002d2:	2603      	movs	r6, #3
 80002d4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80002d8:	a80c      	add	r0, sp, #48	; 0x30

     RCC_ClkInitTypeDef RCC_ClkInitStruct;
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 80002da:	2501      	movs	r5, #1
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 80002dc:	e9cd 630c 	strd	r6, r3, [sp, #48]	; 0x30
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 80002e0:	9410      	str	r4, [sp, #64]	; 0x40
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 80002e2:	9414      	str	r4, [sp, #80]	; 0x50
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80002e4:	f000 f8ba 	bl	800045c <HAL_RCC_OscConfig>
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 80002e8:	230f      	movs	r3, #15
     RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
     uint32_t flash_latency = 0;
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 80002ea:	4621      	mov	r1, r4
 80002ec:	a802      	add	r0, sp, #8
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 80002ee:	e9cd 3502 	strd	r3, r5, [sp, #8]
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f2:	e9cd 4404 	strd	r4, r4, [sp, #16]
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f6:	9406      	str	r4, [sp, #24]
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 80002f8:	f000 fb1a 	bl	8000930 <HAL_RCC_ClockConfig>




#if (PLATFORM==CWLITEARM)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002fc:	4b11      	ldr	r3, [pc, #68]	; (8000344 <platform_init+0x78>)
 80002fe:	695a      	ldr	r2, [r3, #20]
 8000300:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000304:	615a      	str	r2, [r3, #20]
 8000306:	695b      	ldr	r3, [r3, #20]
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
  GpioInit.Pull      = GPIO_NOPULL;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000308:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800030c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8000310:	4c0d      	ldr	r4, [pc, #52]	; (8000348 <platform_init+0x7c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000312:	9301      	str	r3, [sp, #4]
 8000314:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8000316:	a907      	add	r1, sp, #28
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
 8000318:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 800031c:	4620      	mov	r0, r4
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 800031e:	e9cd 3507 	strd	r3, r5, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8000322:	f000 fbab 	bl	8000a7c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8000326:	462a      	mov	r2, r5
 8000328:	4620      	mov	r0, r4
 800032a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800032e:	f000 fc67 	bl	8000c00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8000332:	462a      	mov	r2, r5
 8000334:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000338:	4620      	mov	r0, r4
 800033a:	f000 fc61 	bl	8000c00 <HAL_GPIO_WritePin>
#endif
}
 800033e:	b016      	add	sp, #88	; 0x58
 8000340:	bd70      	pop	{r4, r5, r6, pc}
 8000342:	bf00      	nop
 8000344:	40021000 	.word	0x40021000
 8000348:	48000800 	.word	0x48000800

0800034c <init_uart>:

void init_uart(void)
{
 800034c:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 800034e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
{
 8000352:	b088      	sub	sp, #32
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 8000354:	2302      	movs	r3, #2
 8000356:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GpioInit.Pull      = GPIO_PULLUP;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 800035a:	2101      	movs	r1, #1
 800035c:	2303      	movs	r3, #3
 800035e:	e9cd 1305 	strd	r1, r3, [sp, #20]
  GpioInit.Alternate = GPIO_AF7_USART1;
  __GPIOA_CLK_ENABLE();
 8000362:	4c16      	ldr	r4, [pc, #88]	; (80003bc <init_uart+0x70>)
  GpioInit.Alternate = GPIO_AF7_USART1;
 8000364:	2307      	movs	r3, #7
 8000366:	9307      	str	r3, [sp, #28]
  __GPIOA_CLK_ENABLE();
 8000368:	6963      	ldr	r3, [r4, #20]
 800036a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800036e:	6163      	str	r3, [r4, #20]
 8000370:	6963      	ldr	r3, [r4, #20]
 8000372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000376:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8000378:	a903      	add	r1, sp, #12
 800037a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __GPIOA_CLK_ENABLE();
 800037e:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8000380:	f000 fb7c 	bl	8000a7c <HAL_GPIO_Init>

  UartHandle.Instance        = USART1;
 8000384:	480e      	ldr	r0, [pc, #56]	; (80003c0 <init_uart+0x74>)
  UartHandle.Init.BaudRate   = 38400;
 8000386:	f8df c03c 	ldr.w	ip, [pc, #60]	; 80003c4 <init_uart+0x78>
 800038a:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 800038e:	e9c0 c300 	strd	ip, r3, [r0]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000392:	2300      	movs	r3, #0
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000394:	e9c0 3302 	strd	r3, r3, [r0, #8]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8000398:	6103      	str	r3, [r0, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800039a:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 800039c:	230c      	movs	r3, #12
 800039e:	6143      	str	r3, [r0, #20]
  __USART1_CLK_ENABLE();
 80003a0:	69a3      	ldr	r3, [r4, #24]
 80003a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003a6:	61a3      	str	r3, [r4, #24]
 80003a8:	69a3      	ldr	r3, [r4, #24]
 80003aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80003ae:	9302      	str	r3, [sp, #8]
 80003b0:	9b02      	ldr	r3, [sp, #8]
  HAL_UART_Init(&UartHandle);
 80003b2:	f000 fd7f 	bl	8000eb4 <HAL_UART_Init>
}
 80003b6:	b008      	add	sp, #32
 80003b8:	bd10      	pop	{r4, pc}
 80003ba:	bf00      	nop
 80003bc:	40021000 	.word	0x40021000
 80003c0:	20000478 	.word	0x20000478
 80003c4:	40013800 	.word	0x40013800

080003c8 <trigger_setup>:

void trigger_setup(void)
{
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c8:	4b10      	ldr	r3, [pc, #64]	; (800040c <trigger_setup+0x44>)
{
 80003ca:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003cc:	695a      	ldr	r2, [r3, #20]
 80003ce:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80003d2:	615a      	str	r2, [r3, #20]
 80003d4:	695b      	ldr	r3, [r3, #20]
{
 80003d6:	b087      	sub	sp, #28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003dc:	9300      	str	r3, [sp, #0]
 80003de:	9b00      	ldr	r3, [sp, #0]

  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_12;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 80003e0:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 80003e4:	2301      	movs	r3, #1
 80003e6:	e9cd 4301 	strd	r4, r3, [sp, #4]
  GpioInit.Pull      = GPIO_NOPULL;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80003ea:	2500      	movs	r5, #0
 80003ec:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GpioInit);
 80003ee:	a901      	add	r1, sp, #4
 80003f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80003f4:	e9cd 5303 	strd	r5, r3, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 80003f8:	f000 fb40 	bl	8000a7c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 80003fc:	462a      	mov	r2, r5
 80003fe:	4621      	mov	r1, r4
 8000400:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000404:	f000 fbfc 	bl	8000c00 <HAL_GPIO_WritePin>
}
 8000408:	b007      	add	sp, #28
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	40021000 	.word	0x40021000

08000410 <trigger_high>:

void trigger_high(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 8000410:	2201      	movs	r2, #1
 8000412:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000416:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800041a:	f000 bbf1 	b.w	8000c00 <HAL_GPIO_WritePin>

0800041e <trigger_low>:
}

void trigger_low(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 800041e:	2200      	movs	r2, #0
 8000420:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000424:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000428:	f000 bbea 	b.w	8000c00 <HAL_GPIO_WritePin>

0800042c <putch>:
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK);
  return d;
}

void putch(char c)
{
 800042c:	b507      	push	{r0, r1, r2, lr}
  uint8_t d  = c;
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 800042e:	f241 3388 	movw	r3, #5000	; 0x1388
  uint8_t d  = c;
 8000432:	f88d 0007 	strb.w	r0, [sp, #7]
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8000436:	2201      	movs	r2, #1
 8000438:	f10d 0107 	add.w	r1, sp, #7
 800043c:	4802      	ldr	r0, [pc, #8]	; (8000448 <putch+0x1c>)
 800043e:	f000 fd64 	bl	8000f0a <HAL_UART_Transmit>
}
 8000442:	b003      	add	sp, #12
 8000444:	f85d fb04 	ldr.w	pc, [sp], #4
 8000448:	20000478 	.word	0x20000478

0800044c <HAL_GetTick>:
	hal_sys_tick = 0;
	return HAL_OK;
}
uint32_t HAL_GetTick(void)
{
	return hal_sys_tick++;
 800044c:	4b02      	ldr	r3, [pc, #8]	; (8000458 <HAL_GetTick+0xc>)
 800044e:	6818      	ldr	r0, [r3, #0]
 8000450:	1c42      	adds	r2, r0, #1
 8000452:	601a      	str	r2, [r3, #0]
}
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	20000470 	.word	0x20000470

0800045c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800045c:	6803      	ldr	r3, [r0, #0]
{
 800045e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000462:	07d9      	lsls	r1, r3, #31
{
 8000464:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000466:	d411      	bmi.n	800048c <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000468:	6823      	ldr	r3, [r4, #0]
 800046a:	079a      	lsls	r2, r3, #30
 800046c:	f100 8086 	bmi.w	800057c <HAL_RCC_OscConfig+0x120>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000470:	6823      	ldr	r3, [r4, #0]
 8000472:	071e      	lsls	r6, r3, #28
 8000474:	f100 80f4 	bmi.w	8000660 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000478:	6823      	ldr	r3, [r4, #0]
 800047a:	075d      	lsls	r5, r3, #29
 800047c:	f100 813b 	bmi.w	80006f6 <HAL_RCC_OscConfig+0x29a>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000480:	69e2      	ldr	r2, [r4, #28]
 8000482:	2a00      	cmp	r2, #0
 8000484:	f040 81cf 	bne.w	8000826 <HAL_RCC_OscConfig+0x3ca>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000488:	2000      	movs	r0, #0
 800048a:	e021      	b.n	80004d0 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800048c:	49b7      	ldr	r1, [pc, #732]	; (800076c <HAL_RCC_OscConfig+0x310>)
 800048e:	684b      	ldr	r3, [r1, #4]
 8000490:	f003 030c 	and.w	r3, r3, #12
 8000494:	2b04      	cmp	r3, #4
 8000496:	d007      	beq.n	80004a8 <HAL_RCC_OscConfig+0x4c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000498:	684b      	ldr	r3, [r1, #4]
 800049a:	f003 030c 	and.w	r3, r3, #12
 800049e:	2b08      	cmp	r3, #8
 80004a0:	d119      	bne.n	80004d6 <HAL_RCC_OscConfig+0x7a>
 80004a2:	684b      	ldr	r3, [r1, #4]
 80004a4:	03db      	lsls	r3, r3, #15
 80004a6:	d516      	bpl.n	80004d6 <HAL_RCC_OscConfig+0x7a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80004ac:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80004b0:	6809      	ldr	r1, [r1, #0]
 80004b2:	fa93 f3a3 	rbit	r3, r3
 80004b6:	fab3 f383 	clz	r3, r3
 80004ba:	f003 031f 	and.w	r3, r3, #31
 80004be:	2201      	movs	r2, #1
 80004c0:	fa02 f303 	lsl.w	r3, r2, r3
 80004c4:	420b      	tst	r3, r1
 80004c6:	d0cf      	beq.n	8000468 <HAL_RCC_OscConfig+0xc>
 80004c8:	6863      	ldr	r3, [r4, #4]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d1cc      	bne.n	8000468 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80004ce:	2001      	movs	r0, #1
}
 80004d0:	b003      	add	sp, #12
 80004d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80004d6:	6862      	ldr	r2, [r4, #4]
 80004d8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80004dc:	d124      	bne.n	8000528 <HAL_RCC_OscConfig+0xcc>
 80004de:	680b      	ldr	r3, [r1, #0]
 80004e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004e4:	600b      	str	r3, [r1, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80004e6:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80004e8:	68a0      	ldr	r0, [r4, #8]
 80004ea:	f023 030f 	bic.w	r3, r3, #15
 80004ee:	4303      	orrs	r3, r0
 80004f0:	62cb      	str	r3, [r1, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80004f2:	b34a      	cbz	r2, 8000548 <HAL_RCC_OscConfig+0xec>
        tickstart = HAL_GetTick();
 80004f4:	f7ff ffaa 	bl	800044c <HAL_GetTick>
 80004f8:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 80004fc:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80004fe:	2601      	movs	r6, #1
 8000500:	fa95 f3a5 	rbit	r3, r5
 8000504:	680a      	ldr	r2, [r1, #0]
 8000506:	fa95 f3a5 	rbit	r3, r5
 800050a:	fab3 f383 	clz	r3, r3
 800050e:	f003 031f 	and.w	r3, r3, #31
 8000512:	fa06 f303 	lsl.w	r3, r6, r3
 8000516:	4213      	tst	r3, r2
 8000518:	d1a6      	bne.n	8000468 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800051a:	f7ff ff97 	bl	800044c <HAL_GetTick>
 800051e:	1bc0      	subs	r0, r0, r7
 8000520:	2864      	cmp	r0, #100	; 0x64
 8000522:	d9ed      	bls.n	8000500 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
 8000524:	2003      	movs	r0, #3
 8000526:	e7d3      	b.n	80004d0 <HAL_RCC_OscConfig+0x74>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000528:	680b      	ldr	r3, [r1, #0]
 800052a:	b932      	cbnz	r2, 800053a <HAL_RCC_OscConfig+0xde>
 800052c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000530:	600b      	str	r3, [r1, #0]
 8000532:	680b      	ldr	r3, [r1, #0]
 8000534:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000538:	e7d4      	b.n	80004e4 <HAL_RCC_OscConfig+0x88>
 800053a:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800053e:	d1f5      	bne.n	800052c <HAL_RCC_OscConfig+0xd0>
 8000540:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000544:	600b      	str	r3, [r1, #0]
 8000546:	e7ca      	b.n	80004de <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8000548:	f7ff ff80 	bl	800044c <HAL_GetTick>
 800054c:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8000550:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000552:	2601      	movs	r6, #1
 8000554:	fa95 f3a5 	rbit	r3, r5
 8000558:	680a      	ldr	r2, [r1, #0]
 800055a:	fa95 f3a5 	rbit	r3, r5
 800055e:	fab3 f383 	clz	r3, r3
 8000562:	f003 031f 	and.w	r3, r3, #31
 8000566:	fa06 f303 	lsl.w	r3, r6, r3
 800056a:	4213      	tst	r3, r2
 800056c:	f43f af7c 	beq.w	8000468 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000570:	f7ff ff6c 	bl	800044c <HAL_GetTick>
 8000574:	1bc0      	subs	r0, r0, r7
 8000576:	2864      	cmp	r0, #100	; 0x64
 8000578:	d9ec      	bls.n	8000554 <HAL_RCC_OscConfig+0xf8>
 800057a:	e7d3      	b.n	8000524 <HAL_RCC_OscConfig+0xc8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800057c:	497b      	ldr	r1, [pc, #492]	; (800076c <HAL_RCC_OscConfig+0x310>)
 800057e:	684b      	ldr	r3, [r1, #4]
 8000580:	f013 0f0c 	tst.w	r3, #12
 8000584:	d007      	beq.n	8000596 <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000586:	684b      	ldr	r3, [r1, #4]
 8000588:	f003 030c 	and.w	r3, r3, #12
 800058c:	2b08      	cmp	r3, #8
 800058e:	d121      	bne.n	80005d4 <HAL_RCC_OscConfig+0x178>
 8000590:	684b      	ldr	r3, [r1, #4]
 8000592:	03df      	lsls	r7, r3, #15
 8000594:	d41e      	bmi.n	80005d4 <HAL_RCC_OscConfig+0x178>
 8000596:	2302      	movs	r3, #2
 8000598:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800059c:	6808      	ldr	r0, [r1, #0]
 800059e:	fa93 f3a3 	rbit	r3, r3
 80005a2:	fab3 f383 	clz	r3, r3
 80005a6:	f003 031f 	and.w	r3, r3, #31
 80005aa:	2201      	movs	r2, #1
 80005ac:	fa02 f303 	lsl.w	r3, r2, r3
 80005b0:	4203      	tst	r3, r0
 80005b2:	d002      	beq.n	80005ba <HAL_RCC_OscConfig+0x15e>
 80005b4:	6923      	ldr	r3, [r4, #16]
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d189      	bne.n	80004ce <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80005ba:	6808      	ldr	r0, [r1, #0]
 80005bc:	23f8      	movs	r3, #248	; 0xf8
 80005be:	fa93 f3a3 	rbit	r3, r3
 80005c2:	fab3 f283 	clz	r2, r3
 80005c6:	6963      	ldr	r3, [r4, #20]
 80005c8:	4093      	lsls	r3, r2
 80005ca:	f020 02f8 	bic.w	r2, r0, #248	; 0xf8
 80005ce:	4313      	orrs	r3, r2
 80005d0:	600b      	str	r3, [r1, #0]
 80005d2:	e74d      	b.n	8000470 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80005d4:	6922      	ldr	r2, [r4, #16]
 80005d6:	2501      	movs	r5, #1
 80005d8:	b302      	cbz	r2, 800061c <HAL_RCC_OscConfig+0x1c0>
 80005da:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 80005de:	fab3 f383 	clz	r3, r3
 80005e2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80005e6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80005ea:	009b      	lsls	r3, r3, #2
 80005ec:	2602      	movs	r6, #2
 80005ee:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 80005f0:	f7ff ff2c 	bl	800044c <HAL_GetTick>
 80005f4:	4607      	mov	r7, r0
 80005f6:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80005fa:	680a      	ldr	r2, [r1, #0]
 80005fc:	fa96 f3a6 	rbit	r3, r6
 8000600:	fab3 f383 	clz	r3, r3
 8000604:	f003 031f 	and.w	r3, r3, #31
 8000608:	fa05 f303 	lsl.w	r3, r5, r3
 800060c:	4213      	tst	r3, r2
 800060e:	d1d4      	bne.n	80005ba <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000610:	f7ff ff1c 	bl	800044c <HAL_GetTick>
 8000614:	1bc0      	subs	r0, r0, r7
 8000616:	2802      	cmp	r0, #2
 8000618:	d9ed      	bls.n	80005f6 <HAL_RCC_OscConfig+0x19a>
 800061a:	e783      	b.n	8000524 <HAL_RCC_OscConfig+0xc8>
 800061c:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8000620:	fab3 f383 	clz	r3, r3
 8000624:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000628:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	2602      	movs	r6, #2
 8000630:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000632:	f7ff ff0b 	bl	800044c <HAL_GetTick>
 8000636:	4607      	mov	r7, r0
 8000638:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800063c:	680a      	ldr	r2, [r1, #0]
 800063e:	fa96 f3a6 	rbit	r3, r6
 8000642:	fab3 f383 	clz	r3, r3
 8000646:	f003 031f 	and.w	r3, r3, #31
 800064a:	fa05 f303 	lsl.w	r3, r5, r3
 800064e:	4213      	tst	r3, r2
 8000650:	f43f af0e 	beq.w	8000470 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000654:	f7ff fefa 	bl	800044c <HAL_GetTick>
 8000658:	1bc0      	subs	r0, r0, r7
 800065a:	2802      	cmp	r0, #2
 800065c:	d9ec      	bls.n	8000638 <HAL_RCC_OscConfig+0x1dc>
 800065e:	e761      	b.n	8000524 <HAL_RCC_OscConfig+0xc8>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000660:	69a2      	ldr	r2, [r4, #24]
 8000662:	4d42      	ldr	r5, [pc, #264]	; (800076c <HAL_RCC_OscConfig+0x310>)
 8000664:	4842      	ldr	r0, [pc, #264]	; (8000770 <HAL_RCC_OscConfig+0x314>)
 8000666:	2101      	movs	r1, #1
 8000668:	b312      	cbz	r2, 80006b0 <HAL_RCC_OscConfig+0x254>
 800066a:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_ENABLE();
 800066e:	fab3 f383 	clz	r3, r3
 8000672:	4403      	add	r3, r0
 8000674:	009b      	lsls	r3, r3, #2
 8000676:	2602      	movs	r6, #2
 8000678:	6019      	str	r1, [r3, #0]
      tickstart = HAL_GetTick();
 800067a:	f7ff fee7 	bl	800044c <HAL_GetTick>
 800067e:	4607      	mov	r7, r0
 8000680:	fa96 f3a6 	rbit	r3, r6
 8000684:	fa96 f3a6 	rbit	r3, r6
 8000688:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800068c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800068e:	fa96 f3a6 	rbit	r3, r6
 8000692:	fab3 f383 	clz	r3, r3
 8000696:	f003 031f 	and.w	r3, r3, #31
 800069a:	fa01 f303 	lsl.w	r3, r1, r3
 800069e:	4213      	tst	r3, r2
 80006a0:	f47f aeea 	bne.w	8000478 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006a4:	f7ff fed2 	bl	800044c <HAL_GetTick>
 80006a8:	1bc0      	subs	r0, r0, r7
 80006aa:	2802      	cmp	r0, #2
 80006ac:	d9e8      	bls.n	8000680 <HAL_RCC_OscConfig+0x224>
 80006ae:	e739      	b.n	8000524 <HAL_RCC_OscConfig+0xc8>
 80006b0:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_DISABLE();
 80006b4:	fab3 f383 	clz	r3, r3
 80006b8:	4403      	add	r3, r0
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	2602      	movs	r6, #2
 80006be:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80006c0:	f7ff fec4 	bl	800044c <HAL_GetTick>
 80006c4:	4607      	mov	r7, r0
 80006c6:	fa96 f3a6 	rbit	r3, r6
 80006ca:	fa96 f3a6 	rbit	r3, r6
 80006ce:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80006d2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80006d4:	fa96 f3a6 	rbit	r3, r6
 80006d8:	fab3 f383 	clz	r3, r3
 80006dc:	f003 031f 	and.w	r3, r3, #31
 80006e0:	fa01 f303 	lsl.w	r3, r1, r3
 80006e4:	4213      	tst	r3, r2
 80006e6:	f43f aec7 	beq.w	8000478 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006ea:	f7ff feaf 	bl	800044c <HAL_GetTick>
 80006ee:	1bc0      	subs	r0, r0, r7
 80006f0:	2802      	cmp	r0, #2
 80006f2:	d9e8      	bls.n	80006c6 <HAL_RCC_OscConfig+0x26a>
 80006f4:	e716      	b.n	8000524 <HAL_RCC_OscConfig+0xc8>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80006f6:	491d      	ldr	r1, [pc, #116]	; (800076c <HAL_RCC_OscConfig+0x310>)
 80006f8:	69cb      	ldr	r3, [r1, #28]
 80006fa:	00d8      	lsls	r0, r3, #3
 80006fc:	d433      	bmi.n	8000766 <HAL_RCC_OscConfig+0x30a>
      __HAL_RCC_PWR_CLK_ENABLE();
 80006fe:	69cb      	ldr	r3, [r1, #28]
 8000700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000704:	61cb      	str	r3, [r1, #28]
 8000706:	69cb      	ldr	r3, [r1, #28]
 8000708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070c:	9301      	str	r3, [sp, #4]
 800070e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000710:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000712:	4e18      	ldr	r6, [pc, #96]	; (8000774 <HAL_RCC_OscConfig+0x318>)
 8000714:	6833      	ldr	r3, [r6, #0]
 8000716:	05da      	lsls	r2, r3, #23
 8000718:	d52e      	bpl.n	8000778 <HAL_RCC_OscConfig+0x31c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800071a:	68e3      	ldr	r3, [r4, #12]
 800071c:	2b01      	cmp	r3, #1
 800071e:	d13b      	bne.n	8000798 <HAL_RCC_OscConfig+0x33c>
 8000720:	6a0b      	ldr	r3, [r1, #32]
 8000722:	f043 0301 	orr.w	r3, r3, #1
 8000726:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8000728:	f7ff fe90 	bl	800044c <HAL_GetTick>
 800072c:	2602      	movs	r6, #2
 800072e:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000730:	46b0      	mov	r8, r6
 8000732:	2701      	movs	r7, #1
 8000734:	fa96 f3a6 	rbit	r3, r6
 8000738:	fa96 f3a6 	rbit	r3, r6
 800073c:	2b00      	cmp	r3, #0
 800073e:	d06a      	beq.n	8000816 <HAL_RCC_OscConfig+0x3ba>
 8000740:	6a0a      	ldr	r2, [r1, #32]
 8000742:	fa98 f3a8 	rbit	r3, r8
 8000746:	fab3 f383 	clz	r3, r3
 800074a:	f003 031f 	and.w	r3, r3, #31
 800074e:	fa07 f303 	lsl.w	r3, r7, r3
 8000752:	4213      	tst	r3, r2
 8000754:	d056      	beq.n	8000804 <HAL_RCC_OscConfig+0x3a8>
    if(pwrclkchanged == SET)
 8000756:	2d00      	cmp	r5, #0
 8000758:	f43f ae92 	beq.w	8000480 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800075c:	69cb      	ldr	r3, [r1, #28]
 800075e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000762:	61cb      	str	r3, [r1, #28]
 8000764:	e68c      	b.n	8000480 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8000766:	2500      	movs	r5, #0
 8000768:	e7d3      	b.n	8000712 <HAL_RCC_OscConfig+0x2b6>
 800076a:	bf00      	nop
 800076c:	40021000 	.word	0x40021000
 8000770:	10908120 	.word	0x10908120
 8000774:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000778:	6833      	ldr	r3, [r6, #0]
 800077a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800077e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000780:	f7ff fe64 	bl	800044c <HAL_GetTick>
 8000784:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000786:	6833      	ldr	r3, [r6, #0]
 8000788:	05db      	lsls	r3, r3, #23
 800078a:	d4c6      	bmi.n	800071a <HAL_RCC_OscConfig+0x2be>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800078c:	f7ff fe5e 	bl	800044c <HAL_GetTick>
 8000790:	1bc0      	subs	r0, r0, r7
 8000792:	2864      	cmp	r0, #100	; 0x64
 8000794:	d9f7      	bls.n	8000786 <HAL_RCC_OscConfig+0x32a>
 8000796:	e6c5      	b.n	8000524 <HAL_RCC_OscConfig+0xc8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000798:	bb33      	cbnz	r3, 80007e8 <HAL_RCC_OscConfig+0x38c>
 800079a:	6a0b      	ldr	r3, [r1, #32]
 800079c:	f023 0301 	bic.w	r3, r3, #1
 80007a0:	620b      	str	r3, [r1, #32]
 80007a2:	6a0b      	ldr	r3, [r1, #32]
 80007a4:	f023 0304 	bic.w	r3, r3, #4
 80007a8:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 80007aa:	f7ff fe4f 	bl	800044c <HAL_GetTick>
 80007ae:	2602      	movs	r6, #2
 80007b0:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80007b2:	46b0      	mov	r8, r6
 80007b4:	2701      	movs	r7, #1
 80007b6:	fa96 f3a6 	rbit	r3, r6
 80007ba:	fa96 f3a6 	rbit	r3, r6
 80007be:	b373      	cbz	r3, 800081e <HAL_RCC_OscConfig+0x3c2>
 80007c0:	6a0a      	ldr	r2, [r1, #32]
 80007c2:	fa98 f3a8 	rbit	r3, r8
 80007c6:	fab3 f383 	clz	r3, r3
 80007ca:	f003 031f 	and.w	r3, r3, #31
 80007ce:	fa07 f303 	lsl.w	r3, r7, r3
 80007d2:	4213      	tst	r3, r2
 80007d4:	d0bf      	beq.n	8000756 <HAL_RCC_OscConfig+0x2fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007d6:	f7ff fe39 	bl	800044c <HAL_GetTick>
 80007da:	f241 3388 	movw	r3, #5000	; 0x1388
 80007de:	eba0 0009 	sub.w	r0, r0, r9
 80007e2:	4298      	cmp	r0, r3
 80007e4:	d9e7      	bls.n	80007b6 <HAL_RCC_OscConfig+0x35a>
 80007e6:	e69d      	b.n	8000524 <HAL_RCC_OscConfig+0xc8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007e8:	2b05      	cmp	r3, #5
 80007ea:	6a0b      	ldr	r3, [r1, #32]
 80007ec:	d103      	bne.n	80007f6 <HAL_RCC_OscConfig+0x39a>
 80007ee:	f043 0304 	orr.w	r3, r3, #4
 80007f2:	620b      	str	r3, [r1, #32]
 80007f4:	e794      	b.n	8000720 <HAL_RCC_OscConfig+0x2c4>
 80007f6:	f023 0301 	bic.w	r3, r3, #1
 80007fa:	620b      	str	r3, [r1, #32]
 80007fc:	6a0b      	ldr	r3, [r1, #32]
 80007fe:	f023 0304 	bic.w	r3, r3, #4
 8000802:	e790      	b.n	8000726 <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000804:	f7ff fe22 	bl	800044c <HAL_GetTick>
 8000808:	f241 3388 	movw	r3, #5000	; 0x1388
 800080c:	eba0 0009 	sub.w	r0, r0, r9
 8000810:	4298      	cmp	r0, r3
 8000812:	d98f      	bls.n	8000734 <HAL_RCC_OscConfig+0x2d8>
 8000814:	e686      	b.n	8000524 <HAL_RCC_OscConfig+0xc8>
 8000816:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800081a:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800081c:	e791      	b.n	8000742 <HAL_RCC_OscConfig+0x2e6>
 800081e:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000822:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8000824:	e7cd      	b.n	80007c2 <HAL_RCC_OscConfig+0x366>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000826:	4941      	ldr	r1, [pc, #260]	; (800092c <HAL_RCC_OscConfig+0x4d0>)
 8000828:	684b      	ldr	r3, [r1, #4]
 800082a:	f003 030c 	and.w	r3, r3, #12
 800082e:	2b08      	cmp	r3, #8
 8000830:	f43f ae4d 	beq.w	80004ce <HAL_RCC_OscConfig+0x72>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000834:	2a02      	cmp	r2, #2
 8000836:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800083a:	d151      	bne.n	80008e0 <HAL_RCC_OscConfig+0x484>
 800083c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000840:	fab3 f383 	clz	r3, r3
 8000844:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000848:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000852:	f7ff fdfb 	bl	800044c <HAL_GetTick>
 8000856:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 800085a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800085c:	2501      	movs	r5, #1
 800085e:	fa96 f3a6 	rbit	r3, r6
 8000862:	680a      	ldr	r2, [r1, #0]
 8000864:	fa96 f3a6 	rbit	r3, r6
 8000868:	fab3 f383 	clz	r3, r3
 800086c:	f003 031f 	and.w	r3, r3, #31
 8000870:	fa05 f303 	lsl.w	r3, r5, r3
 8000874:	4213      	tst	r3, r2
 8000876:	d12d      	bne.n	80008d4 <HAL_RCC_OscConfig+0x478>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000878:	e9d4 0308 	ldrd	r0, r3, [r4, #32]
 800087c:	684a      	ldr	r2, [r1, #4]
 800087e:	4303      	orrs	r3, r0
 8000880:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000884:	4313      	orrs	r3, r2
 8000886:	604b      	str	r3, [r1, #4]
 8000888:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800088c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000890:	fab3 f383 	clz	r3, r3
 8000894:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000898:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 80008a2:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 80008a4:	f7ff fdd2 	bl	800044c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80008a8:	2501      	movs	r5, #1
        tickstart = HAL_GetTick();
 80008aa:	4606      	mov	r6, r0
 80008ac:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80008b0:	680a      	ldr	r2, [r1, #0]
 80008b2:	fa94 f3a4 	rbit	r3, r4
 80008b6:	fab3 f383 	clz	r3, r3
 80008ba:	f003 031f 	and.w	r3, r3, #31
 80008be:	fa05 f303 	lsl.w	r3, r5, r3
 80008c2:	4213      	tst	r3, r2
 80008c4:	f47f ade0 	bne.w	8000488 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008c8:	f7ff fdc0 	bl	800044c <HAL_GetTick>
 80008cc:	1b80      	subs	r0, r0, r6
 80008ce:	2802      	cmp	r0, #2
 80008d0:	d9ec      	bls.n	80008ac <HAL_RCC_OscConfig+0x450>
 80008d2:	e627      	b.n	8000524 <HAL_RCC_OscConfig+0xc8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008d4:	f7ff fdba 	bl	800044c <HAL_GetTick>
 80008d8:	1bc0      	subs	r0, r0, r7
 80008da:	2802      	cmp	r0, #2
 80008dc:	d9bf      	bls.n	800085e <HAL_RCC_OscConfig+0x402>
 80008de:	e621      	b.n	8000524 <HAL_RCC_OscConfig+0xc8>
 80008e0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80008e4:	fab3 f383 	clz	r3, r3
 80008e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80008ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80008f6:	f7ff fda9 	bl	800044c <HAL_GetTick>
 80008fa:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 80008fe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000900:	2501      	movs	r5, #1
 8000902:	fa94 f3a4 	rbit	r3, r4
 8000906:	680a      	ldr	r2, [r1, #0]
 8000908:	fa94 f3a4 	rbit	r3, r4
 800090c:	fab3 f383 	clz	r3, r3
 8000910:	f003 031f 	and.w	r3, r3, #31
 8000914:	fa05 f303 	lsl.w	r3, r5, r3
 8000918:	4213      	tst	r3, r2
 800091a:	f43f adb5 	beq.w	8000488 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800091e:	f7ff fd95 	bl	800044c <HAL_GetTick>
 8000922:	1b80      	subs	r0, r0, r6
 8000924:	2802      	cmp	r0, #2
 8000926:	d9ec      	bls.n	8000902 <HAL_RCC_OscConfig+0x4a6>
 8000928:	e5fc      	b.n	8000524 <HAL_RCC_OscConfig+0xc8>
 800092a:	bf00      	nop
 800092c:	40021000 	.word	0x40021000

08000930 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000930:	4a50      	ldr	r2, [pc, #320]	; (8000a74 <HAL_RCC_ClockConfig+0x144>)
{
 8000932:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000934:	6813      	ldr	r3, [r2, #0]
 8000936:	f003 0307 	and.w	r3, r3, #7
 800093a:	428b      	cmp	r3, r1
{
 800093c:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800093e:	d31b      	bcc.n	8000978 <HAL_RCC_ClockConfig+0x48>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000940:	682a      	ldr	r2, [r5, #0]
 8000942:	0790      	lsls	r0, r2, #30
 8000944:	d424      	bmi.n	8000990 <HAL_RCC_ClockConfig+0x60>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000946:	07d2      	lsls	r2, r2, #31
 8000948:	d42a      	bmi.n	80009a0 <HAL_RCC_ClockConfig+0x70>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800094a:	4a4a      	ldr	r2, [pc, #296]	; (8000a74 <HAL_RCC_ClockConfig+0x144>)
 800094c:	6813      	ldr	r3, [r2, #0]
 800094e:	f003 0307 	and.w	r3, r3, #7
 8000952:	428b      	cmp	r3, r1
 8000954:	d87a      	bhi.n	8000a4c <HAL_RCC_ClockConfig+0x11c>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000956:	6828      	ldr	r0, [r5, #0]
 8000958:	0743      	lsls	r3, r0, #29
 800095a:	f100 8082 	bmi.w	8000a62 <HAL_RCC_ClockConfig+0x132>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800095e:	f010 0008 	ands.w	r0, r0, #8
 8000962:	d014      	beq.n	800098e <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000964:	4a44      	ldr	r2, [pc, #272]	; (8000a78 <HAL_RCC_ClockConfig+0x148>)
 8000966:	6929      	ldr	r1, [r5, #16]
 8000968:	6853      	ldr	r3, [r2, #4]
 800096a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800096e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000972:	6053      	str	r3, [r2, #4]
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 8000974:	2000      	movs	r0, #0
 8000976:	e00a      	b.n	800098e <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000978:	6813      	ldr	r3, [r2, #0]
 800097a:	f023 0307 	bic.w	r3, r3, #7
 800097e:	430b      	orrs	r3, r1
 8000980:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000982:	6813      	ldr	r3, [r2, #0]
 8000984:	f003 0307 	and.w	r3, r3, #7
 8000988:	428b      	cmp	r3, r1
 800098a:	d0d9      	beq.n	8000940 <HAL_RCC_ClockConfig+0x10>
      return HAL_ERROR;
 800098c:	2001      	movs	r0, #1
}
 800098e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000990:	4839      	ldr	r0, [pc, #228]	; (8000a78 <HAL_RCC_ClockConfig+0x148>)
 8000992:	68ac      	ldr	r4, [r5, #8]
 8000994:	6843      	ldr	r3, [r0, #4]
 8000996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800099a:	4323      	orrs	r3, r4
 800099c:	6043      	str	r3, [r0, #4]
 800099e:	e7d2      	b.n	8000946 <HAL_RCC_ClockConfig+0x16>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009a0:	686a      	ldr	r2, [r5, #4]
 80009a2:	4c35      	ldr	r4, [pc, #212]	; (8000a78 <HAL_RCC_ClockConfig+0x148>)
 80009a4:	2a01      	cmp	r2, #1
 80009a6:	d127      	bne.n	80009f8 <HAL_RCC_ClockConfig+0xc8>
 80009a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009ac:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009b0:	6820      	ldr	r0, [r4, #0]
 80009b2:	fa93 f3a3 	rbit	r3, r3
 80009b6:	fab3 f383 	clz	r3, r3
 80009ba:	f003 031f 	and.w	r3, r3, #31
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	4203      	tst	r3, r0
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009c4:	d0e2      	beq.n	800098c <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80009c6:	6863      	ldr	r3, [r4, #4]
 80009c8:	f023 0303 	bic.w	r3, r3, #3
 80009cc:	431a      	orrs	r2, r3
 80009ce:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 80009d0:	f7ff fd3c 	bl	800044c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009d4:	686b      	ldr	r3, [r5, #4]
 80009d6:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 80009d8:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009da:	f241 3788 	movw	r7, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009de:	d11e      	bne.n	8000a1e <HAL_RCC_ClockConfig+0xee>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80009e0:	6863      	ldr	r3, [r4, #4]
 80009e2:	f003 030c 	and.w	r3, r3, #12
 80009e6:	2b04      	cmp	r3, #4
 80009e8:	d0af      	beq.n	800094a <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009ea:	f7ff fd2f 	bl	800044c <HAL_GetTick>
 80009ee:	1b80      	subs	r0, r0, r6
 80009f0:	42b8      	cmp	r0, r7
 80009f2:	d9f5      	bls.n	80009e0 <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 80009f4:	2003      	movs	r0, #3
 80009f6:	e7ca      	b.n	800098e <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80009f8:	2a02      	cmp	r2, #2
 80009fa:	bf0c      	ite	eq
 80009fc:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000a00:	2302      	movne	r3, #2
 8000a02:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a06:	6826      	ldr	r6, [r4, #0]
 8000a08:	fa93 f3a3 	rbit	r3, r3
 8000a0c:	fab3 f383 	clz	r3, r3
 8000a10:	f003 031f 	and.w	r3, r3, #31
 8000a14:	2001      	movs	r0, #1
 8000a16:	fa00 f303 	lsl.w	r3, r0, r3
 8000a1a:	4233      	tst	r3, r6
 8000a1c:	e7d2      	b.n	80009c4 <HAL_RCC_ClockConfig+0x94>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a1e:	2b02      	cmp	r3, #2
 8000a20:	d10f      	bne.n	8000a42 <HAL_RCC_ClockConfig+0x112>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a22:	6863      	ldr	r3, [r4, #4]
 8000a24:	f003 030c 	and.w	r3, r3, #12
 8000a28:	2b08      	cmp	r3, #8
 8000a2a:	d08e      	beq.n	800094a <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a2c:	f7ff fd0e 	bl	800044c <HAL_GetTick>
 8000a30:	1b80      	subs	r0, r0, r6
 8000a32:	42b8      	cmp	r0, r7
 8000a34:	d9f5      	bls.n	8000a22 <HAL_RCC_ClockConfig+0xf2>
 8000a36:	e7dd      	b.n	80009f4 <HAL_RCC_ClockConfig+0xc4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a38:	f7ff fd08 	bl	800044c <HAL_GetTick>
 8000a3c:	1b80      	subs	r0, r0, r6
 8000a3e:	42b8      	cmp	r0, r7
 8000a40:	d8d8      	bhi.n	80009f4 <HAL_RCC_ClockConfig+0xc4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000a42:	6863      	ldr	r3, [r4, #4]
 8000a44:	f013 0f0c 	tst.w	r3, #12
 8000a48:	d1f6      	bne.n	8000a38 <HAL_RCC_ClockConfig+0x108>
 8000a4a:	e77e      	b.n	800094a <HAL_RCC_ClockConfig+0x1a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a4c:	6813      	ldr	r3, [r2, #0]
 8000a4e:	f023 0307 	bic.w	r3, r3, #7
 8000a52:	430b      	orrs	r3, r1
 8000a54:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000a56:	6813      	ldr	r3, [r2, #0]
 8000a58:	f003 0307 	and.w	r3, r3, #7
 8000a5c:	428b      	cmp	r3, r1
 8000a5e:	d195      	bne.n	800098c <HAL_RCC_ClockConfig+0x5c>
 8000a60:	e779      	b.n	8000956 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000a62:	4a05      	ldr	r2, [pc, #20]	; (8000a78 <HAL_RCC_ClockConfig+0x148>)
 8000a64:	68e9      	ldr	r1, [r5, #12]
 8000a66:	6853      	ldr	r3, [r2, #4]
 8000a68:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a6c:	430b      	orrs	r3, r1
 8000a6e:	6053      	str	r3, [r2, #4]
 8000a70:	e775      	b.n	800095e <HAL_RCC_ClockConfig+0x2e>
 8000a72:	bf00      	nop
 8000a74:	40022000 	.word	0x40022000
 8000a78:	40021000 	.word	0x40021000

08000a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000a80:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a84:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8000bfc <HAL_GPIO_Init+0x180>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a88:	4a5a      	ldr	r2, [pc, #360]	; (8000bf4 <HAL_GPIO_Init+0x178>)
  uint32_t position = 0x00U;
 8000a8a:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000a8c:	fa38 f403 	lsrs.w	r4, r8, r3
 8000a90:	d102      	bne.n	8000a98 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 8000a92:	b003      	add	sp, #12
 8000a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000a98:	2401      	movs	r4, #1
 8000a9a:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 8000a9e:	ea1a 0508 	ands.w	r5, sl, r8
 8000aa2:	f000 809c 	beq.w	8000bde <HAL_GPIO_Init+0x162>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000aa6:	684c      	ldr	r4, [r1, #4]
 8000aa8:	f024 0b10 	bic.w	fp, r4, #16
 8000aac:	f1bb 0f02 	cmp.w	fp, #2
 8000ab0:	d114      	bne.n	8000adc <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3];
 8000ab2:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8000ab6:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000aba:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000abe:	f8dc 6020 	ldr.w	r6, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ac2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000ac6:	270f      	movs	r7, #15
 8000ac8:	fa07 f70e 	lsl.w	r7, r7, lr
 8000acc:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ad0:	690e      	ldr	r6, [r1, #16]
 8000ad2:	fa06 f60e 	lsl.w	r6, r6, lr
 8000ad6:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 8000ad8:	f8cc 6020 	str.w	r6, [ip, #32]
      temp = GPIOx->MODER;
 8000adc:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ae0:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8000ae2:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ae4:	fa07 f70e 	lsl.w	r7, r7, lr
 8000ae8:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000aea:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000aee:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000af0:	fa0c fc0e 	lsl.w	ip, ip, lr
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000af4:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000af8:	ea4c 0606 	orr.w	r6, ip, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000afc:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8000b00:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b02:	d811      	bhi.n	8000b28 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 8000b04:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b06:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b0a:	68ce      	ldr	r6, [r1, #12]
 8000b0c:	fa06 fc0e 	lsl.w	ip, r6, lr
 8000b10:	ea4c 060b 	orr.w	r6, ip, fp
        GPIOx->OSPEEDR = temp;
 8000b14:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000b16:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b18:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b1c:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8000b20:	409e      	lsls	r6, r3
 8000b22:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8000b26:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8000b28:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b2a:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b2c:	688e      	ldr	r6, [r1, #8]
 8000b2e:	fa06 f60e 	lsl.w	r6, r6, lr
 8000b32:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b34:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8000b36:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b38:	d551      	bpl.n	8000bde <HAL_GPIO_Init+0x162>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3a:	f8d9 6018 	ldr.w	r6, [r9, #24]
 8000b3e:	f046 0601 	orr.w	r6, r6, #1
 8000b42:	f8c9 6018 	str.w	r6, [r9, #24]
 8000b46:	f8d9 6018 	ldr.w	r6, [r9, #24]
 8000b4a:	f023 0703 	bic.w	r7, r3, #3
 8000b4e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000b52:	f006 0601 	and.w	r6, r6, #1
 8000b56:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000b5a:	9601      	str	r6, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000b5c:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b60:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000b62:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000b64:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000b68:	f04f 0c0f 	mov.w	ip, #15
 8000b6c:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000b70:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000b74:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000b78:	d033      	beq.n	8000be2 <HAL_GPIO_Init+0x166>
 8000b7a:	4e1f      	ldr	r6, [pc, #124]	; (8000bf8 <HAL_GPIO_Init+0x17c>)
 8000b7c:	42b0      	cmp	r0, r6
 8000b7e:	d032      	beq.n	8000be6 <HAL_GPIO_Init+0x16a>
 8000b80:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000b84:	42b0      	cmp	r0, r6
 8000b86:	d030      	beq.n	8000bea <HAL_GPIO_Init+0x16e>
 8000b88:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000b8c:	42b0      	cmp	r0, r6
 8000b8e:	d02e      	beq.n	8000bee <HAL_GPIO_Init+0x172>
 8000b90:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000b94:	42b0      	cmp	r0, r6
 8000b96:	bf0c      	ite	eq
 8000b98:	2604      	moveq	r6, #4
 8000b9a:	2605      	movne	r6, #5
 8000b9c:	fa06 f60e 	lsl.w	r6, r6, lr
 8000ba0:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000ba4:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000ba6:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000ba8:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000baa:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000bae:	bf0c      	ite	eq
 8000bb0:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000bb2:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 8000bb4:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8000bb6:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bb8:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000bbc:	bf0c      	ite	eq
 8000bbe:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000bc0:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 8000bc2:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8000bc4:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bc6:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000bca:	bf0c      	ite	eq
 8000bcc:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000bce:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 8000bd0:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8000bd2:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bd4:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000bd6:	bf54      	ite	pl
 8000bd8:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000bda:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 8000bdc:	60d6      	str	r6, [r2, #12]
    position++;
 8000bde:	3301      	adds	r3, #1
 8000be0:	e754      	b.n	8000a8c <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000be2:	2600      	movs	r6, #0
 8000be4:	e7da      	b.n	8000b9c <HAL_GPIO_Init+0x120>
 8000be6:	2601      	movs	r6, #1
 8000be8:	e7d8      	b.n	8000b9c <HAL_GPIO_Init+0x120>
 8000bea:	2602      	movs	r6, #2
 8000bec:	e7d6      	b.n	8000b9c <HAL_GPIO_Init+0x120>
 8000bee:	2603      	movs	r6, #3
 8000bf0:	e7d4      	b.n	8000b9c <HAL_GPIO_Init+0x120>
 8000bf2:	bf00      	nop
 8000bf4:	40010400 	.word	0x40010400
 8000bf8:	48000400 	.word	0x48000400
 8000bfc:	40021000 	.word	0x40021000

08000c00 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c00:	b10a      	cbz	r2, 8000c06 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c02:	6181      	str	r1, [r0, #24]
 8000c04:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c06:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8000c08:	4770      	bx	lr
 8000c0a:	0000      	movs	r0, r0

08000c0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000c0c:	4601      	mov	r1, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000c0e:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000c10:	688b      	ldr	r3, [r1, #8]
{
 8000c12:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000c14:	690d      	ldr	r5, [r1, #16]
 8000c16:	69c4      	ldr	r4, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000c18:	6810      	ldr	r0, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000c1a:	432b      	orrs	r3, r5
 8000c1c:	694d      	ldr	r5, [r1, #20]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000c1e:	f420 4016 	bic.w	r0, r0, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000c22:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000c24:	f020 000c 	bic.w	r0, r0, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000c28:	4323      	orrs	r3, r4
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000c2a:	4303      	orrs	r3, r0
 8000c2c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000c2e:	6853      	ldr	r3, [r2, #4]
 8000c30:	68c8      	ldr	r0, [r1, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000c32:	6a0d      	ldr	r5, [r1, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000c34:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c38:	4303      	orrs	r3, r0
 8000c3a:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000c3c:	6890      	ldr	r0, [r2, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000c3e:	698b      	ldr	r3, [r1, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000c40:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000c44:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000c46:	4303      	orrs	r3, r0
 8000c48:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000c4a:	4b65      	ldr	r3, [pc, #404]	; (8000de0 <UART_SetConfig+0x1d4>)
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d112      	bne.n	8000c76 <UART_SetConfig+0x6a>
 8000c50:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8000c54:	4863      	ldr	r0, [pc, #396]	; (8000de4 <UART_SetConfig+0x1d8>)
 8000c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c58:	f003 0303 	and.w	r3, r3, #3
 8000c5c:	5cc0      	ldrb	r0, [r0, r3]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000c5e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8000c62:	d178      	bne.n	8000d56 <UART_SetConfig+0x14a>
  {
    switch (clocksource)
 8000c64:	2808      	cmp	r0, #8
 8000c66:	d873      	bhi.n	8000d50 <UART_SetConfig+0x144>
 8000c68:	e8df f000 	tbb	[pc, r0]
 8000c6c:	7223ad64 	.word	0x7223ad64
 8000c70:	727272ad 	.word	0x727272ad
 8000c74:	b5          	.byte	0xb5
 8000c75:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000c76:	4b5c      	ldr	r3, [pc, #368]	; (8000de8 <UART_SetConfig+0x1dc>)
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d125      	bne.n	8000cc8 <UART_SetConfig+0xbc>
 8000c7c:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8000c80:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000c82:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8000c86:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000c8a:	f000 8099 	beq.w	8000dc0 <UART_SetConfig+0x1b4>
 8000c8e:	d806      	bhi.n	8000c9e <UART_SetConfig+0x92>
 8000c90:	2800      	cmp	r0, #0
 8000c92:	d0e4      	beq.n	8000c5e <UART_SetConfig+0x52>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000c94:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8000c98:	d05a      	beq.n	8000d50 <UART_SetConfig+0x144>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8000c9a:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 8000c9c:	e057      	b.n	8000d4e <UART_SetConfig+0x142>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000c9e:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
 8000ca2:	f000 8095 	beq.w	8000dd0 <UART_SetConfig+0x1c4>
 8000ca6:	f5b0 3f40 	cmp.w	r0, #196608	; 0x30000
 8000caa:	d1f3      	bne.n	8000c94 <UART_SetConfig+0x88>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000cac:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8000cb0:	d170      	bne.n	8000d94 <UART_SetConfig+0x188>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8000cb2:	6849      	ldr	r1, [r1, #4]
 8000cb4:	084b      	lsrs	r3, r1, #1
 8000cb6:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8000cba:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000cbe:	fbb3 f3f1 	udiv	r3, r3, r1
  HAL_StatusTypeDef ret               = HAL_OK;
 8000cc2:	2000      	movs	r0, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000cc4:	b29b      	uxth	r3, r3
        break;
 8000cc6:	e03c      	b.n	8000d42 <UART_SetConfig+0x136>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000cc8:	4b48      	ldr	r3, [pc, #288]	; (8000dec <UART_SetConfig+0x1e0>)
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d10e      	bne.n	8000cec <UART_SetConfig+0xe0>
 8000cce:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8000cd2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000cd4:	f400 2040 	and.w	r0, r0, #786432	; 0xc0000
 8000cd8:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 8000cdc:	d070      	beq.n	8000dc0 <UART_SetConfig+0x1b4>
 8000cde:	d9d7      	bls.n	8000c90 <UART_SetConfig+0x84>
 8000ce0:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8000ce4:	d074      	beq.n	8000dd0 <UART_SetConfig+0x1c4>
 8000ce6:	f5b0 2f40 	cmp.w	r0, #786432	; 0xc0000
 8000cea:	e7de      	b.n	8000caa <UART_SetConfig+0x9e>
 8000cec:	4b40      	ldr	r3, [pc, #256]	; (8000df0 <UART_SetConfig+0x1e4>)
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	d10e      	bne.n	8000d10 <UART_SetConfig+0x104>
 8000cf2:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8000cf6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000cf8:	f400 1040 	and.w	r0, r0, #3145728	; 0x300000
 8000cfc:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 8000d00:	d05e      	beq.n	8000dc0 <UART_SetConfig+0x1b4>
 8000d02:	d9c5      	bls.n	8000c90 <UART_SetConfig+0x84>
 8000d04:	f5b0 1f00 	cmp.w	r0, #2097152	; 0x200000
 8000d08:	d062      	beq.n	8000dd0 <UART_SetConfig+0x1c4>
 8000d0a:	f5b0 1f40 	cmp.w	r0, #3145728	; 0x300000
 8000d0e:	e7cc      	b.n	8000caa <UART_SetConfig+0x9e>
 8000d10:	4b38      	ldr	r3, [pc, #224]	; (8000df4 <UART_SetConfig+0x1e8>)
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d1be      	bne.n	8000c94 <UART_SetConfig+0x88>
 8000d16:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8000d1a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000d1c:	f400 0040 	and.w	r0, r0, #12582912	; 0xc00000
 8000d20:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 8000d24:	d04c      	beq.n	8000dc0 <UART_SetConfig+0x1b4>
 8000d26:	d9b3      	bls.n	8000c90 <UART_SetConfig+0x84>
 8000d28:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d2c:	d050      	beq.n	8000dd0 <UART_SetConfig+0x1c4>
 8000d2e:	f5b0 0f40 	cmp.w	r0, #12582912	; 0xc00000
 8000d32:	e7ba      	b.n	8000caa <UART_SetConfig+0x9e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8000d34:	6849      	ldr	r1, [r1, #4]
 8000d36:	084b      	lsrs	r3, r1, #1
 8000d38:	f503 0361 	add.w	r3, r3, #14745600	; 0xe10000
 8000d3c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d40:	b29b      	uxth	r3, r3
    brrtemp = usartdiv & 0xFFF0U;
 8000d42:	f023 010f 	bic.w	r1, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000d46:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8000d4a:	430b      	orrs	r3, r1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8000d4c:	60d3      	str	r3, [r2, #12]

}
 8000d4e:	bd30      	pop	{r4, r5, pc}
        ret = HAL_ERROR;
 8000d50:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8000d52:	2300      	movs	r3, #0
 8000d54:	e7f5      	b.n	8000d42 <UART_SetConfig+0x136>
    switch (clocksource)
 8000d56:	2808      	cmp	r0, #8
 8000d58:	d89f      	bhi.n	8000c9a <UART_SetConfig+0x8e>
 8000d5a:	a301      	add	r3, pc, #4	; (adr r3, 8000d60 <UART_SetConfig+0x154>)
 8000d5c:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8000d60:	08000d85 	.word	0x08000d85
 8000d64:	08000dad 	.word	0x08000dad
 8000d68:	08000d95 	.word	0x08000d95
 8000d6c:	08000c9b 	.word	0x08000c9b
 8000d70:	08000dad 	.word	0x08000dad
 8000d74:	08000c9b 	.word	0x08000c9b
 8000d78:	08000c9b 	.word	0x08000c9b
 8000d7c:	08000c9b 	.word	0x08000c9b
 8000d80:	08000db7 	.word	0x08000db7
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8000d84:	6849      	ldr	r1, [r1, #4]
 8000d86:	084b      	lsrs	r3, r1, #1
 8000d88:	f503 03e1 	add.w	r3, r3, #7372800	; 0x708000
 8000d8c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	e7db      	b.n	8000d4c <UART_SetConfig+0x140>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8000d94:	6849      	ldr	r1, [r1, #4]
 8000d96:	084b      	lsrs	r3, r1, #1
 8000d98:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8000d9c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8000da0:	fbb3 f3f1 	udiv	r3, r3, r1
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8000da8:	2000      	movs	r0, #0
        break;
 8000daa:	e7d0      	b.n	8000d4e <UART_SetConfig+0x142>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000dac:	6849      	ldr	r1, [r1, #4]
 8000dae:	084b      	lsrs	r3, r1, #1
 8000db0:	f503 03e1 	add.w	r3, r3, #7372800	; 0x708000
 8000db4:	e7f4      	b.n	8000da0 <UART_SetConfig+0x194>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8000db6:	6849      	ldr	r1, [r1, #4]
 8000db8:	084b      	lsrs	r3, r1, #1
 8000dba:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000dbe:	e7ef      	b.n	8000da0 <UART_SetConfig+0x194>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000dc0:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8000dc4:	d1f2      	bne.n	8000dac <UART_SetConfig+0x1a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000dc6:	6849      	ldr	r1, [r1, #4]
 8000dc8:	084b      	lsrs	r3, r1, #1
 8000dca:	f503 0361 	add.w	r3, r3, #14745600	; 0xe10000
 8000dce:	e776      	b.n	8000cbe <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000dd0:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8000dd4:	d1ef      	bne.n	8000db6 <UART_SetConfig+0x1aa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000dd6:	6849      	ldr	r1, [r1, #4]
 8000dd8:	084b      	lsrs	r3, r1, #1
 8000dda:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000dde:	e76e      	b.n	8000cbe <UART_SetConfig+0xb2>
 8000de0:	40013800 	.word	0x40013800
 8000de4:	08001064 	.word	0x08001064
 8000de8:	40004400 	.word	0x40004400
 8000dec:	40004800 	.word	0x40004800
 8000df0:	40004c00 	.word	0x40004c00
 8000df4:	40005000 	.word	0x40005000

08000df8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8000df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dfa:	9d06      	ldr	r5, [sp, #24]
 8000dfc:	4604      	mov	r4, r0
 8000dfe:	4616      	mov	r6, r2
 8000e00:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000e02:	6820      	ldr	r0, [r4, #0]
 8000e04:	69c2      	ldr	r2, [r0, #28]
 8000e06:	ea31 0302 	bics.w	r3, r1, r2
 8000e0a:	bf0c      	ite	eq
 8000e0c:	2201      	moveq	r2, #1
 8000e0e:	2200      	movne	r2, #0
 8000e10:	42b2      	cmp	r2, r6
 8000e12:	d001      	beq.n	8000e18 <UART_WaitOnFlagUntilTimeout+0x20>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8000e14:	2000      	movs	r0, #0
 8000e16:	e014      	b.n	8000e42 <UART_WaitOnFlagUntilTimeout+0x4a>
    if(Timeout != HAL_MAX_DELAY)
 8000e18:	1c6b      	adds	r3, r5, #1
 8000e1a:	d0f3      	beq.n	8000e04 <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000e1c:	b995      	cbnz	r5, 8000e44 <UART_WaitOnFlagUntilTimeout+0x4c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000e1e:	6823      	ldr	r3, [r4, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000e26:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000e28:	689a      	ldr	r2, [r3, #8]
 8000e2a:	f022 0201 	bic.w	r2, r2, #1
 8000e2e:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8000e30:	2320      	movs	r3, #32
 8000e32:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8000e36:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8000e40:	2003      	movs	r0, #3
}
 8000e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000e44:	f7ff fb02 	bl	800044c <HAL_GetTick>
 8000e48:	1bc0      	subs	r0, r0, r7
 8000e4a:	42a8      	cmp	r0, r5
 8000e4c:	d9d9      	bls.n	8000e02 <UART_WaitOnFlagUntilTimeout+0xa>
 8000e4e:	e7e6      	b.n	8000e1e <UART_WaitOnFlagUntilTimeout+0x26>

08000e50 <UART_CheckIdleState>:
{
 8000e50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000e52:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e54:	2100      	movs	r1, #0
 8000e56:	66c1      	str	r1, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8000e58:	f7ff faf8 	bl	800044c <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8000e5c:	6823      	ldr	r3, [r4, #0]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8000e62:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8000e64:	d417      	bmi.n	8000e96 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8000e66:	6823      	ldr	r3, [r4, #0]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	075b      	lsls	r3, r3, #29
 8000e6c:	d50a      	bpl.n	8000e84 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8000e6e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8000e72:	9300      	str	r3, [sp, #0]
 8000e74:	2200      	movs	r2, #0
 8000e76:	462b      	mov	r3, r5
 8000e78:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8000e7c:	4620      	mov	r0, r4
 8000e7e:	f7ff ffbb 	bl	8000df8 <UART_WaitOnFlagUntilTimeout>
 8000e82:	b9a0      	cbnz	r0, 8000eae <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8000e84:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8000e86:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8000e88:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8000e8c:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8000e90:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8000e94:	e00c      	b.n	8000eb0 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8000e96:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8000e9a:	9300      	str	r3, [sp, #0]
 8000e9c:	460a      	mov	r2, r1
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8000ea4:	4620      	mov	r0, r4
 8000ea6:	f7ff ffa7 	bl	8000df8 <UART_WaitOnFlagUntilTimeout>
 8000eaa:	2800      	cmp	r0, #0
 8000eac:	d0db      	beq.n	8000e66 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8000eae:	2003      	movs	r0, #3
}
 8000eb0:	b003      	add	sp, #12
 8000eb2:	bd30      	pop	{r4, r5, pc}

08000eb4 <HAL_UART_Init>:
{
 8000eb4:	b510      	push	{r4, lr}
  if(huart == NULL)
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	b328      	cbz	r0, 8000f06 <HAL_UART_Init+0x52>
  if(huart->gState == HAL_UART_STATE_RESET)
 8000eba:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8000ebe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000ec2:	b90b      	cbnz	r3, 8000ec8 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 8000ec4:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
  __HAL_UART_DISABLE(huart);
 8000ec8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000eca:	2324      	movs	r3, #36	; 0x24
 8000ecc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8000ed0:	6813      	ldr	r3, [r2, #0]
 8000ed2:	f023 0301 	bic.w	r3, r3, #1
 8000ed6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8000ed8:	4620      	mov	r0, r4
 8000eda:	f7ff fe97 	bl	8000c0c <UART_SetConfig>
 8000ede:	2801      	cmp	r0, #1
 8000ee0:	d011      	beq.n	8000f06 <HAL_UART_Init+0x52>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000ee2:	6823      	ldr	r3, [r4, #0]
 8000ee4:	685a      	ldr	r2, [r3, #4]
 8000ee6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000eea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000eec:	689a      	ldr	r2, [r3, #8]
 8000eee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000ef2:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	f042 0201 	orr.w	r2, r2, #1
  return UART_CheckIdleState(huart);
 8000efa:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8000efc:	601a      	str	r2, [r3, #0]
}
 8000efe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return UART_CheckIdleState(huart);
 8000f02:	f7ff bfa5 	b.w	8000e50 <UART_CheckIdleState>
}
 8000f06:	2001      	movs	r0, #1
 8000f08:	bd10      	pop	{r4, pc}

08000f0a <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000f0c:	461f      	mov	r7, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8000f0e:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8000f12:	2b20      	cmp	r3, #32
{
 8000f14:	460d      	mov	r5, r1
 8000f16:	4604      	mov	r4, r0
 8000f18:	4611      	mov	r1, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8000f1a:	d14a      	bne.n	8000fb2 <HAL_UART_Transmit+0xa8>
  {
    if((pData == NULL ) || (Size == 0U))
 8000f1c:	2d00      	cmp	r5, #0
 8000f1e:	d046      	beq.n	8000fae <HAL_UART_Transmit+0xa4>
 8000f20:	2a00      	cmp	r2, #0
 8000f22:	d044      	beq.n	8000fae <HAL_UART_Transmit+0xa4>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8000f24:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d042      	beq.n	8000fb2 <HAL_UART_Transmit+0xa8>
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f32:	2300      	movs	r3, #0
 8000f34:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000f36:	2321      	movs	r3, #33	; 0x21
 8000f38:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8000f3c:	f7ff fa86 	bl	800044c <HAL_GetTick>
 8000f40:	4606      	mov	r6, r0

    huart->TxXferSize = Size;
 8000f42:	f8a4 1050 	strh.w	r1, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8000f46:	f8a4 1052 	strh.w	r1, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8000f4a:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8000f4e:	b292      	uxth	r2, r2
 8000f50:	b962      	cbnz	r2, 8000f6c <HAL_UART_Transmit+0x62>
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000f52:	9700      	str	r7, [sp, #0]
 8000f54:	4633      	mov	r3, r6
 8000f56:	2140      	movs	r1, #64	; 0x40
 8000f58:	4620      	mov	r0, r4
 8000f5a:	f7ff ff4d 	bl	8000df8 <UART_WaitOnFlagUntilTimeout>
 8000f5e:	b998      	cbnz	r0, 8000f88 <HAL_UART_Transmit+0x7e>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8000f60:	2320      	movs	r3, #32
 8000f62:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8000f66:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

    return HAL_OK;
 8000f6a:	e00e      	b.n	8000f8a <HAL_UART_Transmit+0x80>
      huart->TxXferCount--;
 8000f6c:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000f70:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 8000f72:	3b01      	subs	r3, #1
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	4633      	mov	r3, r6
 8000f7e:	2180      	movs	r1, #128	; 0x80
 8000f80:	4620      	mov	r0, r4
 8000f82:	f7ff ff39 	bl	8000df8 <UART_WaitOnFlagUntilTimeout>
 8000f86:	b110      	cbz	r0, 8000f8e <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8000f88:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8000f8a:	b003      	add	sp, #12
 8000f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000f8e:	68a3      	ldr	r3, [r4, #8]
 8000f90:	6822      	ldr	r2, [r4, #0]
 8000f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f96:	d107      	bne.n	8000fa8 <HAL_UART_Transmit+0x9e>
 8000f98:	6923      	ldr	r3, [r4, #16]
 8000f9a:	b92b      	cbnz	r3, 8000fa8 <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8000f9c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8000fa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8000fa4:	8513      	strh	r3, [r2, #40]	; 0x28
 8000fa6:	e7d0      	b.n	8000f4a <HAL_UART_Transmit+0x40>
 8000fa8:	f815 3b01 	ldrb.w	r3, [r5], #1
 8000fac:	e7fa      	b.n	8000fa4 <HAL_UART_Transmit+0x9a>
      return  HAL_ERROR;
 8000fae:	2001      	movs	r0, #1
 8000fb0:	e7eb      	b.n	8000f8a <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 8000fb2:	2002      	movs	r0, #2
 8000fb4:	e7e9      	b.n	8000f8a <HAL_UART_Transmit+0x80>
 8000fb6:	0000      	movs	r0, r0

08000fb8 <Reset_Handler>:
 8000fb8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000fba:	e003      	b.n	8000fc4 <LoopCopyDataInit>

08000fbc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <LoopForever+0x2>)
	ldr	r3, [r3, r1]
 8000fbe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000fc0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000fc2:	3104      	adds	r1, #4

08000fc4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000fc4:	480a      	ldr	r0, [pc, #40]	; (8000ff0 <LoopForever+0x6>)
	ldr	r3, =_edata
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <LoopForever+0xa>)
	adds	r2, r0, r1
 8000fc8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000fca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000fcc:	d3f6      	bcc.n	8000fbc <CopyDataInit>
	ldr	r2, =_sbss
 8000fce:	4a0a      	ldr	r2, [pc, #40]	; (8000ff8 <LoopForever+0xe>)
	b	LoopFillZerobss
 8000fd0:	e002      	b.n	8000fd8 <LoopFillZerobss>

08000fd2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs r3, #0
 8000fd2:	2300      	movs	r3, #0
 	str  r3, [r2]
 8000fd4:	6013      	str	r3, [r2, #0]
	adds r2, r2, #4
 8000fd6:	3204      	adds	r2, #4

08000fd8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000fd8:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <LoopForever+0x12>)
	cmp	r2, r3
 8000fda:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000fdc:	d3f9      	bcc.n	8000fd2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fde:	f3af 8000 	nop.w
/* Call static constructors */
    bl __libc_init_array
 8000fe2:	f000 f80f 	bl	8001004 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fe6:	f7ff f965 	bl	80002b4 <main>

08000fea <LoopForever>:



LoopForever:
    b LoopForever
 8000fea:	e7fe      	b.n	8000fea <LoopForever>
 8000fec:	08001094 	.word	0x08001094
 8000ff0:	20000000 	.word	0x20000000
 8000ff4:	20000454 	.word	0x20000454
 8000ff8:	20000454 	.word	0x20000454
 8000ffc:	200004e8 	.word	0x200004e8

08001000 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001000:	e7fe      	b.n	8001000 <BusFault_Handler>
 8001002:	0000      	movs	r0, r0

08001004 <__libc_init_array>:
 8001004:	b570      	push	{r4, r5, r6, lr}
 8001006:	4d0d      	ldr	r5, [pc, #52]	; (800103c <__libc_init_array+0x38>)
 8001008:	4c0d      	ldr	r4, [pc, #52]	; (8001040 <__libc_init_array+0x3c>)
 800100a:	1b64      	subs	r4, r4, r5
 800100c:	10a4      	asrs	r4, r4, #2
 800100e:	2600      	movs	r6, #0
 8001010:	42a6      	cmp	r6, r4
 8001012:	d109      	bne.n	8001028 <__libc_init_array+0x24>
 8001014:	4d0b      	ldr	r5, [pc, #44]	; (8001044 <__libc_init_array+0x40>)
 8001016:	4c0c      	ldr	r4, [pc, #48]	; (8001048 <__libc_init_array+0x44>)
 8001018:	f000 f818 	bl	800104c <_init>
 800101c:	1b64      	subs	r4, r4, r5
 800101e:	10a4      	asrs	r4, r4, #2
 8001020:	2600      	movs	r6, #0
 8001022:	42a6      	cmp	r6, r4
 8001024:	d105      	bne.n	8001032 <__libc_init_array+0x2e>
 8001026:	bd70      	pop	{r4, r5, r6, pc}
 8001028:	f855 3b04 	ldr.w	r3, [r5], #4
 800102c:	4798      	blx	r3
 800102e:	3601      	adds	r6, #1
 8001030:	e7ee      	b.n	8001010 <__libc_init_array+0xc>
 8001032:	f855 3b04 	ldr.w	r3, [r5], #4
 8001036:	4798      	blx	r3
 8001038:	3601      	adds	r6, #1
 800103a:	e7f2      	b.n	8001022 <__libc_init_array+0x1e>
 800103c:	0800108c 	.word	0x0800108c
 8001040:	0800108c 	.word	0x0800108c
 8001044:	0800108c 	.word	0x0800108c
 8001048:	08001090 	.word	0x08001090

0800104c <_init>:
 800104c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800104e:	bf00      	nop
 8001050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001052:	bc08      	pop	{r3}
 8001054:	469e      	mov	lr, r3
 8001056:	4770      	bx	lr

08001058 <_fini>:
 8001058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800105a:	bf00      	nop
 800105c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800105e:	bc08      	pop	{r3}
 8001060:	469e      	mov	lr, r3
 8001062:	4770      	bx	lr
