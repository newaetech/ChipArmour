
image-demo-CWLITEARM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000184c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080019dc  080019dc  000119dc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a44  08001a44  000204b8  2**0
                  CONTENTS
  4 .ARM          00000000  08001a44  08001a44  000204b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a44  08001a44  000204b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a44  08001a44  00011a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a48  08001a48  00011a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004b8  20000000  08001a4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  200004b8  08001f04  000204b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  2000055c  08001f04  0002055c  2**0
                  ALLOC
 11 .ARM.attributes 0000002c  00000000  00000000  000204b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000565b  00000000  00000000  000204e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000c08  00000000  00000000  00025b3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001a55  00000000  00000000  00026747  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001a8  00000000  00000000  0002819c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000370  00000000  00000000  00028344  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000013ef  00000000  00000000  000286b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000018c0  00000000  00000000  00029aa3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007f  00000000  00000000  0002b363  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000884  00000000  00000000  0002b3e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000144  00000000  00000000  0002bc68  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000077  00000000  00000000  0002bdac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200004b8 	.word	0x200004b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080019c4 	.word	0x080019c4

080001b4 <frame_dummy>:
 80001b4:	4b0c      	ldr	r3, [pc, #48]	; (80001e8 <frame_dummy+0x34>)
 80001b6:	b143      	cbz	r3, 80001ca <frame_dummy+0x16>
 80001b8:	480c      	ldr	r0, [pc, #48]	; (80001ec <frame_dummy+0x38>)
 80001ba:	490d      	ldr	r1, [pc, #52]	; (80001f0 <frame_dummy+0x3c>)
 80001bc:	b510      	push	{r4, lr}
 80001be:	f3af 8000 	nop.w
 80001c2:	480c      	ldr	r0, [pc, #48]	; (80001f4 <frame_dummy+0x40>)
 80001c4:	6803      	ldr	r3, [r0, #0]
 80001c6:	b923      	cbnz	r3, 80001d2 <frame_dummy+0x1e>
 80001c8:	bd10      	pop	{r4, pc}
 80001ca:	480a      	ldr	r0, [pc, #40]	; (80001f4 <frame_dummy+0x40>)
 80001cc:	6803      	ldr	r3, [r0, #0]
 80001ce:	b933      	cbnz	r3, 80001de <frame_dummy+0x2a>
 80001d0:	4770      	bx	lr
 80001d2:	4b09      	ldr	r3, [pc, #36]	; (80001f8 <frame_dummy+0x44>)
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d0f7      	beq.n	80001c8 <frame_dummy+0x14>
 80001d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80001dc:	4718      	bx	r3
 80001de:	4b06      	ldr	r3, [pc, #24]	; (80001f8 <frame_dummy+0x44>)
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d0f5      	beq.n	80001d0 <frame_dummy+0x1c>
 80001e4:	4718      	bx	r3
 80001e6:	bf00      	nop
 80001e8:	00000000 	.word	0x00000000
 80001ec:	080019c4 	.word	0x080019c4
 80001f0:	200004bc 	.word	0x200004bc
 80001f4:	200004b8 	.word	0x200004b8
 80001f8:	00000000 	.word	0x00000000
 80001fc:	00000000 	.word	0x00000000

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <puts>:

int snprintf(char *, size_t, char *, ...);

/* Avoid stdio.h as not sure what platform provides */
int puts(const char * s)
{
 80002a0:	b538      	push	{r3, r4, r5, lr}
 80002a2:	1e45      	subs	r5, r0, #1
    while(*s){
 80002a4:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 80002a8:	b924      	cbnz	r4, 80002b4 <puts+0x14>
        putch(*s++);
    }
    putch('\n');
 80002aa:	200a      	movs	r0, #10
 80002ac:	f000 f932 	bl	8000514 <putch>
    
    return 0;
}
 80002b0:	4620      	mov	r0, r4
 80002b2:	bd38      	pop	{r3, r4, r5, pc}
        putch(*s++);
 80002b4:	4620      	mov	r0, r4
 80002b6:	f000 f92d 	bl	8000514 <putch>
 80002ba:	e7f3      	b.n	80002a4 <puts+0x4>

080002bc <some_hash_function>:
/**
 This would be a SHA256 hash in real bootloaders, here a dumb 32-bit thingy is
 done instead to simplify the example. (NOTE: THIS FUNCTION IS NOT A HASH! IT'S FOR DEMO!)
 */
uint32_t some_hash_function(uint8_t * image, uint32_t data_len)
{
 80002bc:	4603      	mov	r3, r0
 80002be:	4401      	add	r1, r0
    uint32_t temp;
    uint32_t hash = 0;
 80002c0:	2000      	movs	r0, #0
    uint32_t i = 0;
    
    while(data_len){
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d100      	bne.n	80002c8 <some_hash_function+0xc>
        data_len--;
    }

    
    return hash;
}
 80002c6:	4770      	bx	lr
        hash ^= image[i++];
 80002c8:	f813 2b01 	ldrb.w	r2, [r3], #1
        hash ^= temp;
 80002cc:	ea82 6030 	eor.w	r0, r2, r0, ror #24
 80002d0:	e7f7      	b.n	80002c2 <some_hash_function+0x6>
 80002d2:	0000      	movs	r0, r0

080002d4 <some_crypto_function>:
/**
 This would be a pub-key enc/dec function such as RSA. Here a dumb 32-bit thingy is
 done instead to simplify the example. (NOTE: THIS FUNCTION IS NOT PUBLIC KEY CRYPTO! IT'S FOR DEMO!)
*/
uint32_t some_crypto_function(uint32_t user_signature, uint8_t manf_public_key[])
{
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	b0c3      	sub	sp, #268	; 0x10c
 80002d8:	ad01      	add	r5, sp, #4
    
    uint32_t temp;
    uint32_t hash = 0;    
    
    for(uint32_t i = 0; i < 4; i++){
 80002da:	2300      	movs	r3, #0
{
 80002dc:	6028      	str	r0, [r5, #0]
    uint32_t hash = 0;    
 80002de:	461c      	mov	r4, r3
        temp = (hash >> 24);
        hash = hash << 8;
        hash ^= manf_public_key[i];
        hash ^= *((uint8_t*)(&user_signature) + i);
        hash ^= temp;
 80002e0:	5cca      	ldrb	r2, [r1, r3]
 80002e2:	5ce8      	ldrb	r0, [r5, r3]
    for(uint32_t i = 0; i < 4; i++){
 80002e4:	3301      	adds	r3, #1
        hash ^= temp;
 80002e6:	4042      	eors	r2, r0
    for(uint32_t i = 0; i < 4; i++){
 80002e8:	2b04      	cmp	r3, #4
        hash ^= temp;
 80002ea:	ea82 6434 	eor.w	r4, r2, r4, ror #24
    for(uint32_t i = 0; i < 4; i++){
 80002ee:	d1f7      	bne.n	80002e0 <some_crypto_function+0xc>
    }
    
    char buf[256];
    snprintf(buf, 255, "Hash: %#lX\n", hash);
 80002f0:	4623      	mov	r3, r4
 80002f2:	4a05      	ldr	r2, [pc, #20]	; (8000308 <some_crypto_function+0x34>)
 80002f4:	21ff      	movs	r1, #255	; 0xff
 80002f6:	a802      	add	r0, sp, #8
 80002f8:	f000 ff36 	bl	8001168 <sniprintf>
    puts(buf);
 80002fc:	a802      	add	r0, sp, #8
 80002fe:	f7ff ffcf 	bl	80002a0 <puts>
    return hash;
}
 8000302:	4620      	mov	r0, r4
 8000304:	b043      	add	sp, #268	; 0x10c
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	080019ef 	.word	0x080019ef

0800030c <rtos_init>:

/** RTOS init function */
void rtos_init(void)
{
    puts("RTOS Booted!\n");
 800030c:	4801      	ldr	r0, [pc, #4]	; (8000314 <rtos_init+0x8>)
 800030e:	f7ff bfc7 	b.w	80002a0 <puts>
 8000312:	bf00      	nop
 8000314:	080019fb 	.word	0x080019fb

08000318 <boot_new_image>:

/**
 Firmware update function, called once we know all images are OK.
 */
 void boot_new_image(image_t * image)
 {
 8000318:	b510      	push	{r4, lr}
 800031a:	4604      	mov	r4, r0
     puts("Booting image ");
 800031c:	4805      	ldr	r0, [pc, #20]	; (8000334 <boot_new_image+0x1c>)
 800031e:	f7ff ffbf 	bl	80002a0 <puts>
     puts(image->image_name);
 8000322:	4620      	mov	r0, r4
 8000324:	f7ff ffbc 	bl	80002a0 <puts>
     puts("\n");
 8000328:	4803      	ldr	r0, [pc, #12]	; (8000338 <boot_new_image+0x20>)
     
     //Here would go code to actually do the real stuff
 }
 800032a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     puts("\n");
 800032e:	f7ff bfb7 	b.w	80002a0 <puts>
 8000332:	bf00      	nop
 8000334:	080019e0 	.word	0x080019e0
 8000338:	08001a07 	.word	0x08001a07

0800033c <validate_sigature>:

/**
 Original validation function which is vulnerable to FI.
 */
int validate_sigature(uint32_t short_hash, uint32_t signature, uint8_t * pub_key)
{
 800033c:	b570      	push	{r4, r5, r6, lr}
 800033e:	4616      	mov	r6, r2
 8000340:	4605      	mov	r5, r0
 8000342:	460c      	mov	r4, r1
    trigger_high();
 8000344:	f000 f8d8 	bl	80004f8 <trigger_high>
    if (some_crypto_function(short_hash, pub_key) == signature){
 8000348:	4631      	mov	r1, r6
 800034a:	4628      	mov	r0, r5
 800034c:	f7ff ffc2 	bl	80002d4 <some_crypto_function>
        return 1;
    } else {
        return 0;
    }
}
 8000350:	1b03      	subs	r3, r0, r4
 8000352:	4258      	negs	r0, r3
 8000354:	4158      	adcs	r0, r3
 8000356:	bd70      	pop	{r4, r5, r6, pc}

08000358 <checkfwupdate_original>:

/**
 Original function which is vulnerable to FI.
 */
int checkfwupdate_original(void)
{
 8000358:	b538      	push	{r3, r4, r5, lr}
    //Flag indicates new firmware file present
    if(bootloader_flag == FLAG_PENDING_UPDATE){
 800035a:	4c0f      	ldr	r4, [pc, #60]	; (8000398 <checkfwupdate_original+0x40>)
 800035c:	4b0f      	ldr	r3, [pc, #60]	; (800039c <checkfwupdate_original+0x44>)
 800035e:	6822      	ldr	r2, [r4, #0]
 8000360:	429a      	cmp	r2, r3
 8000362:	d112      	bne.n	800038a <checkfwupdate_original+0x32>
        
        //Check signature matches proposed hashes
        //glitch vulnerability here
        if (validate_sigature(some_hash_function(image.image_data, image.image_data_len),
 8000364:	f8d4 144c 	ldr.w	r1, [r4, #1100]	; 0x44c
 8000368:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 800036c:	f7ff ffa6 	bl	80002bc <some_hash_function>
 8000370:	1d22      	adds	r2, r4, #4
 8000372:	f8d4 1450 	ldr.w	r1, [r4, #1104]	; 0x450
 8000376:	f7ff ffe1 	bl	800033c <validate_sigature>
 800037a:	4605      	mov	r5, r0
 800037c:	b138      	cbz	r0, 800038e <checkfwupdate_original+0x36>
                              image.signature, manf_public_key)) {
            
            trigger_low();
 800037e:	f000 f8c2 	bl	8000506 <trigger_low>
            boot_new_image(&image);
 8000382:	f104 000c 	add.w	r0, r4, #12
 8000386:	f7ff ffc7 	bl	8000318 <boot_new_image>
            bootloader_flag = 0;
        }
    }
    
    return 0;
}
 800038a:	2000      	movs	r0, #0
 800038c:	bd38      	pop	{r3, r4, r5, pc}
            trigger_low();
 800038e:	f000 f8ba 	bl	8000506 <trigger_low>
            bootloader_flag = 0;
 8000392:	6025      	str	r5, [r4, #0]
 8000394:	e7f9      	b.n	800038a <checkfwupdate_original+0x32>
 8000396:	bf00      	nop
 8000398:	20000000 	.word	0x20000000
 800039c:	feedb347 	.word	0xfeedb347

080003a0 <main>:
{
 80003a0:	b508      	push	{r3, lr}
    platform_init();
 80003a2:	f000 f809 	bl	80003b8 <platform_init>
    init_uart();
 80003a6:	f000 f847 	bl	8000438 <init_uart>
    trigger_setup();
 80003aa:	f000 f881 	bl	80004b0 <trigger_setup>
    checkfwupdate_original();
 80003ae:	f7ff ffd3 	bl	8000358 <checkfwupdate_original>
    rtos_init();
 80003b2:	f7ff ffab 	bl	800030c <rtos_init>
 80003b6:	e7fe      	b.n	80003b6 <main+0x16>

080003b8 <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 80003b8:	b570      	push	{r4, r5, r6, lr}
 80003ba:	b096      	sub	sp, #88	; 0x58
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
  #else
     RCC_OscInitTypeDef RCC_OscInitStruct;
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 80003bc:	2400      	movs	r4, #0
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
 80003be:	2603      	movs	r6, #3
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 80003c0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80003c4:	a80c      	add	r0, sp, #48	; 0x30

     RCC_ClkInitTypeDef RCC_ClkInitStruct;
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 80003c6:	2501      	movs	r5, #1
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 80003c8:	930d      	str	r3, [sp, #52]	; 0x34
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 80003ca:	9410      	str	r4, [sp, #64]	; 0x40
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 80003cc:	9414      	str	r4, [sp, #80]	; 0x50
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
 80003ce:	960c      	str	r6, [sp, #48]	; 0x30
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80003d0:	f000 f8b8 	bl	8000544 <HAL_RCC_OscConfig>
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80003d4:	230f      	movs	r3, #15
     RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
     uint32_t flash_latency = 0;
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 80003d6:	4621      	mov	r1, r4
 80003d8:	a802      	add	r0, sp, #8
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80003da:	9302      	str	r3, [sp, #8]
     RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 80003dc:	9404      	str	r4, [sp, #16]
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003de:	9405      	str	r4, [sp, #20]
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003e0:	9406      	str	r4, [sp, #24]
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 80003e2:	9503      	str	r5, [sp, #12]
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 80003e4:	f000 fb18 	bl	8000a18 <HAL_RCC_ClockConfig>




#if (PLATFORM==CWLITEARM)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003e8:	4b11      	ldr	r3, [pc, #68]	; (8000430 <platform_init+0x78>)
 80003ea:	695a      	ldr	r2, [r3, #20]
 80003ec:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80003f0:	615a      	str	r2, [r3, #20]
 80003f2:	695b      	ldr	r3, [r3, #20]
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
  GpioInit.Pull      = GPIO_NOPULL;
 80003f4:	9409      	str	r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOC, &GpioInit);
 80003fa:	4c0e      	ldr	r4, [pc, #56]	; (8000434 <platform_init+0x7c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003fc:	9301      	str	r3, [sp, #4]
 80003fe:	9b01      	ldr	r3, [sp, #4]
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000400:	9508      	str	r5, [sp, #32]
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
 8000402:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8000406:	a907      	add	r1, sp, #28
 8000408:	4620      	mov	r0, r4
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
 800040a:	9307      	str	r3, [sp, #28]
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 800040c:	960a      	str	r6, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GpioInit);
 800040e:	f000 fba9 	bl	8000b64 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8000412:	462a      	mov	r2, r5
 8000414:	4620      	mov	r0, r4
 8000416:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800041a:	f000 fc65 	bl	8000ce8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 800041e:	462a      	mov	r2, r5
 8000420:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000424:	4620      	mov	r0, r4
 8000426:	f000 fc5f 	bl	8000ce8 <HAL_GPIO_WritePin>
#endif
}
 800042a:	b016      	add	sp, #88	; 0x58
 800042c:	bd70      	pop	{r4, r5, r6, pc}
 800042e:	bf00      	nop
 8000430:	40021000 	.word	0x40021000
 8000434:	48000800 	.word	0x48000800

08000438 <init_uart>:

void init_uart(void)
{
 8000438:	b510      	push	{r4, lr}
 800043a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
 800043c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000440:	9303      	str	r3, [sp, #12]
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 8000442:	2302      	movs	r3, #2
 8000444:	9304      	str	r3, [sp, #16]
  GpioInit.Pull      = GPIO_PULLUP;
 8000446:	2301      	movs	r3, #1
 8000448:	9305      	str	r3, [sp, #20]
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 800044a:	2303      	movs	r3, #3
  GpioInit.Alternate = GPIO_AF7_USART1;
  __GPIOA_CLK_ENABLE();
 800044c:	4c15      	ldr	r4, [pc, #84]	; (80004a4 <init_uart+0x6c>)
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 800044e:	9306      	str	r3, [sp, #24]
  GpioInit.Alternate = GPIO_AF7_USART1;
 8000450:	2307      	movs	r3, #7
 8000452:	9307      	str	r3, [sp, #28]
  __GPIOA_CLK_ENABLE();
 8000454:	6963      	ldr	r3, [r4, #20]
 8000456:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800045a:	6163      	str	r3, [r4, #20]
 800045c:	6963      	ldr	r3, [r4, #20]
 800045e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000462:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8000464:	a903      	add	r1, sp, #12
 8000466:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __GPIOA_CLK_ENABLE();
 800046a:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 800046c:	f000 fb7a 	bl	8000b64 <HAL_GPIO_Init>

  UartHandle.Instance        = USART1;
 8000470:	480d      	ldr	r0, [pc, #52]	; (80004a8 <init_uart+0x70>)
  UartHandle.Init.BaudRate   = 38400;
 8000472:	4b0e      	ldr	r3, [pc, #56]	; (80004ac <init_uart+0x74>)
 8000474:	f44f 4e16 	mov.w	lr, #38400	; 0x9600
 8000478:	e880 4008 	stmia.w	r0, {r3, lr}
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800047c:	2300      	movs	r3, #0
 800047e:	6083      	str	r3, [r0, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000480:	60c3      	str	r3, [r0, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8000482:	6103      	str	r3, [r0, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000484:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8000486:	230c      	movs	r3, #12
 8000488:	6143      	str	r3, [r0, #20]
  __USART1_CLK_ENABLE();
 800048a:	69a3      	ldr	r3, [r4, #24]
 800048c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000490:	61a3      	str	r3, [r4, #24]
 8000492:	69a3      	ldr	r3, [r4, #24]
 8000494:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000498:	9302      	str	r3, [sp, #8]
 800049a:	9b02      	ldr	r3, [sp, #8]
  HAL_UART_Init(&UartHandle);
 800049c:	f000 fd78 	bl	8000f90 <HAL_UART_Init>
}
 80004a0:	b008      	add	sp, #32
 80004a2:	bd10      	pop	{r4, pc}
 80004a4:	40021000 	.word	0x40021000
 80004a8:	200004e8 	.word	0x200004e8
 80004ac:	40013800 	.word	0x40013800

080004b0 <trigger_setup>:

void trigger_setup(void)
{
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b0:	4b10      	ldr	r3, [pc, #64]	; (80004f4 <trigger_setup+0x44>)
{
 80004b2:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b4:	695a      	ldr	r2, [r3, #20]
 80004b6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80004ba:	615a      	str	r2, [r3, #20]
 80004bc:	695b      	ldr	r3, [r3, #20]
{
 80004be:	b087      	sub	sp, #28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004c4:	9300      	str	r3, [sp, #0]
 80004c6:	9b00      	ldr	r3, [sp, #0]

  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_12;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 80004c8:	2301      	movs	r3, #1
  GpioInit.Pin       = GPIO_PIN_12;
 80004ca:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 80004ce:	9302      	str	r3, [sp, #8]
  GpioInit.Pull      = GPIO_NOPULL;
 80004d0:	2500      	movs	r5, #0
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80004d2:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GpioInit);
 80004d4:	a901      	add	r1, sp, #4
 80004d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80004da:	9304      	str	r3, [sp, #16]
  GpioInit.Pin       = GPIO_PIN_12;
 80004dc:	9401      	str	r4, [sp, #4]
  GpioInit.Pull      = GPIO_NOPULL;
 80004de:	9503      	str	r5, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 80004e0:	f000 fb40 	bl	8000b64 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 80004e4:	462a      	mov	r2, r5
 80004e6:	4621      	mov	r1, r4
 80004e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ec:	f000 fbfc 	bl	8000ce8 <HAL_GPIO_WritePin>
}
 80004f0:	b007      	add	sp, #28
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	40021000 	.word	0x40021000

080004f8 <trigger_high>:

void trigger_high(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 80004f8:	2201      	movs	r2, #1
 80004fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000502:	f000 bbf1 	b.w	8000ce8 <HAL_GPIO_WritePin>

08000506 <trigger_low>:
}

void trigger_low(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800050c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000510:	f000 bbea 	b.w	8000ce8 <HAL_GPIO_WritePin>

08000514 <putch>:
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK);
  return d;
}

void putch(char c)
{
 8000514:	b507      	push	{r0, r1, r2, lr}
  uint8_t d  = c;
 8000516:	a902      	add	r1, sp, #8
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8000518:	f241 3388 	movw	r3, #5000	; 0x1388
  uint8_t d  = c;
 800051c:	f801 0d01 	strb.w	r0, [r1, #-1]!
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8000520:	2201      	movs	r2, #1
 8000522:	4803      	ldr	r0, [pc, #12]	; (8000530 <putch+0x1c>)
 8000524:	f000 fd5f 	bl	8000fe6 <HAL_UART_Transmit>
}
 8000528:	b003      	add	sp, #12
 800052a:	f85d fb04 	ldr.w	pc, [sp], #4
 800052e:	bf00      	nop
 8000530:	200004e8 	.word	0x200004e8

08000534 <HAL_GetTick>:
	hal_sys_tick = 0;
	return HAL_OK;
}
uint32_t HAL_GetTick(void)
{
	return hal_sys_tick++;
 8000534:	4b02      	ldr	r3, [pc, #8]	; (8000540 <HAL_GetTick+0xc>)
 8000536:	6818      	ldr	r0, [r3, #0]
 8000538:	1c42      	adds	r2, r0, #1
 800053a:	601a      	str	r2, [r3, #0]
}
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	200004d4 	.word	0x200004d4

08000544 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000544:	6803      	ldr	r3, [r0, #0]
{
 8000546:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800054a:	07d9      	lsls	r1, r3, #31
{
 800054c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800054e:	d411      	bmi.n	8000574 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000550:	6823      	ldr	r3, [r4, #0]
 8000552:	079a      	lsls	r2, r3, #30
 8000554:	f100 8086 	bmi.w	8000664 <HAL_RCC_OscConfig+0x120>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000558:	6823      	ldr	r3, [r4, #0]
 800055a:	071e      	lsls	r6, r3, #28
 800055c:	f100 80f4 	bmi.w	8000748 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000560:	6823      	ldr	r3, [r4, #0]
 8000562:	075d      	lsls	r5, r3, #29
 8000564:	f100 813b 	bmi.w	80007de <HAL_RCC_OscConfig+0x29a>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000568:	69e2      	ldr	r2, [r4, #28]
 800056a:	2a00      	cmp	r2, #0
 800056c:	f040 81cf 	bne.w	800090e <HAL_RCC_OscConfig+0x3ca>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000570:	2000      	movs	r0, #0
 8000572:	e021      	b.n	80005b8 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000574:	49b7      	ldr	r1, [pc, #732]	; (8000854 <HAL_RCC_OscConfig+0x310>)
 8000576:	684b      	ldr	r3, [r1, #4]
 8000578:	f003 030c 	and.w	r3, r3, #12
 800057c:	2b04      	cmp	r3, #4
 800057e:	d007      	beq.n	8000590 <HAL_RCC_OscConfig+0x4c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000580:	684b      	ldr	r3, [r1, #4]
 8000582:	f003 030c 	and.w	r3, r3, #12
 8000586:	2b08      	cmp	r3, #8
 8000588:	d119      	bne.n	80005be <HAL_RCC_OscConfig+0x7a>
 800058a:	684b      	ldr	r3, [r1, #4]
 800058c:	03db      	lsls	r3, r3, #15
 800058e:	d516      	bpl.n	80005be <HAL_RCC_OscConfig+0x7a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000590:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000594:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000598:	6809      	ldr	r1, [r1, #0]
 800059a:	fa93 f3a3 	rbit	r3, r3
 800059e:	fab3 f383 	clz	r3, r3
 80005a2:	f003 031f 	and.w	r3, r3, #31
 80005a6:	2201      	movs	r2, #1
 80005a8:	fa02 f303 	lsl.w	r3, r2, r3
 80005ac:	420b      	tst	r3, r1
 80005ae:	d0cf      	beq.n	8000550 <HAL_RCC_OscConfig+0xc>
 80005b0:	6863      	ldr	r3, [r4, #4]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d1cc      	bne.n	8000550 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80005b6:	2001      	movs	r0, #1
}
 80005b8:	b003      	add	sp, #12
 80005ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005be:	6862      	ldr	r2, [r4, #4]
 80005c0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80005c4:	d124      	bne.n	8000610 <HAL_RCC_OscConfig+0xcc>
 80005c6:	680b      	ldr	r3, [r1, #0]
 80005c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005cc:	600b      	str	r3, [r1, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80005ce:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80005d0:	68a0      	ldr	r0, [r4, #8]
 80005d2:	f023 030f 	bic.w	r3, r3, #15
 80005d6:	4303      	orrs	r3, r0
 80005d8:	62cb      	str	r3, [r1, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80005da:	b34a      	cbz	r2, 8000630 <HAL_RCC_OscConfig+0xec>
        tickstart = HAL_GetTick();
 80005dc:	f7ff ffaa 	bl	8000534 <HAL_GetTick>
 80005e0:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 80005e4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005e6:	2601      	movs	r6, #1
 80005e8:	fa95 f3a5 	rbit	r3, r5
 80005ec:	680a      	ldr	r2, [r1, #0]
 80005ee:	fa95 f3a5 	rbit	r3, r5
 80005f2:	fab3 f383 	clz	r3, r3
 80005f6:	f003 031f 	and.w	r3, r3, #31
 80005fa:	fa06 f303 	lsl.w	r3, r6, r3
 80005fe:	4213      	tst	r3, r2
 8000600:	d1a6      	bne.n	8000550 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000602:	f7ff ff97 	bl	8000534 <HAL_GetTick>
 8000606:	1bc0      	subs	r0, r0, r7
 8000608:	2864      	cmp	r0, #100	; 0x64
 800060a:	d9ed      	bls.n	80005e8 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
 800060c:	2003      	movs	r0, #3
 800060e:	e7d3      	b.n	80005b8 <HAL_RCC_OscConfig+0x74>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000610:	680b      	ldr	r3, [r1, #0]
 8000612:	b932      	cbnz	r2, 8000622 <HAL_RCC_OscConfig+0xde>
 8000614:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000618:	600b      	str	r3, [r1, #0]
 800061a:	680b      	ldr	r3, [r1, #0]
 800061c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000620:	e7d4      	b.n	80005cc <HAL_RCC_OscConfig+0x88>
 8000622:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000626:	d1f5      	bne.n	8000614 <HAL_RCC_OscConfig+0xd0>
 8000628:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800062c:	600b      	str	r3, [r1, #0]
 800062e:	e7ca      	b.n	80005c6 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8000630:	f7ff ff80 	bl	8000534 <HAL_GetTick>
 8000634:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8000638:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800063a:	2601      	movs	r6, #1
 800063c:	fa95 f3a5 	rbit	r3, r5
 8000640:	680a      	ldr	r2, [r1, #0]
 8000642:	fa95 f3a5 	rbit	r3, r5
 8000646:	fab3 f383 	clz	r3, r3
 800064a:	f003 031f 	and.w	r3, r3, #31
 800064e:	fa06 f303 	lsl.w	r3, r6, r3
 8000652:	4213      	tst	r3, r2
 8000654:	f43f af7c 	beq.w	8000550 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000658:	f7ff ff6c 	bl	8000534 <HAL_GetTick>
 800065c:	1bc0      	subs	r0, r0, r7
 800065e:	2864      	cmp	r0, #100	; 0x64
 8000660:	d9ec      	bls.n	800063c <HAL_RCC_OscConfig+0xf8>
 8000662:	e7d3      	b.n	800060c <HAL_RCC_OscConfig+0xc8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000664:	497b      	ldr	r1, [pc, #492]	; (8000854 <HAL_RCC_OscConfig+0x310>)
 8000666:	684b      	ldr	r3, [r1, #4]
 8000668:	f013 0f0c 	tst.w	r3, #12
 800066c:	d007      	beq.n	800067e <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800066e:	684b      	ldr	r3, [r1, #4]
 8000670:	f003 030c 	and.w	r3, r3, #12
 8000674:	2b08      	cmp	r3, #8
 8000676:	d121      	bne.n	80006bc <HAL_RCC_OscConfig+0x178>
 8000678:	684b      	ldr	r3, [r1, #4]
 800067a:	03df      	lsls	r7, r3, #15
 800067c:	d41e      	bmi.n	80006bc <HAL_RCC_OscConfig+0x178>
 800067e:	2302      	movs	r3, #2
 8000680:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000684:	6808      	ldr	r0, [r1, #0]
 8000686:	fa93 f3a3 	rbit	r3, r3
 800068a:	fab3 f383 	clz	r3, r3
 800068e:	f003 031f 	and.w	r3, r3, #31
 8000692:	2201      	movs	r2, #1
 8000694:	fa02 f303 	lsl.w	r3, r2, r3
 8000698:	4203      	tst	r3, r0
 800069a:	d002      	beq.n	80006a2 <HAL_RCC_OscConfig+0x15e>
 800069c:	6923      	ldr	r3, [r4, #16]
 800069e:	4293      	cmp	r3, r2
 80006a0:	d189      	bne.n	80005b6 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80006a2:	6808      	ldr	r0, [r1, #0]
 80006a4:	23f8      	movs	r3, #248	; 0xf8
 80006a6:	fa93 f3a3 	rbit	r3, r3
 80006aa:	fab3 f283 	clz	r2, r3
 80006ae:	6963      	ldr	r3, [r4, #20]
 80006b0:	4093      	lsls	r3, r2
 80006b2:	f020 02f8 	bic.w	r2, r0, #248	; 0xf8
 80006b6:	4313      	orrs	r3, r2
 80006b8:	600b      	str	r3, [r1, #0]
 80006ba:	e74d      	b.n	8000558 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80006bc:	6922      	ldr	r2, [r4, #16]
 80006be:	2501      	movs	r5, #1
 80006c0:	b302      	cbz	r2, 8000704 <HAL_RCC_OscConfig+0x1c0>
 80006c2:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 80006c6:	fab3 f383 	clz	r3, r3
 80006ca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80006ce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	2602      	movs	r6, #2
 80006d6:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 80006d8:	f7ff ff2c 	bl	8000534 <HAL_GetTick>
 80006dc:	4607      	mov	r7, r0
 80006de:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80006e2:	680a      	ldr	r2, [r1, #0]
 80006e4:	fa96 f3a6 	rbit	r3, r6
 80006e8:	fab3 f383 	clz	r3, r3
 80006ec:	f003 031f 	and.w	r3, r3, #31
 80006f0:	fa05 f303 	lsl.w	r3, r5, r3
 80006f4:	4213      	tst	r3, r2
 80006f6:	d1d4      	bne.n	80006a2 <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006f8:	f7ff ff1c 	bl	8000534 <HAL_GetTick>
 80006fc:	1bc0      	subs	r0, r0, r7
 80006fe:	2802      	cmp	r0, #2
 8000700:	d9ed      	bls.n	80006de <HAL_RCC_OscConfig+0x19a>
 8000702:	e783      	b.n	800060c <HAL_RCC_OscConfig+0xc8>
 8000704:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8000708:	fab3 f383 	clz	r3, r3
 800070c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000710:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	2602      	movs	r6, #2
 8000718:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800071a:	f7ff ff0b 	bl	8000534 <HAL_GetTick>
 800071e:	4607      	mov	r7, r0
 8000720:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000724:	680a      	ldr	r2, [r1, #0]
 8000726:	fa96 f3a6 	rbit	r3, r6
 800072a:	fab3 f383 	clz	r3, r3
 800072e:	f003 031f 	and.w	r3, r3, #31
 8000732:	fa05 f303 	lsl.w	r3, r5, r3
 8000736:	4213      	tst	r3, r2
 8000738:	f43f af0e 	beq.w	8000558 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800073c:	f7ff fefa 	bl	8000534 <HAL_GetTick>
 8000740:	1bc0      	subs	r0, r0, r7
 8000742:	2802      	cmp	r0, #2
 8000744:	d9ec      	bls.n	8000720 <HAL_RCC_OscConfig+0x1dc>
 8000746:	e761      	b.n	800060c <HAL_RCC_OscConfig+0xc8>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000748:	69a2      	ldr	r2, [r4, #24]
 800074a:	4d42      	ldr	r5, [pc, #264]	; (8000854 <HAL_RCC_OscConfig+0x310>)
 800074c:	4842      	ldr	r0, [pc, #264]	; (8000858 <HAL_RCC_OscConfig+0x314>)
 800074e:	2101      	movs	r1, #1
 8000750:	b312      	cbz	r2, 8000798 <HAL_RCC_OscConfig+0x254>
 8000752:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_ENABLE();
 8000756:	fab3 f383 	clz	r3, r3
 800075a:	4403      	add	r3, r0
 800075c:	009b      	lsls	r3, r3, #2
 800075e:	2602      	movs	r6, #2
 8000760:	6019      	str	r1, [r3, #0]
      tickstart = HAL_GetTick();
 8000762:	f7ff fee7 	bl	8000534 <HAL_GetTick>
 8000766:	4607      	mov	r7, r0
 8000768:	fa96 f3a6 	rbit	r3, r6
 800076c:	fa96 f3a6 	rbit	r3, r6
 8000770:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000774:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000776:	fa96 f3a6 	rbit	r3, r6
 800077a:	fab3 f383 	clz	r3, r3
 800077e:	f003 031f 	and.w	r3, r3, #31
 8000782:	fa01 f303 	lsl.w	r3, r1, r3
 8000786:	4213      	tst	r3, r2
 8000788:	f47f aeea 	bne.w	8000560 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800078c:	f7ff fed2 	bl	8000534 <HAL_GetTick>
 8000790:	1bc0      	subs	r0, r0, r7
 8000792:	2802      	cmp	r0, #2
 8000794:	d9e8      	bls.n	8000768 <HAL_RCC_OscConfig+0x224>
 8000796:	e739      	b.n	800060c <HAL_RCC_OscConfig+0xc8>
 8000798:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_DISABLE();
 800079c:	fab3 f383 	clz	r3, r3
 80007a0:	4403      	add	r3, r0
 80007a2:	009b      	lsls	r3, r3, #2
 80007a4:	2602      	movs	r6, #2
 80007a6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80007a8:	f7ff fec4 	bl	8000534 <HAL_GetTick>
 80007ac:	4607      	mov	r7, r0
 80007ae:	fa96 f3a6 	rbit	r3, r6
 80007b2:	fa96 f3a6 	rbit	r3, r6
 80007b6:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80007ba:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80007bc:	fa96 f3a6 	rbit	r3, r6
 80007c0:	fab3 f383 	clz	r3, r3
 80007c4:	f003 031f 	and.w	r3, r3, #31
 80007c8:	fa01 f303 	lsl.w	r3, r1, r3
 80007cc:	4213      	tst	r3, r2
 80007ce:	f43f aec7 	beq.w	8000560 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007d2:	f7ff feaf 	bl	8000534 <HAL_GetTick>
 80007d6:	1bc0      	subs	r0, r0, r7
 80007d8:	2802      	cmp	r0, #2
 80007da:	d9e8      	bls.n	80007ae <HAL_RCC_OscConfig+0x26a>
 80007dc:	e716      	b.n	800060c <HAL_RCC_OscConfig+0xc8>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80007de:	491d      	ldr	r1, [pc, #116]	; (8000854 <HAL_RCC_OscConfig+0x310>)
 80007e0:	69cb      	ldr	r3, [r1, #28]
 80007e2:	00d8      	lsls	r0, r3, #3
 80007e4:	d433      	bmi.n	800084e <HAL_RCC_OscConfig+0x30a>
      __HAL_RCC_PWR_CLK_ENABLE();
 80007e6:	69cb      	ldr	r3, [r1, #28]
 80007e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ec:	61cb      	str	r3, [r1, #28]
 80007ee:	69cb      	ldr	r3, [r1, #28]
 80007f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f4:	9301      	str	r3, [sp, #4]
 80007f6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80007f8:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80007fa:	4e18      	ldr	r6, [pc, #96]	; (800085c <HAL_RCC_OscConfig+0x318>)
 80007fc:	6833      	ldr	r3, [r6, #0]
 80007fe:	05da      	lsls	r2, r3, #23
 8000800:	d52e      	bpl.n	8000860 <HAL_RCC_OscConfig+0x31c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000802:	68e3      	ldr	r3, [r4, #12]
 8000804:	2b01      	cmp	r3, #1
 8000806:	d13b      	bne.n	8000880 <HAL_RCC_OscConfig+0x33c>
 8000808:	6a0b      	ldr	r3, [r1, #32]
 800080a:	f043 0301 	orr.w	r3, r3, #1
 800080e:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8000810:	f7ff fe90 	bl	8000534 <HAL_GetTick>
 8000814:	2602      	movs	r6, #2
 8000816:	4681      	mov	r9, r0
 8000818:	46b0      	mov	r8, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800081a:	2701      	movs	r7, #1
 800081c:	fa96 f3a6 	rbit	r3, r6
 8000820:	fa96 f3a6 	rbit	r3, r6
 8000824:	2b00      	cmp	r3, #0
 8000826:	d06a      	beq.n	80008fe <HAL_RCC_OscConfig+0x3ba>
 8000828:	6a0a      	ldr	r2, [r1, #32]
 800082a:	fa98 f3a8 	rbit	r3, r8
 800082e:	fab3 f383 	clz	r3, r3
 8000832:	f003 031f 	and.w	r3, r3, #31
 8000836:	fa07 f303 	lsl.w	r3, r7, r3
 800083a:	4213      	tst	r3, r2
 800083c:	d056      	beq.n	80008ec <HAL_RCC_OscConfig+0x3a8>
    if(pwrclkchanged == SET)
 800083e:	2d00      	cmp	r5, #0
 8000840:	f43f ae92 	beq.w	8000568 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000844:	69cb      	ldr	r3, [r1, #28]
 8000846:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800084a:	61cb      	str	r3, [r1, #28]
 800084c:	e68c      	b.n	8000568 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 800084e:	2500      	movs	r5, #0
 8000850:	e7d3      	b.n	80007fa <HAL_RCC_OscConfig+0x2b6>
 8000852:	bf00      	nop
 8000854:	40021000 	.word	0x40021000
 8000858:	10908120 	.word	0x10908120
 800085c:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000860:	6833      	ldr	r3, [r6, #0]
 8000862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000866:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000868:	f7ff fe64 	bl	8000534 <HAL_GetTick>
 800086c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800086e:	6833      	ldr	r3, [r6, #0]
 8000870:	05db      	lsls	r3, r3, #23
 8000872:	d4c6      	bmi.n	8000802 <HAL_RCC_OscConfig+0x2be>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000874:	f7ff fe5e 	bl	8000534 <HAL_GetTick>
 8000878:	1bc0      	subs	r0, r0, r7
 800087a:	2864      	cmp	r0, #100	; 0x64
 800087c:	d9f7      	bls.n	800086e <HAL_RCC_OscConfig+0x32a>
 800087e:	e6c5      	b.n	800060c <HAL_RCC_OscConfig+0xc8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000880:	bb33      	cbnz	r3, 80008d0 <HAL_RCC_OscConfig+0x38c>
 8000882:	6a0b      	ldr	r3, [r1, #32]
 8000884:	f023 0301 	bic.w	r3, r3, #1
 8000888:	620b      	str	r3, [r1, #32]
 800088a:	6a0b      	ldr	r3, [r1, #32]
 800088c:	f023 0304 	bic.w	r3, r3, #4
 8000890:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8000892:	f7ff fe4f 	bl	8000534 <HAL_GetTick>
 8000896:	2602      	movs	r6, #2
 8000898:	4681      	mov	r9, r0
 800089a:	46b0      	mov	r8, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800089c:	2701      	movs	r7, #1
 800089e:	fa96 f3a6 	rbit	r3, r6
 80008a2:	fa96 f3a6 	rbit	r3, r6
 80008a6:	b373      	cbz	r3, 8000906 <HAL_RCC_OscConfig+0x3c2>
 80008a8:	6a0a      	ldr	r2, [r1, #32]
 80008aa:	fa98 f3a8 	rbit	r3, r8
 80008ae:	fab3 f383 	clz	r3, r3
 80008b2:	f003 031f 	and.w	r3, r3, #31
 80008b6:	fa07 f303 	lsl.w	r3, r7, r3
 80008ba:	4213      	tst	r3, r2
 80008bc:	d0bf      	beq.n	800083e <HAL_RCC_OscConfig+0x2fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008be:	f7ff fe39 	bl	8000534 <HAL_GetTick>
 80008c2:	f241 3388 	movw	r3, #5000	; 0x1388
 80008c6:	eba0 0009 	sub.w	r0, r0, r9
 80008ca:	4298      	cmp	r0, r3
 80008cc:	d9e7      	bls.n	800089e <HAL_RCC_OscConfig+0x35a>
 80008ce:	e69d      	b.n	800060c <HAL_RCC_OscConfig+0xc8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008d0:	2b05      	cmp	r3, #5
 80008d2:	6a0b      	ldr	r3, [r1, #32]
 80008d4:	d103      	bne.n	80008de <HAL_RCC_OscConfig+0x39a>
 80008d6:	f043 0304 	orr.w	r3, r3, #4
 80008da:	620b      	str	r3, [r1, #32]
 80008dc:	e794      	b.n	8000808 <HAL_RCC_OscConfig+0x2c4>
 80008de:	f023 0301 	bic.w	r3, r3, #1
 80008e2:	620b      	str	r3, [r1, #32]
 80008e4:	6a0b      	ldr	r3, [r1, #32]
 80008e6:	f023 0304 	bic.w	r3, r3, #4
 80008ea:	e790      	b.n	800080e <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008ec:	f7ff fe22 	bl	8000534 <HAL_GetTick>
 80008f0:	f241 3388 	movw	r3, #5000	; 0x1388
 80008f4:	eba0 0009 	sub.w	r0, r0, r9
 80008f8:	4298      	cmp	r0, r3
 80008fa:	d98f      	bls.n	800081c <HAL_RCC_OscConfig+0x2d8>
 80008fc:	e686      	b.n	800060c <HAL_RCC_OscConfig+0xc8>
 80008fe:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000902:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8000904:	e791      	b.n	800082a <HAL_RCC_OscConfig+0x2e6>
 8000906:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800090a:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800090c:	e7cd      	b.n	80008aa <HAL_RCC_OscConfig+0x366>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800090e:	4941      	ldr	r1, [pc, #260]	; (8000a14 <HAL_RCC_OscConfig+0x4d0>)
 8000910:	684b      	ldr	r3, [r1, #4]
 8000912:	f003 030c 	and.w	r3, r3, #12
 8000916:	2b08      	cmp	r3, #8
 8000918:	f43f ae4d 	beq.w	80005b6 <HAL_RCC_OscConfig+0x72>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800091c:	2a02      	cmp	r2, #2
 800091e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000922:	d151      	bne.n	80009c8 <HAL_RCC_OscConfig+0x484>
 8000924:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000928:	fab3 f383 	clz	r3, r3
 800092c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000930:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800093a:	f7ff fdfb 	bl	8000534 <HAL_GetTick>
 800093e:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8000942:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000944:	2501      	movs	r5, #1
 8000946:	fa96 f3a6 	rbit	r3, r6
 800094a:	680a      	ldr	r2, [r1, #0]
 800094c:	fa96 f3a6 	rbit	r3, r6
 8000950:	fab3 f383 	clz	r3, r3
 8000954:	f003 031f 	and.w	r3, r3, #31
 8000958:	fa05 f303 	lsl.w	r3, r5, r3
 800095c:	4213      	tst	r3, r2
 800095e:	d12d      	bne.n	80009bc <HAL_RCC_OscConfig+0x478>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000960:	684a      	ldr	r2, [r1, #4]
 8000962:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000964:	6a20      	ldr	r0, [r4, #32]
 8000966:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800096a:	4303      	orrs	r3, r0
 800096c:	4313      	orrs	r3, r2
 800096e:	604b      	str	r3, [r1, #4]
 8000970:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000974:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000978:	fab3 f383 	clz	r3, r3
 800097c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000980:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 800098a:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 800098c:	f7ff fdd2 	bl	8000534 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000990:	2501      	movs	r5, #1
        tickstart = HAL_GetTick();
 8000992:	4606      	mov	r6, r0
 8000994:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000998:	680a      	ldr	r2, [r1, #0]
 800099a:	fa94 f3a4 	rbit	r3, r4
 800099e:	fab3 f383 	clz	r3, r3
 80009a2:	f003 031f 	and.w	r3, r3, #31
 80009a6:	fa05 f303 	lsl.w	r3, r5, r3
 80009aa:	4213      	tst	r3, r2
 80009ac:	f47f ade0 	bne.w	8000570 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009b0:	f7ff fdc0 	bl	8000534 <HAL_GetTick>
 80009b4:	1b80      	subs	r0, r0, r6
 80009b6:	2802      	cmp	r0, #2
 80009b8:	d9ec      	bls.n	8000994 <HAL_RCC_OscConfig+0x450>
 80009ba:	e627      	b.n	800060c <HAL_RCC_OscConfig+0xc8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009bc:	f7ff fdba 	bl	8000534 <HAL_GetTick>
 80009c0:	1bc0      	subs	r0, r0, r7
 80009c2:	2802      	cmp	r0, #2
 80009c4:	d9bf      	bls.n	8000946 <HAL_RCC_OscConfig+0x402>
 80009c6:	e621      	b.n	800060c <HAL_RCC_OscConfig+0xc8>
 80009c8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80009cc:	fab3 f383 	clz	r3, r3
 80009d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80009d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009de:	f7ff fda9 	bl	8000534 <HAL_GetTick>
 80009e2:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 80009e6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80009e8:	2501      	movs	r5, #1
 80009ea:	fa94 f3a4 	rbit	r3, r4
 80009ee:	680a      	ldr	r2, [r1, #0]
 80009f0:	fa94 f3a4 	rbit	r3, r4
 80009f4:	fab3 f383 	clz	r3, r3
 80009f8:	f003 031f 	and.w	r3, r3, #31
 80009fc:	fa05 f303 	lsl.w	r3, r5, r3
 8000a00:	4213      	tst	r3, r2
 8000a02:	f43f adb5 	beq.w	8000570 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a06:	f7ff fd95 	bl	8000534 <HAL_GetTick>
 8000a0a:	1b80      	subs	r0, r0, r6
 8000a0c:	2802      	cmp	r0, #2
 8000a0e:	d9ec      	bls.n	80009ea <HAL_RCC_OscConfig+0x4a6>
 8000a10:	e5fc      	b.n	800060c <HAL_RCC_OscConfig+0xc8>
 8000a12:	bf00      	nop
 8000a14:	40021000 	.word	0x40021000

08000a18 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a18:	4a50      	ldr	r2, [pc, #320]	; (8000b5c <HAL_RCC_ClockConfig+0x144>)
{
 8000a1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a1c:	6813      	ldr	r3, [r2, #0]
 8000a1e:	f003 0307 	and.w	r3, r3, #7
 8000a22:	428b      	cmp	r3, r1
{
 8000a24:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a26:	d31b      	bcc.n	8000a60 <HAL_RCC_ClockConfig+0x48>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a28:	682a      	ldr	r2, [r5, #0]
 8000a2a:	0790      	lsls	r0, r2, #30
 8000a2c:	d424      	bmi.n	8000a78 <HAL_RCC_ClockConfig+0x60>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a2e:	07d2      	lsls	r2, r2, #31
 8000a30:	d42a      	bmi.n	8000a88 <HAL_RCC_ClockConfig+0x70>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a32:	4a4a      	ldr	r2, [pc, #296]	; (8000b5c <HAL_RCC_ClockConfig+0x144>)
 8000a34:	6813      	ldr	r3, [r2, #0]
 8000a36:	f003 0307 	and.w	r3, r3, #7
 8000a3a:	4299      	cmp	r1, r3
 8000a3c:	d37a      	bcc.n	8000b34 <HAL_RCC_ClockConfig+0x11c>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a3e:	6828      	ldr	r0, [r5, #0]
 8000a40:	0743      	lsls	r3, r0, #29
 8000a42:	f100 8082 	bmi.w	8000b4a <HAL_RCC_ClockConfig+0x132>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a46:	f010 0008 	ands.w	r0, r0, #8
 8000a4a:	d008      	beq.n	8000a5e <HAL_RCC_ClockConfig+0x46>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000a4c:	4a44      	ldr	r2, [pc, #272]	; (8000b60 <HAL_RCC_ClockConfig+0x148>)
 8000a4e:	6929      	ldr	r1, [r5, #16]
 8000a50:	6853      	ldr	r3, [r2, #4]
 8000a52:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000a56:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000a5a:	6053      	str	r3, [r2, #4]
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 8000a5c:	2000      	movs	r0, #0
}
 8000a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a60:	6813      	ldr	r3, [r2, #0]
 8000a62:	f023 0307 	bic.w	r3, r3, #7
 8000a66:	430b      	orrs	r3, r1
 8000a68:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000a6a:	6813      	ldr	r3, [r2, #0]
 8000a6c:	f003 0307 	and.w	r3, r3, #7
 8000a70:	4299      	cmp	r1, r3
 8000a72:	d0d9      	beq.n	8000a28 <HAL_RCC_ClockConfig+0x10>
      return HAL_ERROR;
 8000a74:	2001      	movs	r0, #1
 8000a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000a78:	4839      	ldr	r0, [pc, #228]	; (8000b60 <HAL_RCC_ClockConfig+0x148>)
 8000a7a:	68ac      	ldr	r4, [r5, #8]
 8000a7c:	6843      	ldr	r3, [r0, #4]
 8000a7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a82:	4323      	orrs	r3, r4
 8000a84:	6043      	str	r3, [r0, #4]
 8000a86:	e7d2      	b.n	8000a2e <HAL_RCC_ClockConfig+0x16>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a88:	686a      	ldr	r2, [r5, #4]
 8000a8a:	4c35      	ldr	r4, [pc, #212]	; (8000b60 <HAL_RCC_ClockConfig+0x148>)
 8000a8c:	2a01      	cmp	r2, #1
 8000a8e:	d127      	bne.n	8000ae0 <HAL_RCC_ClockConfig+0xc8>
 8000a90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a94:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a98:	6820      	ldr	r0, [r4, #0]
 8000a9a:	fa93 f3a3 	rbit	r3, r3
 8000a9e:	fab3 f383 	clz	r3, r3
 8000aa2:	f003 031f 	and.w	r3, r3, #31
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	4203      	tst	r3, r0
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000aac:	d0e2      	beq.n	8000a74 <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000aae:	6863      	ldr	r3, [r4, #4]
 8000ab0:	f023 0303 	bic.w	r3, r3, #3
 8000ab4:	431a      	orrs	r2, r3
 8000ab6:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 8000ab8:	f7ff fd3c 	bl	8000534 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000abc:	686b      	ldr	r3, [r5, #4]
 8000abe:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8000ac0:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ac2:	f241 3788 	movw	r7, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ac6:	d11e      	bne.n	8000b06 <HAL_RCC_ClockConfig+0xee>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ac8:	6863      	ldr	r3, [r4, #4]
 8000aca:	f003 030c 	and.w	r3, r3, #12
 8000ace:	2b04      	cmp	r3, #4
 8000ad0:	d0af      	beq.n	8000a32 <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ad2:	f7ff fd2f 	bl	8000534 <HAL_GetTick>
 8000ad6:	1b80      	subs	r0, r0, r6
 8000ad8:	42b8      	cmp	r0, r7
 8000ada:	d9f5      	bls.n	8000ac8 <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 8000adc:	2003      	movs	r0, #3
 8000ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ae0:	2a02      	cmp	r2, #2
 8000ae2:	bf0c      	ite	eq
 8000ae4:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000ae8:	2302      	movne	r3, #2
 8000aea:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000aee:	6826      	ldr	r6, [r4, #0]
 8000af0:	fa93 f3a3 	rbit	r3, r3
 8000af4:	fab3 f383 	clz	r3, r3
 8000af8:	f003 031f 	and.w	r3, r3, #31
 8000afc:	2001      	movs	r0, #1
 8000afe:	fa00 f303 	lsl.w	r3, r0, r3
 8000b02:	4233      	tst	r3, r6
 8000b04:	e7d2      	b.n	8000aac <HAL_RCC_ClockConfig+0x94>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	d10f      	bne.n	8000b2a <HAL_RCC_ClockConfig+0x112>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b0a:	6863      	ldr	r3, [r4, #4]
 8000b0c:	f003 030c 	and.w	r3, r3, #12
 8000b10:	2b08      	cmp	r3, #8
 8000b12:	d08e      	beq.n	8000a32 <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b14:	f7ff fd0e 	bl	8000534 <HAL_GetTick>
 8000b18:	1b80      	subs	r0, r0, r6
 8000b1a:	42b8      	cmp	r0, r7
 8000b1c:	d9f5      	bls.n	8000b0a <HAL_RCC_ClockConfig+0xf2>
 8000b1e:	e7dd      	b.n	8000adc <HAL_RCC_ClockConfig+0xc4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b20:	f7ff fd08 	bl	8000534 <HAL_GetTick>
 8000b24:	1b80      	subs	r0, r0, r6
 8000b26:	42b8      	cmp	r0, r7
 8000b28:	d8d8      	bhi.n	8000adc <HAL_RCC_ClockConfig+0xc4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b2a:	6863      	ldr	r3, [r4, #4]
 8000b2c:	f013 0f0c 	tst.w	r3, #12
 8000b30:	d1f6      	bne.n	8000b20 <HAL_RCC_ClockConfig+0x108>
 8000b32:	e77e      	b.n	8000a32 <HAL_RCC_ClockConfig+0x1a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b34:	6813      	ldr	r3, [r2, #0]
 8000b36:	f023 0307 	bic.w	r3, r3, #7
 8000b3a:	430b      	orrs	r3, r1
 8000b3c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000b3e:	6813      	ldr	r3, [r2, #0]
 8000b40:	f003 0307 	and.w	r3, r3, #7
 8000b44:	4299      	cmp	r1, r3
 8000b46:	d195      	bne.n	8000a74 <HAL_RCC_ClockConfig+0x5c>
 8000b48:	e779      	b.n	8000a3e <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000b4a:	4a05      	ldr	r2, [pc, #20]	; (8000b60 <HAL_RCC_ClockConfig+0x148>)
 8000b4c:	68e9      	ldr	r1, [r5, #12]
 8000b4e:	6853      	ldr	r3, [r2, #4]
 8000b50:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b54:	430b      	orrs	r3, r1
 8000b56:	6053      	str	r3, [r2, #4]
 8000b58:	e775      	b.n	8000a46 <HAL_RCC_ClockConfig+0x2e>
 8000b5a:	bf00      	nop
 8000b5c:	40022000 	.word	0x40022000
 8000b60:	40021000 	.word	0x40021000

08000b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000b68:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6c:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8000ce4 <HAL_GPIO_Init+0x180>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b70:	4a5a      	ldr	r2, [pc, #360]	; (8000cdc <HAL_GPIO_Init+0x178>)
  uint32_t position = 0x00U;
 8000b72:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000b74:	fa38 f403 	lsrs.w	r4, r8, r3
 8000b78:	d102      	bne.n	8000b80 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 8000b7a:	b003      	add	sp, #12
 8000b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000b80:	2401      	movs	r4, #1
 8000b82:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 8000b86:	ea18 050a 	ands.w	r5, r8, sl
 8000b8a:	f000 809c 	beq.w	8000cc6 <HAL_GPIO_Init+0x162>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b8e:	684c      	ldr	r4, [r1, #4]
 8000b90:	f024 0b10 	bic.w	fp, r4, #16
 8000b94:	f1bb 0f02 	cmp.w	fp, #2
 8000b98:	d114      	bne.n	8000bc4 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3];
 8000b9a:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8000b9e:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ba2:	f003 0c07 	and.w	ip, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000ba6:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000baa:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000bae:	270f      	movs	r7, #15
 8000bb0:	fa07 f70c 	lsl.w	r7, r7, ip
 8000bb4:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000bb8:	690e      	ldr	r6, [r1, #16]
 8000bba:	fa06 f60c 	lsl.w	r6, r6, ip
 8000bbe:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 8000bc0:	f8ce 6020 	str.w	r6, [lr, #32]
 8000bc4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bc8:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8000bca:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bcc:	fa07 f70c 	lsl.w	r7, r7, ip
 8000bd0:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bd2:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bd6:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bd8:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bdc:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000be0:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000be4:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8000be8:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bea:	d811      	bhi.n	8000c10 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 8000bec:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bee:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bf2:	68ce      	ldr	r6, [r1, #12]
 8000bf4:	fa06 fe0c 	lsl.w	lr, r6, ip
 8000bf8:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8000bfc:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000bfe:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c00:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c04:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8000c08:	409e      	lsls	r6, r3
 8000c0a:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8000c0e:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8000c10:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c12:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c14:	688e      	ldr	r6, [r1, #8]
 8000c16:	fa06 f60c 	lsl.w	r6, r6, ip
 8000c1a:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c1c:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8000c1e:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c20:	d551      	bpl.n	8000cc6 <HAL_GPIO_Init+0x162>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c22:	f8d9 6018 	ldr.w	r6, [r9, #24]
 8000c26:	f046 0601 	orr.w	r6, r6, #1
 8000c2a:	f8c9 6018 	str.w	r6, [r9, #24]
 8000c2e:	f8d9 6018 	ldr.w	r6, [r9, #24]
 8000c32:	f023 0703 	bic.w	r7, r3, #3
 8000c36:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000c3a:	f006 0601 	and.w	r6, r6, #1
 8000c3e:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000c42:	9601      	str	r6, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000c44:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c48:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000c4a:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000c4c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000c50:	f04f 0e0f 	mov.w	lr, #15
 8000c54:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000c58:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000c5c:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000c60:	d033      	beq.n	8000cca <HAL_GPIO_Init+0x166>
 8000c62:	4e1f      	ldr	r6, [pc, #124]	; (8000ce0 <HAL_GPIO_Init+0x17c>)
 8000c64:	42b0      	cmp	r0, r6
 8000c66:	d032      	beq.n	8000cce <HAL_GPIO_Init+0x16a>
 8000c68:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c6c:	42b0      	cmp	r0, r6
 8000c6e:	d030      	beq.n	8000cd2 <HAL_GPIO_Init+0x16e>
 8000c70:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c74:	42b0      	cmp	r0, r6
 8000c76:	d02e      	beq.n	8000cd6 <HAL_GPIO_Init+0x172>
 8000c78:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c7c:	42b0      	cmp	r0, r6
 8000c7e:	bf14      	ite	ne
 8000c80:	2605      	movne	r6, #5
 8000c82:	2604      	moveq	r6, #4
 8000c84:	fa06 f60c 	lsl.w	r6, r6, ip
 8000c88:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000c8c:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000c8e:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000c90:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c92:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000c96:	bf0c      	ite	eq
 8000c98:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000c9a:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 8000c9c:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8000c9e:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ca0:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000ca4:	bf0c      	ite	eq
 8000ca6:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000ca8:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 8000caa:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8000cac:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cae:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000cb2:	bf0c      	ite	eq
 8000cb4:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000cb6:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 8000cb8:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8000cba:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cbc:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000cbe:	bf54      	ite	pl
 8000cc0:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000cc2:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 8000cc4:	60d6      	str	r6, [r2, #12]
    position++;
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	e754      	b.n	8000b74 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000cca:	2600      	movs	r6, #0
 8000ccc:	e7da      	b.n	8000c84 <HAL_GPIO_Init+0x120>
 8000cce:	2601      	movs	r6, #1
 8000cd0:	e7d8      	b.n	8000c84 <HAL_GPIO_Init+0x120>
 8000cd2:	2602      	movs	r6, #2
 8000cd4:	e7d6      	b.n	8000c84 <HAL_GPIO_Init+0x120>
 8000cd6:	2603      	movs	r6, #3
 8000cd8:	e7d4      	b.n	8000c84 <HAL_GPIO_Init+0x120>
 8000cda:	bf00      	nop
 8000cdc:	40010400 	.word	0x40010400
 8000ce0:	48000400 	.word	0x48000400
 8000ce4:	40021000 	.word	0x40021000

08000ce8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ce8:	b10a      	cbz	r2, 8000cee <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cea:	6181      	str	r1, [r0, #24]
 8000cec:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cee:	6281      	str	r1, [r0, #40]	; 0x28
 8000cf0:	4770      	bx	lr
 8000cf2:	0000      	movs	r0, r0

08000cf4 <UART_SetConfig>:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000cf4:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000cf6:	6881      	ldr	r1, [r0, #8]
 8000cf8:	69c3      	ldr	r3, [r0, #28]
{
 8000cfa:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000cfc:	6905      	ldr	r5, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000cfe:	6814      	ldr	r4, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000d00:	4329      	orrs	r1, r5
 8000d02:	6945      	ldr	r5, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000d04:	f424 4416 	bic.w	r4, r4, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000d08:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000d0a:	f024 040c 	bic.w	r4, r4, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000d0e:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000d10:	4321      	orrs	r1, r4
 8000d12:	6011      	str	r1, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000d14:	6851      	ldr	r1, [r2, #4]
 8000d16:	68c4      	ldr	r4, [r0, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000d18:	6a05      	ldr	r5, [r0, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000d1a:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8000d1e:	4321      	orrs	r1, r4
 8000d20:	6051      	str	r1, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000d22:	6894      	ldr	r4, [r2, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000d24:	6981      	ldr	r1, [r0, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000d26:	f424 6430 	bic.w	r4, r4, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000d2a:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000d2c:	4321      	orrs	r1, r4
 8000d2e:	6091      	str	r1, [r2, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000d30:	4962      	ldr	r1, [pc, #392]	; (8000ebc <UART_SetConfig+0x1c8>)
 8000d32:	428a      	cmp	r2, r1
 8000d34:	d112      	bne.n	8000d5c <UART_SetConfig+0x68>
 8000d36:	f501 4158 	add.w	r1, r1, #55296	; 0xd800
 8000d3a:	4c61      	ldr	r4, [pc, #388]	; (8000ec0 <UART_SetConfig+0x1cc>)
 8000d3c:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8000d3e:	f001 0103 	and.w	r1, r1, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000d42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d46:	5c61      	ldrb	r1, [r4, r1]
 8000d48:	d06e      	beq.n	8000e28 <UART_SetConfig+0x134>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 8000d4a:	2908      	cmp	r1, #8
 8000d4c:	d819      	bhi.n	8000d82 <UART_SetConfig+0x8e>
 8000d4e:	e8df f001 	tbb	[pc, r1]
 8000d52:	8bb0      	.short	0x8bb0
 8000d54:	18b01896 	.word	0x18b01896
 8000d58:	1818      	.short	0x1818
 8000d5a:	a0          	.byte	0xa0
 8000d5b:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000d5c:	4959      	ldr	r1, [pc, #356]	; (8000ec4 <UART_SetConfig+0x1d0>)
 8000d5e:	428a      	cmp	r2, r1
 8000d60:	d12c      	bne.n	8000dbc <UART_SetConfig+0xc8>
 8000d62:	f501 31e6 	add.w	r1, r1, #117760	; 0x1cc00
 8000d66:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8000d68:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
 8000d6c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8000d70:	f000 809c 	beq.w	8000eac <UART_SetConfig+0x1b8>
 8000d74:	d807      	bhi.n	8000d86 <UART_SetConfig+0x92>
 8000d76:	2900      	cmp	r1, #0
 8000d78:	f000 8098 	beq.w	8000eac <UART_SetConfig+0x1b8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000d7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d80:	d06f      	beq.n	8000e62 <UART_SetConfig+0x16e>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8000d82:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 8000d84:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000d86:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8000d8a:	f000 8087 	beq.w	8000e9c <UART_SetConfig+0x1a8>
 8000d8e:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 8000d92:	d1f3      	bne.n	8000d7c <UART_SetConfig+0x88>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000d94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d98:	d171      	bne.n	8000e7e <UART_SetConfig+0x18a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8000d9a:	6841      	ldr	r1, [r0, #4]
 8000d9c:	084b      	lsrs	r3, r1, #1
 8000d9e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8000da2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000da6:	fbb3 f3f1 	udiv	r3, r3, r1
  HAL_StatusTypeDef ret               = HAL_OK;
 8000daa:	2000      	movs	r0, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000dac:	b29b      	uxth	r3, r3
    brrtemp = usartdiv & 0xFFF0U;
 8000dae:	f023 010f 	bic.w	r1, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000db2:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8000db6:	430b      	orrs	r3, r1
 8000db8:	60d3      	str	r3, [r2, #12]
 8000dba:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000dbc:	4942      	ldr	r1, [pc, #264]	; (8000ec8 <UART_SetConfig+0x1d4>)
 8000dbe:	428a      	cmp	r2, r1
 8000dc0:	d10e      	bne.n	8000de0 <UART_SetConfig+0xec>
 8000dc2:	f501 31e4 	add.w	r1, r1, #116736	; 0x1c800
 8000dc6:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8000dc8:	f401 2140 	and.w	r1, r1, #786432	; 0xc0000
 8000dcc:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8000dd0:	d06c      	beq.n	8000eac <UART_SetConfig+0x1b8>
 8000dd2:	d9d0      	bls.n	8000d76 <UART_SetConfig+0x82>
 8000dd4:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 8000dd8:	d060      	beq.n	8000e9c <UART_SetConfig+0x1a8>
 8000dda:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
 8000dde:	e7d8      	b.n	8000d92 <UART_SetConfig+0x9e>
 8000de0:	493a      	ldr	r1, [pc, #232]	; (8000ecc <UART_SetConfig+0x1d8>)
 8000de2:	428a      	cmp	r2, r1
 8000de4:	d10e      	bne.n	8000e04 <UART_SetConfig+0x110>
 8000de6:	f501 31e2 	add.w	r1, r1, #115712	; 0x1c400
 8000dea:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8000dec:	f401 1140 	and.w	r1, r1, #3145728	; 0x300000
 8000df0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000df4:	d05a      	beq.n	8000eac <UART_SetConfig+0x1b8>
 8000df6:	d9be      	bls.n	8000d76 <UART_SetConfig+0x82>
 8000df8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000dfc:	d04e      	beq.n	8000e9c <UART_SetConfig+0x1a8>
 8000dfe:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8000e02:	e7c6      	b.n	8000d92 <UART_SetConfig+0x9e>
 8000e04:	4932      	ldr	r1, [pc, #200]	; (8000ed0 <UART_SetConfig+0x1dc>)
 8000e06:	428a      	cmp	r2, r1
 8000e08:	d1b8      	bne.n	8000d7c <UART_SetConfig+0x88>
 8000e0a:	f501 31e0 	add.w	r1, r1, #114688	; 0x1c000
 8000e0e:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8000e10:	f401 0140 	and.w	r1, r1, #12582912	; 0xc00000
 8000e14:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8000e18:	d048      	beq.n	8000eac <UART_SetConfig+0x1b8>
 8000e1a:	d9ac      	bls.n	8000d76 <UART_SetConfig+0x82>
 8000e1c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e20:	d03c      	beq.n	8000e9c <UART_SetConfig+0x1a8>
 8000e22:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8000e26:	e7b4      	b.n	8000d92 <UART_SetConfig+0x9e>
    switch (clocksource)
 8000e28:	2908      	cmp	r1, #8
 8000e2a:	d81a      	bhi.n	8000e62 <UART_SetConfig+0x16e>
 8000e2c:	a301      	add	r3, pc, #4	; (adr r3, 8000e34 <UART_SetConfig+0x140>)
 8000e2e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8000e32:	bf00      	nop
 8000e34:	08000e59 	.word	0x08000e59
 8000e38:	08000e59 	.word	0x08000e59
 8000e3c:	08000d9b 	.word	0x08000d9b
 8000e40:	08000e63 	.word	0x08000e63
 8000e44:	08000e59 	.word	0x08000e59
 8000e48:	08000e63 	.word	0x08000e63
 8000e4c:	08000e63 	.word	0x08000e63
 8000e50:	08000e63 	.word	0x08000e63
 8000e54:	08000ea3 	.word	0x08000ea3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000e58:	6841      	ldr	r1, [r0, #4]
 8000e5a:	084b      	lsrs	r3, r1, #1
 8000e5c:	f503 0361 	add.w	r3, r3, #14745600	; 0xe10000
 8000e60:	e7a1      	b.n	8000da6 <UART_SetConfig+0xb2>
        ret = HAL_ERROR;
 8000e62:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8000e64:	2300      	movs	r3, #0
 8000e66:	e7a2      	b.n	8000dae <UART_SetConfig+0xba>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8000e68:	6842      	ldr	r2, [r0, #4]
 8000e6a:	0853      	lsrs	r3, r2, #1
 8000e6c:	f503 03e1 	add.w	r3, r3, #7372800	; 0x708000
 8000e70:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e74:	4a11      	ldr	r2, [pc, #68]	; (8000ebc <UART_SetConfig+0x1c8>)
 8000e76:	b29b      	uxth	r3, r3
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8000e78:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8000e7a:	2000      	movs	r0, #0
        break;
 8000e7c:	bd30      	pop	{r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8000e7e:	6841      	ldr	r1, [r0, #4]
 8000e80:	084b      	lsrs	r3, r1, #1
 8000e82:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8000e86:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8000e8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	e7f2      	b.n	8000e78 <UART_SetConfig+0x184>
 8000e92:	6841      	ldr	r1, [r0, #4]
 8000e94:	084b      	lsrs	r3, r1, #1
 8000e96:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000e9a:	e7f6      	b.n	8000e8a <UART_SetConfig+0x196>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000e9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ea0:	d1f7      	bne.n	8000e92 <UART_SetConfig+0x19e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000ea2:	6841      	ldr	r1, [r0, #4]
 8000ea4:	084b      	lsrs	r3, r1, #1
 8000ea6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000eaa:	e77c      	b.n	8000da6 <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000eac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000eb0:	d0d2      	beq.n	8000e58 <UART_SetConfig+0x164>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000eb2:	6841      	ldr	r1, [r0, #4]
 8000eb4:	084b      	lsrs	r3, r1, #1
 8000eb6:	f503 03e1 	add.w	r3, r3, #7372800	; 0x708000
 8000eba:	e7e6      	b.n	8000e8a <UART_SetConfig+0x196>
 8000ebc:	40013800 	.word	0x40013800
 8000ec0:	080019dc 	.word	0x080019dc
 8000ec4:	40004400 	.word	0x40004400
 8000ec8:	40004800 	.word	0x40004800
 8000ecc:	40004c00 	.word	0x40004c00
 8000ed0:	40005000 	.word	0x40005000

08000ed4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8000ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ed6:	9d06      	ldr	r5, [sp, #24]
 8000ed8:	4604      	mov	r4, r0
 8000eda:	4616      	mov	r6, r2
 8000edc:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000ede:	6820      	ldr	r0, [r4, #0]
 8000ee0:	69c2      	ldr	r2, [r0, #28]
 8000ee2:	ea31 0302 	bics.w	r3, r1, r2
 8000ee6:	bf0c      	ite	eq
 8000ee8:	2201      	moveq	r2, #1
 8000eea:	2200      	movne	r2, #0
 8000eec:	42b2      	cmp	r2, r6
 8000eee:	d001      	beq.n	8000ef4 <UART_WaitOnFlagUntilTimeout+0x20>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8000ef0:	2000      	movs	r0, #0
}
 8000ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000ef4:	1c6b      	adds	r3, r5, #1
 8000ef6:	d0f3      	beq.n	8000ee0 <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000ef8:	b995      	cbnz	r5, 8000f20 <UART_WaitOnFlagUntilTimeout+0x4c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000efa:	6823      	ldr	r3, [r4, #0]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000f02:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000f04:	689a      	ldr	r2, [r3, #8]
 8000f06:	f022 0201 	bic.w	r2, r2, #1
 8000f0a:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8000f0c:	2320      	movs	r3, #32
 8000f0e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8000f12:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8000f16:	2300      	movs	r3, #0
 8000f18:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8000f1c:	2003      	movs	r0, #3
 8000f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000f20:	f7ff fb08 	bl	8000534 <HAL_GetTick>
 8000f24:	1bc0      	subs	r0, r0, r7
 8000f26:	4285      	cmp	r5, r0
 8000f28:	d2d9      	bcs.n	8000ede <UART_WaitOnFlagUntilTimeout+0xa>
 8000f2a:	e7e6      	b.n	8000efa <UART_WaitOnFlagUntilTimeout+0x26>

08000f2c <UART_CheckIdleState>:
{
 8000f2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000f2e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f30:	2100      	movs	r1, #0
 8000f32:	66c1      	str	r1, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8000f34:	f7ff fafe 	bl	8000534 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8000f38:	6823      	ldr	r3, [r4, #0]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8000f3e:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8000f40:	d417      	bmi.n	8000f72 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8000f42:	6823      	ldr	r3, [r4, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	075b      	lsls	r3, r3, #29
 8000f48:	d50a      	bpl.n	8000f60 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8000f4a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	2200      	movs	r2, #0
 8000f52:	462b      	mov	r3, r5
 8000f54:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8000f58:	4620      	mov	r0, r4
 8000f5a:	f7ff ffbb 	bl	8000ed4 <UART_WaitOnFlagUntilTimeout>
 8000f5e:	b9a0      	cbnz	r0, 8000f8a <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8000f60:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8000f62:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8000f64:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8000f68:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8000f6c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8000f70:	e00c      	b.n	8000f8c <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8000f72:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	460a      	mov	r2, r1
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8000f80:	4620      	mov	r0, r4
 8000f82:	f7ff ffa7 	bl	8000ed4 <UART_WaitOnFlagUntilTimeout>
 8000f86:	2800      	cmp	r0, #0
 8000f88:	d0db      	beq.n	8000f42 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8000f8a:	2003      	movs	r0, #3
}
 8000f8c:	b003      	add	sp, #12
 8000f8e:	bd30      	pop	{r4, r5, pc}

08000f90 <HAL_UART_Init>:
{
 8000f90:	b510      	push	{r4, lr}
  if(huart == NULL)
 8000f92:	4604      	mov	r4, r0
 8000f94:	b328      	cbz	r0, 8000fe2 <HAL_UART_Init+0x52>
  if(huart->gState == HAL_UART_STATE_RESET)
 8000f96:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8000f9a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f9e:	b90b      	cbnz	r3, 8000fa4 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 8000fa0:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
  __HAL_UART_DISABLE(huart);
 8000fa4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000fa6:	2324      	movs	r3, #36	; 0x24
 8000fa8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8000fac:	6813      	ldr	r3, [r2, #0]
 8000fae:	f023 0301 	bic.w	r3, r3, #1
 8000fb2:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8000fb4:	4620      	mov	r0, r4
 8000fb6:	f7ff fe9d 	bl	8000cf4 <UART_SetConfig>
 8000fba:	2801      	cmp	r0, #1
 8000fbc:	d011      	beq.n	8000fe2 <HAL_UART_Init+0x52>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000fbe:	6823      	ldr	r3, [r4, #0]
 8000fc0:	685a      	ldr	r2, [r3, #4]
 8000fc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000fc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000fc8:	689a      	ldr	r2, [r3, #8]
 8000fca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000fce:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	f042 0201 	orr.w	r2, r2, #1
  return UART_CheckIdleState(huart);
 8000fd6:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8000fd8:	601a      	str	r2, [r3, #0]
}
 8000fda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return UART_CheckIdleState(huart);
 8000fde:	f7ff bfa5 	b.w	8000f2c <UART_CheckIdleState>
}
 8000fe2:	2001      	movs	r0, #1
 8000fe4:	bd10      	pop	{r4, pc}

08000fe6 <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000fe6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000fe8:	461f      	mov	r7, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8000fea:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8000fee:	2b20      	cmp	r3, #32
{
 8000ff0:	460d      	mov	r5, r1
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	4611      	mov	r1, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8000ff6:	d14b      	bne.n	8001090 <HAL_UART_Transmit+0xaa>
  {
    if((pData == NULL ) || (Size == 0U))
 8000ff8:	2d00      	cmp	r5, #0
 8000ffa:	d047      	beq.n	800108c <HAL_UART_Transmit+0xa6>
 8000ffc:	2a00      	cmp	r2, #0
 8000ffe:	d045      	beq.n	800108c <HAL_UART_Transmit+0xa6>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001000:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8001004:	2b01      	cmp	r3, #1
 8001006:	d043      	beq.n	8001090 <HAL_UART_Transmit+0xaa>
 8001008:	2301      	movs	r3, #1
 800100a:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800100e:	2300      	movs	r3, #0
 8001010:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001012:	2321      	movs	r3, #33	; 0x21
 8001014:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001018:	f7ff fa8c 	bl	8000534 <HAL_GetTick>
 800101c:	4606      	mov	r6, r0

    huart->TxXferSize = Size;
 800101e:	f8a4 1050 	strh.w	r1, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8001022:	f8a4 1052 	strh.w	r1, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8001026:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800102a:	b292      	uxth	r2, r2
 800102c:	b962      	cbnz	r2, 8001048 <HAL_UART_Transmit+0x62>
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800102e:	9700      	str	r7, [sp, #0]
 8001030:	4633      	mov	r3, r6
 8001032:	2140      	movs	r1, #64	; 0x40
 8001034:	4620      	mov	r0, r4
 8001036:	f7ff ff4d 	bl	8000ed4 <UART_WaitOnFlagUntilTimeout>
 800103a:	b998      	cbnz	r0, 8001064 <HAL_UART_Transmit+0x7e>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800103c:	2320      	movs	r3, #32
 800103e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001042:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

    return HAL_OK;
 8001046:	e00e      	b.n	8001066 <HAL_UART_Transmit+0x80>
      huart->TxXferCount--;
 8001048:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800104c:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 800104e:	3b01      	subs	r3, #1
 8001050:	b29b      	uxth	r3, r3
 8001052:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001056:	2200      	movs	r2, #0
 8001058:	4633      	mov	r3, r6
 800105a:	2180      	movs	r1, #128	; 0x80
 800105c:	4620      	mov	r0, r4
 800105e:	f7ff ff39 	bl	8000ed4 <UART_WaitOnFlagUntilTimeout>
 8001062:	b110      	cbz	r0, 800106a <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8001064:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001066:	b003      	add	sp, #12
 8001068:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800106a:	68a3      	ldr	r3, [r4, #8]
 800106c:	6822      	ldr	r2, [r4, #0]
 800106e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001072:	d107      	bne.n	8001084 <HAL_UART_Transmit+0x9e>
 8001074:	6923      	ldr	r3, [r4, #16]
 8001076:	b92b      	cbnz	r3, 8001084 <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001078:	f835 3b02 	ldrh.w	r3, [r5], #2
 800107c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001080:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 8001082:	e7d0      	b.n	8001026 <HAL_UART_Transmit+0x40>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001084:	782b      	ldrb	r3, [r5, #0]
 8001086:	8513      	strh	r3, [r2, #40]	; 0x28
 8001088:	3501      	adds	r5, #1
 800108a:	e7cc      	b.n	8001026 <HAL_UART_Transmit+0x40>
      return  HAL_ERROR;
 800108c:	2001      	movs	r0, #1
 800108e:	e7ea      	b.n	8001066 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 8001090:	2002      	movs	r0, #2
 8001092:	e7e8      	b.n	8001066 <HAL_UART_Transmit+0x80>

08001094 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001094:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001096:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <_sbrk+0x2c>)
 8001098:	6819      	ldr	r1, [r3, #0]
{
 800109a:	4602      	mov	r2, r0
	if (heap_end == 0)
 800109c:	b909      	cbnz	r1, 80010a2 <_sbrk+0xe>
		heap_end = &end;
 800109e:	4909      	ldr	r1, [pc, #36]	; (80010c4 <_sbrk+0x30>)
 80010a0:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 80010a2:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80010a4:	4669      	mov	r1, sp
 80010a6:	4402      	add	r2, r0
 80010a8:	428a      	cmp	r2, r1
 80010aa:	d906      	bls.n	80010ba <_sbrk+0x26>
	{
		errno = ENOMEM;
 80010ac:	f000 f832 	bl	8001114 <__errno>
 80010b0:	230c      	movs	r3, #12
 80010b2:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80010b4:	f04f 30ff 	mov.w	r0, #4294967295
 80010b8:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80010ba:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80010bc:	bd08      	pop	{r3, pc}
 80010be:	bf00      	nop
 80010c0:	200004dc 	.word	0x200004dc
 80010c4:	20000560 	.word	0x20000560

080010c8 <Reset_Handler>:
 80010c8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80010ca:	e003      	b.n	80010d4 <LoopCopyDataInit>

080010cc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80010cc:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <LoopForever+0x2>)
	ldr	r3, [r3, r1]
 80010ce:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80010d0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80010d2:	3104      	adds	r1, #4

080010d4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80010d4:	480a      	ldr	r0, [pc, #40]	; (8001100 <LoopForever+0x6>)
	ldr	r3, =_edata
 80010d6:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <LoopForever+0xa>)
	adds	r2, r0, r1
 80010d8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80010da:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80010dc:	d3f6      	bcc.n	80010cc <CopyDataInit>
	ldr	r2, =_sbss
 80010de:	4a0a      	ldr	r2, [pc, #40]	; (8001108 <LoopForever+0xe>)
	b	LoopFillZerobss
 80010e0:	e002      	b.n	80010e8 <LoopFillZerobss>

080010e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs r3, #0
 80010e2:	2300      	movs	r3, #0
 	str  r3, [r2]
 80010e4:	6013      	str	r3, [r2, #0]
	adds r2, r2, #4
 80010e6:	3204      	adds	r2, #4

080010e8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80010e8:	4b08      	ldr	r3, [pc, #32]	; (800110c <LoopForever+0x12>)
	cmp	r2, r3
 80010ea:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80010ec:	d3f9      	bcc.n	80010e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010ee:	f3af 8000 	nop.w
/* Call static constructors */
    bl __libc_init_array
 80010f2:	f000 f815 	bl	8001120 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010f6:	f7ff f953 	bl	80003a0 <main>

080010fa <LoopForever>:



LoopForever:
    b LoopForever
 80010fa:	e7fe      	b.n	80010fa <LoopForever>
 80010fc:	08001a4c 	.word	0x08001a4c
 8001100:	20000000 	.word	0x20000000
 8001104:	200004b8 	.word	0x200004b8
 8001108:	200004b8 	.word	0x200004b8
 800110c:	2000055c 	.word	0x2000055c

08001110 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001110:	e7fe      	b.n	8001110 <BusFault_Handler>
 8001112:	0000      	movs	r0, r0

08001114 <__errno>:
 8001114:	4b01      	ldr	r3, [pc, #4]	; (800111c <__errno+0x8>)
 8001116:	6818      	ldr	r0, [r3, #0]
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	20000454 	.word	0x20000454

08001120 <__libc_init_array>:
 8001120:	b570      	push	{r4, r5, r6, lr}
 8001122:	4e0d      	ldr	r6, [pc, #52]	; (8001158 <__libc_init_array+0x38>)
 8001124:	4c0d      	ldr	r4, [pc, #52]	; (800115c <__libc_init_array+0x3c>)
 8001126:	1ba4      	subs	r4, r4, r6
 8001128:	10a4      	asrs	r4, r4, #2
 800112a:	2500      	movs	r5, #0
 800112c:	42a5      	cmp	r5, r4
 800112e:	d109      	bne.n	8001144 <__libc_init_array+0x24>
 8001130:	4e0b      	ldr	r6, [pc, #44]	; (8001160 <__libc_init_array+0x40>)
 8001132:	4c0c      	ldr	r4, [pc, #48]	; (8001164 <__libc_init_array+0x44>)
 8001134:	f000 fc46 	bl	80019c4 <_init>
 8001138:	1ba4      	subs	r4, r4, r6
 800113a:	10a4      	asrs	r4, r4, #2
 800113c:	2500      	movs	r5, #0
 800113e:	42a5      	cmp	r5, r4
 8001140:	d105      	bne.n	800114e <__libc_init_array+0x2e>
 8001142:	bd70      	pop	{r4, r5, r6, pc}
 8001144:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001148:	4798      	blx	r3
 800114a:	3501      	adds	r5, #1
 800114c:	e7ee      	b.n	800112c <__libc_init_array+0xc>
 800114e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001152:	4798      	blx	r3
 8001154:	3501      	adds	r5, #1
 8001156:	e7f2      	b.n	800113e <__libc_init_array+0x1e>
 8001158:	08001a44 	.word	0x08001a44
 800115c:	08001a44 	.word	0x08001a44
 8001160:	08001a44 	.word	0x08001a44
 8001164:	08001a48 	.word	0x08001a48

08001168 <sniprintf>:
 8001168:	b40c      	push	{r2, r3}
 800116a:	b530      	push	{r4, r5, lr}
 800116c:	4b17      	ldr	r3, [pc, #92]	; (80011cc <sniprintf+0x64>)
 800116e:	1e0c      	subs	r4, r1, #0
 8001170:	b09d      	sub	sp, #116	; 0x74
 8001172:	681d      	ldr	r5, [r3, #0]
 8001174:	da08      	bge.n	8001188 <sniprintf+0x20>
 8001176:	238b      	movs	r3, #139	; 0x8b
 8001178:	602b      	str	r3, [r5, #0]
 800117a:	f04f 30ff 	mov.w	r0, #4294967295
 800117e:	b01d      	add	sp, #116	; 0x74
 8001180:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001184:	b002      	add	sp, #8
 8001186:	4770      	bx	lr
 8001188:	f44f 7302 	mov.w	r3, #520	; 0x208
 800118c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001190:	bf14      	ite	ne
 8001192:	f104 33ff 	addne.w	r3, r4, #4294967295
 8001196:	4623      	moveq	r3, r4
 8001198:	9304      	str	r3, [sp, #16]
 800119a:	9307      	str	r3, [sp, #28]
 800119c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011a0:	9002      	str	r0, [sp, #8]
 80011a2:	9006      	str	r0, [sp, #24]
 80011a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80011a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80011aa:	ab21      	add	r3, sp, #132	; 0x84
 80011ac:	a902      	add	r1, sp, #8
 80011ae:	4628      	mov	r0, r5
 80011b0:	9301      	str	r3, [sp, #4]
 80011b2:	f000 f869 	bl	8001288 <_svfiprintf_r>
 80011b6:	1c43      	adds	r3, r0, #1
 80011b8:	bfbc      	itt	lt
 80011ba:	238b      	movlt	r3, #139	; 0x8b
 80011bc:	602b      	strlt	r3, [r5, #0]
 80011be:	2c00      	cmp	r4, #0
 80011c0:	d0dd      	beq.n	800117e <sniprintf+0x16>
 80011c2:	9b02      	ldr	r3, [sp, #8]
 80011c4:	2200      	movs	r2, #0
 80011c6:	701a      	strb	r2, [r3, #0]
 80011c8:	e7d9      	b.n	800117e <sniprintf+0x16>
 80011ca:	bf00      	nop
 80011cc:	20000454 	.word	0x20000454

080011d0 <__ssputs_r>:
 80011d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011d4:	688e      	ldr	r6, [r1, #8]
 80011d6:	429e      	cmp	r6, r3
 80011d8:	4682      	mov	sl, r0
 80011da:	460c      	mov	r4, r1
 80011dc:	4691      	mov	r9, r2
 80011de:	4698      	mov	r8, r3
 80011e0:	d835      	bhi.n	800124e <__ssputs_r+0x7e>
 80011e2:	898a      	ldrh	r2, [r1, #12]
 80011e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80011e8:	d031      	beq.n	800124e <__ssputs_r+0x7e>
 80011ea:	6825      	ldr	r5, [r4, #0]
 80011ec:	6909      	ldr	r1, [r1, #16]
 80011ee:	1a6f      	subs	r7, r5, r1
 80011f0:	6965      	ldr	r5, [r4, #20]
 80011f2:	2302      	movs	r3, #2
 80011f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80011f8:	fb95 f5f3 	sdiv	r5, r5, r3
 80011fc:	f108 0301 	add.w	r3, r8, #1
 8001200:	443b      	add	r3, r7
 8001202:	429d      	cmp	r5, r3
 8001204:	bf38      	it	cc
 8001206:	461d      	movcc	r5, r3
 8001208:	0553      	lsls	r3, r2, #21
 800120a:	d531      	bpl.n	8001270 <__ssputs_r+0xa0>
 800120c:	4629      	mov	r1, r5
 800120e:	f000 fb39 	bl	8001884 <_malloc_r>
 8001212:	4606      	mov	r6, r0
 8001214:	b950      	cbnz	r0, 800122c <__ssputs_r+0x5c>
 8001216:	230c      	movs	r3, #12
 8001218:	f8ca 3000 	str.w	r3, [sl]
 800121c:	89a3      	ldrh	r3, [r4, #12]
 800121e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001222:	81a3      	strh	r3, [r4, #12]
 8001224:	f04f 30ff 	mov.w	r0, #4294967295
 8001228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800122c:	463a      	mov	r2, r7
 800122e:	6921      	ldr	r1, [r4, #16]
 8001230:	f000 fab4 	bl	800179c <memcpy>
 8001234:	89a3      	ldrh	r3, [r4, #12]
 8001236:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800123a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800123e:	81a3      	strh	r3, [r4, #12]
 8001240:	6126      	str	r6, [r4, #16]
 8001242:	6165      	str	r5, [r4, #20]
 8001244:	443e      	add	r6, r7
 8001246:	1bed      	subs	r5, r5, r7
 8001248:	6026      	str	r6, [r4, #0]
 800124a:	60a5      	str	r5, [r4, #8]
 800124c:	4646      	mov	r6, r8
 800124e:	4546      	cmp	r6, r8
 8001250:	bf28      	it	cs
 8001252:	4646      	movcs	r6, r8
 8001254:	4632      	mov	r2, r6
 8001256:	4649      	mov	r1, r9
 8001258:	6820      	ldr	r0, [r4, #0]
 800125a:	f000 faaa 	bl	80017b2 <memmove>
 800125e:	68a3      	ldr	r3, [r4, #8]
 8001260:	1b9b      	subs	r3, r3, r6
 8001262:	60a3      	str	r3, [r4, #8]
 8001264:	6823      	ldr	r3, [r4, #0]
 8001266:	441e      	add	r6, r3
 8001268:	6026      	str	r6, [r4, #0]
 800126a:	2000      	movs	r0, #0
 800126c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001270:	462a      	mov	r2, r5
 8001272:	f000 fb65 	bl	8001940 <_realloc_r>
 8001276:	4606      	mov	r6, r0
 8001278:	2800      	cmp	r0, #0
 800127a:	d1e1      	bne.n	8001240 <__ssputs_r+0x70>
 800127c:	6921      	ldr	r1, [r4, #16]
 800127e:	4650      	mov	r0, sl
 8001280:	f000 fab2 	bl	80017e8 <_free_r>
 8001284:	e7c7      	b.n	8001216 <__ssputs_r+0x46>
 8001286:	0000      	movs	r0, r0

08001288 <_svfiprintf_r>:
 8001288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800128c:	b09d      	sub	sp, #116	; 0x74
 800128e:	4680      	mov	r8, r0
 8001290:	9303      	str	r3, [sp, #12]
 8001292:	898b      	ldrh	r3, [r1, #12]
 8001294:	061c      	lsls	r4, r3, #24
 8001296:	460d      	mov	r5, r1
 8001298:	4616      	mov	r6, r2
 800129a:	d50f      	bpl.n	80012bc <_svfiprintf_r+0x34>
 800129c:	690b      	ldr	r3, [r1, #16]
 800129e:	b96b      	cbnz	r3, 80012bc <_svfiprintf_r+0x34>
 80012a0:	2140      	movs	r1, #64	; 0x40
 80012a2:	f000 faef 	bl	8001884 <_malloc_r>
 80012a6:	6028      	str	r0, [r5, #0]
 80012a8:	6128      	str	r0, [r5, #16]
 80012aa:	b928      	cbnz	r0, 80012b8 <_svfiprintf_r+0x30>
 80012ac:	230c      	movs	r3, #12
 80012ae:	f8c8 3000 	str.w	r3, [r8]
 80012b2:	f04f 30ff 	mov.w	r0, #4294967295
 80012b6:	e0c5      	b.n	8001444 <_svfiprintf_r+0x1bc>
 80012b8:	2340      	movs	r3, #64	; 0x40
 80012ba:	616b      	str	r3, [r5, #20]
 80012bc:	2300      	movs	r3, #0
 80012be:	9309      	str	r3, [sp, #36]	; 0x24
 80012c0:	2320      	movs	r3, #32
 80012c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80012c6:	2330      	movs	r3, #48	; 0x30
 80012c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80012cc:	f04f 0b01 	mov.w	fp, #1
 80012d0:	4637      	mov	r7, r6
 80012d2:	463c      	mov	r4, r7
 80012d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d13c      	bne.n	8001356 <_svfiprintf_r+0xce>
 80012dc:	ebb7 0a06 	subs.w	sl, r7, r6
 80012e0:	d00b      	beq.n	80012fa <_svfiprintf_r+0x72>
 80012e2:	4653      	mov	r3, sl
 80012e4:	4632      	mov	r2, r6
 80012e6:	4629      	mov	r1, r5
 80012e8:	4640      	mov	r0, r8
 80012ea:	f7ff ff71 	bl	80011d0 <__ssputs_r>
 80012ee:	3001      	adds	r0, #1
 80012f0:	f000 80a3 	beq.w	800143a <_svfiprintf_r+0x1b2>
 80012f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80012f6:	4453      	add	r3, sl
 80012f8:	9309      	str	r3, [sp, #36]	; 0x24
 80012fa:	783b      	ldrb	r3, [r7, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f000 809c 	beq.w	800143a <_svfiprintf_r+0x1b2>
 8001302:	2300      	movs	r3, #0
 8001304:	f04f 32ff 	mov.w	r2, #4294967295
 8001308:	9304      	str	r3, [sp, #16]
 800130a:	9307      	str	r3, [sp, #28]
 800130c:	9205      	str	r2, [sp, #20]
 800130e:	9306      	str	r3, [sp, #24]
 8001310:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001314:	931a      	str	r3, [sp, #104]	; 0x68
 8001316:	2205      	movs	r2, #5
 8001318:	7821      	ldrb	r1, [r4, #0]
 800131a:	4850      	ldr	r0, [pc, #320]	; (800145c <_svfiprintf_r+0x1d4>)
 800131c:	f7fe ff70 	bl	8000200 <memchr>
 8001320:	1c67      	adds	r7, r4, #1
 8001322:	9b04      	ldr	r3, [sp, #16]
 8001324:	b9d8      	cbnz	r0, 800135e <_svfiprintf_r+0xd6>
 8001326:	06d9      	lsls	r1, r3, #27
 8001328:	bf44      	itt	mi
 800132a:	2220      	movmi	r2, #32
 800132c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001330:	071a      	lsls	r2, r3, #28
 8001332:	bf44      	itt	mi
 8001334:	222b      	movmi	r2, #43	; 0x2b
 8001336:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800133a:	7822      	ldrb	r2, [r4, #0]
 800133c:	2a2a      	cmp	r2, #42	; 0x2a
 800133e:	d016      	beq.n	800136e <_svfiprintf_r+0xe6>
 8001340:	9a07      	ldr	r2, [sp, #28]
 8001342:	2100      	movs	r1, #0
 8001344:	200a      	movs	r0, #10
 8001346:	4627      	mov	r7, r4
 8001348:	3401      	adds	r4, #1
 800134a:	783b      	ldrb	r3, [r7, #0]
 800134c:	3b30      	subs	r3, #48	; 0x30
 800134e:	2b09      	cmp	r3, #9
 8001350:	d951      	bls.n	80013f6 <_svfiprintf_r+0x16e>
 8001352:	b1c9      	cbz	r1, 8001388 <_svfiprintf_r+0x100>
 8001354:	e011      	b.n	800137a <_svfiprintf_r+0xf2>
 8001356:	2b25      	cmp	r3, #37	; 0x25
 8001358:	d0c0      	beq.n	80012dc <_svfiprintf_r+0x54>
 800135a:	4627      	mov	r7, r4
 800135c:	e7b9      	b.n	80012d2 <_svfiprintf_r+0x4a>
 800135e:	4a3f      	ldr	r2, [pc, #252]	; (800145c <_svfiprintf_r+0x1d4>)
 8001360:	1a80      	subs	r0, r0, r2
 8001362:	fa0b f000 	lsl.w	r0, fp, r0
 8001366:	4318      	orrs	r0, r3
 8001368:	9004      	str	r0, [sp, #16]
 800136a:	463c      	mov	r4, r7
 800136c:	e7d3      	b.n	8001316 <_svfiprintf_r+0x8e>
 800136e:	9a03      	ldr	r2, [sp, #12]
 8001370:	1d11      	adds	r1, r2, #4
 8001372:	6812      	ldr	r2, [r2, #0]
 8001374:	9103      	str	r1, [sp, #12]
 8001376:	2a00      	cmp	r2, #0
 8001378:	db01      	blt.n	800137e <_svfiprintf_r+0xf6>
 800137a:	9207      	str	r2, [sp, #28]
 800137c:	e004      	b.n	8001388 <_svfiprintf_r+0x100>
 800137e:	4252      	negs	r2, r2
 8001380:	f043 0302 	orr.w	r3, r3, #2
 8001384:	9207      	str	r2, [sp, #28]
 8001386:	9304      	str	r3, [sp, #16]
 8001388:	783b      	ldrb	r3, [r7, #0]
 800138a:	2b2e      	cmp	r3, #46	; 0x2e
 800138c:	d10e      	bne.n	80013ac <_svfiprintf_r+0x124>
 800138e:	787b      	ldrb	r3, [r7, #1]
 8001390:	2b2a      	cmp	r3, #42	; 0x2a
 8001392:	f107 0101 	add.w	r1, r7, #1
 8001396:	d132      	bne.n	80013fe <_svfiprintf_r+0x176>
 8001398:	9b03      	ldr	r3, [sp, #12]
 800139a:	1d1a      	adds	r2, r3, #4
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	9203      	str	r2, [sp, #12]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	bfb8      	it	lt
 80013a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80013a8:	3702      	adds	r7, #2
 80013aa:	9305      	str	r3, [sp, #20]
 80013ac:	4c2c      	ldr	r4, [pc, #176]	; (8001460 <_svfiprintf_r+0x1d8>)
 80013ae:	7839      	ldrb	r1, [r7, #0]
 80013b0:	2203      	movs	r2, #3
 80013b2:	4620      	mov	r0, r4
 80013b4:	f7fe ff24 	bl	8000200 <memchr>
 80013b8:	b138      	cbz	r0, 80013ca <_svfiprintf_r+0x142>
 80013ba:	2340      	movs	r3, #64	; 0x40
 80013bc:	1b00      	subs	r0, r0, r4
 80013be:	fa03 f000 	lsl.w	r0, r3, r0
 80013c2:	9b04      	ldr	r3, [sp, #16]
 80013c4:	4303      	orrs	r3, r0
 80013c6:	9304      	str	r3, [sp, #16]
 80013c8:	3701      	adds	r7, #1
 80013ca:	7839      	ldrb	r1, [r7, #0]
 80013cc:	4825      	ldr	r0, [pc, #148]	; (8001464 <_svfiprintf_r+0x1dc>)
 80013ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80013d2:	2206      	movs	r2, #6
 80013d4:	1c7e      	adds	r6, r7, #1
 80013d6:	f7fe ff13 	bl	8000200 <memchr>
 80013da:	2800      	cmp	r0, #0
 80013dc:	d035      	beq.n	800144a <_svfiprintf_r+0x1c2>
 80013de:	4b22      	ldr	r3, [pc, #136]	; (8001468 <_svfiprintf_r+0x1e0>)
 80013e0:	b9fb      	cbnz	r3, 8001422 <_svfiprintf_r+0x19a>
 80013e2:	9b03      	ldr	r3, [sp, #12]
 80013e4:	3307      	adds	r3, #7
 80013e6:	f023 0307 	bic.w	r3, r3, #7
 80013ea:	3308      	adds	r3, #8
 80013ec:	9303      	str	r3, [sp, #12]
 80013ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80013f0:	444b      	add	r3, r9
 80013f2:	9309      	str	r3, [sp, #36]	; 0x24
 80013f4:	e76c      	b.n	80012d0 <_svfiprintf_r+0x48>
 80013f6:	fb00 3202 	mla	r2, r0, r2, r3
 80013fa:	2101      	movs	r1, #1
 80013fc:	e7a3      	b.n	8001346 <_svfiprintf_r+0xbe>
 80013fe:	2300      	movs	r3, #0
 8001400:	9305      	str	r3, [sp, #20]
 8001402:	4618      	mov	r0, r3
 8001404:	240a      	movs	r4, #10
 8001406:	460f      	mov	r7, r1
 8001408:	3101      	adds	r1, #1
 800140a:	783a      	ldrb	r2, [r7, #0]
 800140c:	3a30      	subs	r2, #48	; 0x30
 800140e:	2a09      	cmp	r2, #9
 8001410:	d903      	bls.n	800141a <_svfiprintf_r+0x192>
 8001412:	2b00      	cmp	r3, #0
 8001414:	d0ca      	beq.n	80013ac <_svfiprintf_r+0x124>
 8001416:	9005      	str	r0, [sp, #20]
 8001418:	e7c8      	b.n	80013ac <_svfiprintf_r+0x124>
 800141a:	fb04 2000 	mla	r0, r4, r0, r2
 800141e:	2301      	movs	r3, #1
 8001420:	e7f1      	b.n	8001406 <_svfiprintf_r+0x17e>
 8001422:	ab03      	add	r3, sp, #12
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	462a      	mov	r2, r5
 8001428:	4b10      	ldr	r3, [pc, #64]	; (800146c <_svfiprintf_r+0x1e4>)
 800142a:	a904      	add	r1, sp, #16
 800142c:	4640      	mov	r0, r8
 800142e:	f3af 8000 	nop.w
 8001432:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001436:	4681      	mov	r9, r0
 8001438:	d1d9      	bne.n	80013ee <_svfiprintf_r+0x166>
 800143a:	89ab      	ldrh	r3, [r5, #12]
 800143c:	065b      	lsls	r3, r3, #25
 800143e:	f53f af38 	bmi.w	80012b2 <_svfiprintf_r+0x2a>
 8001442:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001444:	b01d      	add	sp, #116	; 0x74
 8001446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800144a:	ab03      	add	r3, sp, #12
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	462a      	mov	r2, r5
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <_svfiprintf_r+0x1e4>)
 8001452:	a904      	add	r1, sp, #16
 8001454:	4640      	mov	r0, r8
 8001456:	f000 f881 	bl	800155c <_printf_i>
 800145a:	e7ea      	b.n	8001432 <_svfiprintf_r+0x1aa>
 800145c:	08001a10 	.word	0x08001a10
 8001460:	08001a16 	.word	0x08001a16
 8001464:	08001a1a 	.word	0x08001a1a
 8001468:	00000000 	.word	0x00000000
 800146c:	080011d1 	.word	0x080011d1

08001470 <_printf_common>:
 8001470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001474:	4691      	mov	r9, r2
 8001476:	461f      	mov	r7, r3
 8001478:	688a      	ldr	r2, [r1, #8]
 800147a:	690b      	ldr	r3, [r1, #16]
 800147c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001480:	4293      	cmp	r3, r2
 8001482:	bfb8      	it	lt
 8001484:	4613      	movlt	r3, r2
 8001486:	f8c9 3000 	str.w	r3, [r9]
 800148a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800148e:	4606      	mov	r6, r0
 8001490:	460c      	mov	r4, r1
 8001492:	b112      	cbz	r2, 800149a <_printf_common+0x2a>
 8001494:	3301      	adds	r3, #1
 8001496:	f8c9 3000 	str.w	r3, [r9]
 800149a:	6823      	ldr	r3, [r4, #0]
 800149c:	0699      	lsls	r1, r3, #26
 800149e:	bf42      	ittt	mi
 80014a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80014a4:	3302      	addmi	r3, #2
 80014a6:	f8c9 3000 	strmi.w	r3, [r9]
 80014aa:	6825      	ldr	r5, [r4, #0]
 80014ac:	f015 0506 	ands.w	r5, r5, #6
 80014b0:	d107      	bne.n	80014c2 <_printf_common+0x52>
 80014b2:	f104 0a19 	add.w	sl, r4, #25
 80014b6:	68e3      	ldr	r3, [r4, #12]
 80014b8:	f8d9 2000 	ldr.w	r2, [r9]
 80014bc:	1a9b      	subs	r3, r3, r2
 80014be:	429d      	cmp	r5, r3
 80014c0:	db29      	blt.n	8001516 <_printf_common+0xa6>
 80014c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80014c6:	6822      	ldr	r2, [r4, #0]
 80014c8:	3300      	adds	r3, #0
 80014ca:	bf18      	it	ne
 80014cc:	2301      	movne	r3, #1
 80014ce:	0692      	lsls	r2, r2, #26
 80014d0:	d42e      	bmi.n	8001530 <_printf_common+0xc0>
 80014d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80014d6:	4639      	mov	r1, r7
 80014d8:	4630      	mov	r0, r6
 80014da:	47c0      	blx	r8
 80014dc:	3001      	adds	r0, #1
 80014de:	d021      	beq.n	8001524 <_printf_common+0xb4>
 80014e0:	6823      	ldr	r3, [r4, #0]
 80014e2:	68e5      	ldr	r5, [r4, #12]
 80014e4:	f8d9 2000 	ldr.w	r2, [r9]
 80014e8:	f003 0306 	and.w	r3, r3, #6
 80014ec:	2b04      	cmp	r3, #4
 80014ee:	bf08      	it	eq
 80014f0:	1aad      	subeq	r5, r5, r2
 80014f2:	68a3      	ldr	r3, [r4, #8]
 80014f4:	6922      	ldr	r2, [r4, #16]
 80014f6:	bf0c      	ite	eq
 80014f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80014fc:	2500      	movne	r5, #0
 80014fe:	4293      	cmp	r3, r2
 8001500:	bfc4      	itt	gt
 8001502:	1a9b      	subgt	r3, r3, r2
 8001504:	18ed      	addgt	r5, r5, r3
 8001506:	f04f 0900 	mov.w	r9, #0
 800150a:	341a      	adds	r4, #26
 800150c:	454d      	cmp	r5, r9
 800150e:	d11b      	bne.n	8001548 <_printf_common+0xd8>
 8001510:	2000      	movs	r0, #0
 8001512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001516:	2301      	movs	r3, #1
 8001518:	4652      	mov	r2, sl
 800151a:	4639      	mov	r1, r7
 800151c:	4630      	mov	r0, r6
 800151e:	47c0      	blx	r8
 8001520:	3001      	adds	r0, #1
 8001522:	d103      	bne.n	800152c <_printf_common+0xbc>
 8001524:	f04f 30ff 	mov.w	r0, #4294967295
 8001528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800152c:	3501      	adds	r5, #1
 800152e:	e7c2      	b.n	80014b6 <_printf_common+0x46>
 8001530:	18e1      	adds	r1, r4, r3
 8001532:	1c5a      	adds	r2, r3, #1
 8001534:	2030      	movs	r0, #48	; 0x30
 8001536:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800153a:	4422      	add	r2, r4
 800153c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001540:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001544:	3302      	adds	r3, #2
 8001546:	e7c4      	b.n	80014d2 <_printf_common+0x62>
 8001548:	2301      	movs	r3, #1
 800154a:	4622      	mov	r2, r4
 800154c:	4639      	mov	r1, r7
 800154e:	4630      	mov	r0, r6
 8001550:	47c0      	blx	r8
 8001552:	3001      	adds	r0, #1
 8001554:	d0e6      	beq.n	8001524 <_printf_common+0xb4>
 8001556:	f109 0901 	add.w	r9, r9, #1
 800155a:	e7d7      	b.n	800150c <_printf_common+0x9c>

0800155c <_printf_i>:
 800155c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001560:	4617      	mov	r7, r2
 8001562:	7e0a      	ldrb	r2, [r1, #24]
 8001564:	b085      	sub	sp, #20
 8001566:	2a6e      	cmp	r2, #110	; 0x6e
 8001568:	4698      	mov	r8, r3
 800156a:	4606      	mov	r6, r0
 800156c:	460c      	mov	r4, r1
 800156e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001570:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8001574:	f000 80bc 	beq.w	80016f0 <_printf_i+0x194>
 8001578:	d81a      	bhi.n	80015b0 <_printf_i+0x54>
 800157a:	2a63      	cmp	r2, #99	; 0x63
 800157c:	d02e      	beq.n	80015dc <_printf_i+0x80>
 800157e:	d80a      	bhi.n	8001596 <_printf_i+0x3a>
 8001580:	2a00      	cmp	r2, #0
 8001582:	f000 80c8 	beq.w	8001716 <_printf_i+0x1ba>
 8001586:	2a58      	cmp	r2, #88	; 0x58
 8001588:	f000 808a 	beq.w	80016a0 <_printf_i+0x144>
 800158c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001590:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001594:	e02a      	b.n	80015ec <_printf_i+0x90>
 8001596:	2a64      	cmp	r2, #100	; 0x64
 8001598:	d001      	beq.n	800159e <_printf_i+0x42>
 800159a:	2a69      	cmp	r2, #105	; 0x69
 800159c:	d1f6      	bne.n	800158c <_printf_i+0x30>
 800159e:	6821      	ldr	r1, [r4, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80015a6:	d023      	beq.n	80015f0 <_printf_i+0x94>
 80015a8:	1d11      	adds	r1, r2, #4
 80015aa:	6019      	str	r1, [r3, #0]
 80015ac:	6813      	ldr	r3, [r2, #0]
 80015ae:	e027      	b.n	8001600 <_printf_i+0xa4>
 80015b0:	2a73      	cmp	r2, #115	; 0x73
 80015b2:	f000 80b4 	beq.w	800171e <_printf_i+0x1c2>
 80015b6:	d808      	bhi.n	80015ca <_printf_i+0x6e>
 80015b8:	2a6f      	cmp	r2, #111	; 0x6f
 80015ba:	d02a      	beq.n	8001612 <_printf_i+0xb6>
 80015bc:	2a70      	cmp	r2, #112	; 0x70
 80015be:	d1e5      	bne.n	800158c <_printf_i+0x30>
 80015c0:	680a      	ldr	r2, [r1, #0]
 80015c2:	f042 0220 	orr.w	r2, r2, #32
 80015c6:	600a      	str	r2, [r1, #0]
 80015c8:	e003      	b.n	80015d2 <_printf_i+0x76>
 80015ca:	2a75      	cmp	r2, #117	; 0x75
 80015cc:	d021      	beq.n	8001612 <_printf_i+0xb6>
 80015ce:	2a78      	cmp	r2, #120	; 0x78
 80015d0:	d1dc      	bne.n	800158c <_printf_i+0x30>
 80015d2:	2278      	movs	r2, #120	; 0x78
 80015d4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80015d8:	496e      	ldr	r1, [pc, #440]	; (8001794 <_printf_i+0x238>)
 80015da:	e064      	b.n	80016a6 <_printf_i+0x14a>
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80015e2:	1d11      	adds	r1, r2, #4
 80015e4:	6019      	str	r1, [r3, #0]
 80015e6:	6813      	ldr	r3, [r2, #0]
 80015e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80015ec:	2301      	movs	r3, #1
 80015ee:	e0a3      	b.n	8001738 <_printf_i+0x1dc>
 80015f0:	f011 0f40 	tst.w	r1, #64	; 0x40
 80015f4:	f102 0104 	add.w	r1, r2, #4
 80015f8:	6019      	str	r1, [r3, #0]
 80015fa:	d0d7      	beq.n	80015ac <_printf_i+0x50>
 80015fc:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001600:	2b00      	cmp	r3, #0
 8001602:	da03      	bge.n	800160c <_printf_i+0xb0>
 8001604:	222d      	movs	r2, #45	; 0x2d
 8001606:	425b      	negs	r3, r3
 8001608:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800160c:	4962      	ldr	r1, [pc, #392]	; (8001798 <_printf_i+0x23c>)
 800160e:	220a      	movs	r2, #10
 8001610:	e017      	b.n	8001642 <_printf_i+0xe6>
 8001612:	6820      	ldr	r0, [r4, #0]
 8001614:	6819      	ldr	r1, [r3, #0]
 8001616:	f010 0f80 	tst.w	r0, #128	; 0x80
 800161a:	d003      	beq.n	8001624 <_printf_i+0xc8>
 800161c:	1d08      	adds	r0, r1, #4
 800161e:	6018      	str	r0, [r3, #0]
 8001620:	680b      	ldr	r3, [r1, #0]
 8001622:	e006      	b.n	8001632 <_printf_i+0xd6>
 8001624:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001628:	f101 0004 	add.w	r0, r1, #4
 800162c:	6018      	str	r0, [r3, #0]
 800162e:	d0f7      	beq.n	8001620 <_printf_i+0xc4>
 8001630:	880b      	ldrh	r3, [r1, #0]
 8001632:	4959      	ldr	r1, [pc, #356]	; (8001798 <_printf_i+0x23c>)
 8001634:	2a6f      	cmp	r2, #111	; 0x6f
 8001636:	bf14      	ite	ne
 8001638:	220a      	movne	r2, #10
 800163a:	2208      	moveq	r2, #8
 800163c:	2000      	movs	r0, #0
 800163e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8001642:	6865      	ldr	r5, [r4, #4]
 8001644:	60a5      	str	r5, [r4, #8]
 8001646:	2d00      	cmp	r5, #0
 8001648:	f2c0 809c 	blt.w	8001784 <_printf_i+0x228>
 800164c:	6820      	ldr	r0, [r4, #0]
 800164e:	f020 0004 	bic.w	r0, r0, #4
 8001652:	6020      	str	r0, [r4, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d13f      	bne.n	80016d8 <_printf_i+0x17c>
 8001658:	2d00      	cmp	r5, #0
 800165a:	f040 8095 	bne.w	8001788 <_printf_i+0x22c>
 800165e:	4675      	mov	r5, lr
 8001660:	2a08      	cmp	r2, #8
 8001662:	d10b      	bne.n	800167c <_printf_i+0x120>
 8001664:	6823      	ldr	r3, [r4, #0]
 8001666:	07da      	lsls	r2, r3, #31
 8001668:	d508      	bpl.n	800167c <_printf_i+0x120>
 800166a:	6923      	ldr	r3, [r4, #16]
 800166c:	6862      	ldr	r2, [r4, #4]
 800166e:	429a      	cmp	r2, r3
 8001670:	bfde      	ittt	le
 8001672:	2330      	movle	r3, #48	; 0x30
 8001674:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001678:	f105 35ff 	addle.w	r5, r5, #4294967295
 800167c:	ebae 0305 	sub.w	r3, lr, r5
 8001680:	6123      	str	r3, [r4, #16]
 8001682:	f8cd 8000 	str.w	r8, [sp]
 8001686:	463b      	mov	r3, r7
 8001688:	aa03      	add	r2, sp, #12
 800168a:	4621      	mov	r1, r4
 800168c:	4630      	mov	r0, r6
 800168e:	f7ff feef 	bl	8001470 <_printf_common>
 8001692:	3001      	adds	r0, #1
 8001694:	d155      	bne.n	8001742 <_printf_i+0x1e6>
 8001696:	f04f 30ff 	mov.w	r0, #4294967295
 800169a:	b005      	add	sp, #20
 800169c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80016a0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80016a4:	493c      	ldr	r1, [pc, #240]	; (8001798 <_printf_i+0x23c>)
 80016a6:	6822      	ldr	r2, [r4, #0]
 80016a8:	6818      	ldr	r0, [r3, #0]
 80016aa:	f012 0f80 	tst.w	r2, #128	; 0x80
 80016ae:	f100 0504 	add.w	r5, r0, #4
 80016b2:	601d      	str	r5, [r3, #0]
 80016b4:	d001      	beq.n	80016ba <_printf_i+0x15e>
 80016b6:	6803      	ldr	r3, [r0, #0]
 80016b8:	e002      	b.n	80016c0 <_printf_i+0x164>
 80016ba:	0655      	lsls	r5, r2, #25
 80016bc:	d5fb      	bpl.n	80016b6 <_printf_i+0x15a>
 80016be:	8803      	ldrh	r3, [r0, #0]
 80016c0:	07d0      	lsls	r0, r2, #31
 80016c2:	bf44      	itt	mi
 80016c4:	f042 0220 	orrmi.w	r2, r2, #32
 80016c8:	6022      	strmi	r2, [r4, #0]
 80016ca:	b91b      	cbnz	r3, 80016d4 <_printf_i+0x178>
 80016cc:	6822      	ldr	r2, [r4, #0]
 80016ce:	f022 0220 	bic.w	r2, r2, #32
 80016d2:	6022      	str	r2, [r4, #0]
 80016d4:	2210      	movs	r2, #16
 80016d6:	e7b1      	b.n	800163c <_printf_i+0xe0>
 80016d8:	4675      	mov	r5, lr
 80016da:	fbb3 f0f2 	udiv	r0, r3, r2
 80016de:	fb02 3310 	mls	r3, r2, r0, r3
 80016e2:	5ccb      	ldrb	r3, [r1, r3]
 80016e4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80016e8:	4603      	mov	r3, r0
 80016ea:	2800      	cmp	r0, #0
 80016ec:	d1f5      	bne.n	80016da <_printf_i+0x17e>
 80016ee:	e7b7      	b.n	8001660 <_printf_i+0x104>
 80016f0:	6808      	ldr	r0, [r1, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	6949      	ldr	r1, [r1, #20]
 80016f6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80016fa:	d004      	beq.n	8001706 <_printf_i+0x1aa>
 80016fc:	1d10      	adds	r0, r2, #4
 80016fe:	6018      	str	r0, [r3, #0]
 8001700:	6813      	ldr	r3, [r2, #0]
 8001702:	6019      	str	r1, [r3, #0]
 8001704:	e007      	b.n	8001716 <_printf_i+0x1ba>
 8001706:	f010 0f40 	tst.w	r0, #64	; 0x40
 800170a:	f102 0004 	add.w	r0, r2, #4
 800170e:	6018      	str	r0, [r3, #0]
 8001710:	6813      	ldr	r3, [r2, #0]
 8001712:	d0f6      	beq.n	8001702 <_printf_i+0x1a6>
 8001714:	8019      	strh	r1, [r3, #0]
 8001716:	2300      	movs	r3, #0
 8001718:	6123      	str	r3, [r4, #16]
 800171a:	4675      	mov	r5, lr
 800171c:	e7b1      	b.n	8001682 <_printf_i+0x126>
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	1d11      	adds	r1, r2, #4
 8001722:	6019      	str	r1, [r3, #0]
 8001724:	6815      	ldr	r5, [r2, #0]
 8001726:	6862      	ldr	r2, [r4, #4]
 8001728:	2100      	movs	r1, #0
 800172a:	4628      	mov	r0, r5
 800172c:	f7fe fd68 	bl	8000200 <memchr>
 8001730:	b108      	cbz	r0, 8001736 <_printf_i+0x1da>
 8001732:	1b40      	subs	r0, r0, r5
 8001734:	6060      	str	r0, [r4, #4]
 8001736:	6863      	ldr	r3, [r4, #4]
 8001738:	6123      	str	r3, [r4, #16]
 800173a:	2300      	movs	r3, #0
 800173c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001740:	e79f      	b.n	8001682 <_printf_i+0x126>
 8001742:	6923      	ldr	r3, [r4, #16]
 8001744:	462a      	mov	r2, r5
 8001746:	4639      	mov	r1, r7
 8001748:	4630      	mov	r0, r6
 800174a:	47c0      	blx	r8
 800174c:	3001      	adds	r0, #1
 800174e:	d0a2      	beq.n	8001696 <_printf_i+0x13a>
 8001750:	6823      	ldr	r3, [r4, #0]
 8001752:	079b      	lsls	r3, r3, #30
 8001754:	d507      	bpl.n	8001766 <_printf_i+0x20a>
 8001756:	2500      	movs	r5, #0
 8001758:	f104 0919 	add.w	r9, r4, #25
 800175c:	68e3      	ldr	r3, [r4, #12]
 800175e:	9a03      	ldr	r2, [sp, #12]
 8001760:	1a9b      	subs	r3, r3, r2
 8001762:	429d      	cmp	r5, r3
 8001764:	db05      	blt.n	8001772 <_printf_i+0x216>
 8001766:	68e0      	ldr	r0, [r4, #12]
 8001768:	9b03      	ldr	r3, [sp, #12]
 800176a:	4298      	cmp	r0, r3
 800176c:	bfb8      	it	lt
 800176e:	4618      	movlt	r0, r3
 8001770:	e793      	b.n	800169a <_printf_i+0x13e>
 8001772:	2301      	movs	r3, #1
 8001774:	464a      	mov	r2, r9
 8001776:	4639      	mov	r1, r7
 8001778:	4630      	mov	r0, r6
 800177a:	47c0      	blx	r8
 800177c:	3001      	adds	r0, #1
 800177e:	d08a      	beq.n	8001696 <_printf_i+0x13a>
 8001780:	3501      	adds	r5, #1
 8001782:	e7eb      	b.n	800175c <_printf_i+0x200>
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1a7      	bne.n	80016d8 <_printf_i+0x17c>
 8001788:	780b      	ldrb	r3, [r1, #0]
 800178a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800178e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001792:	e765      	b.n	8001660 <_printf_i+0x104>
 8001794:	08001a32 	.word	0x08001a32
 8001798:	08001a21 	.word	0x08001a21

0800179c <memcpy>:
 800179c:	b510      	push	{r4, lr}
 800179e:	1e43      	subs	r3, r0, #1
 80017a0:	440a      	add	r2, r1
 80017a2:	4291      	cmp	r1, r2
 80017a4:	d100      	bne.n	80017a8 <memcpy+0xc>
 80017a6:	bd10      	pop	{r4, pc}
 80017a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80017ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80017b0:	e7f7      	b.n	80017a2 <memcpy+0x6>

080017b2 <memmove>:
 80017b2:	4288      	cmp	r0, r1
 80017b4:	b510      	push	{r4, lr}
 80017b6:	eb01 0302 	add.w	r3, r1, r2
 80017ba:	d803      	bhi.n	80017c4 <memmove+0x12>
 80017bc:	1e42      	subs	r2, r0, #1
 80017be:	4299      	cmp	r1, r3
 80017c0:	d10c      	bne.n	80017dc <memmove+0x2a>
 80017c2:	bd10      	pop	{r4, pc}
 80017c4:	4298      	cmp	r0, r3
 80017c6:	d2f9      	bcs.n	80017bc <memmove+0xa>
 80017c8:	1881      	adds	r1, r0, r2
 80017ca:	1ad2      	subs	r2, r2, r3
 80017cc:	42d3      	cmn	r3, r2
 80017ce:	d100      	bne.n	80017d2 <memmove+0x20>
 80017d0:	bd10      	pop	{r4, pc}
 80017d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80017d6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80017da:	e7f7      	b.n	80017cc <memmove+0x1a>
 80017dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80017e0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80017e4:	e7eb      	b.n	80017be <memmove+0xc>
 80017e6:	0000      	movs	r0, r0

080017e8 <_free_r>:
 80017e8:	b538      	push	{r3, r4, r5, lr}
 80017ea:	4605      	mov	r5, r0
 80017ec:	2900      	cmp	r1, #0
 80017ee:	d045      	beq.n	800187c <_free_r+0x94>
 80017f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80017f4:	1f0c      	subs	r4, r1, #4
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	bfb8      	it	lt
 80017fa:	18e4      	addlt	r4, r4, r3
 80017fc:	f000 f8d6 	bl	80019ac <__malloc_lock>
 8001800:	4a1f      	ldr	r2, [pc, #124]	; (8001880 <_free_r+0x98>)
 8001802:	6813      	ldr	r3, [r2, #0]
 8001804:	4610      	mov	r0, r2
 8001806:	b933      	cbnz	r3, 8001816 <_free_r+0x2e>
 8001808:	6063      	str	r3, [r4, #4]
 800180a:	6014      	str	r4, [r2, #0]
 800180c:	4628      	mov	r0, r5
 800180e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001812:	f000 b8cc 	b.w	80019ae <__malloc_unlock>
 8001816:	42a3      	cmp	r3, r4
 8001818:	d90c      	bls.n	8001834 <_free_r+0x4c>
 800181a:	6821      	ldr	r1, [r4, #0]
 800181c:	1862      	adds	r2, r4, r1
 800181e:	4293      	cmp	r3, r2
 8001820:	bf04      	itt	eq
 8001822:	681a      	ldreq	r2, [r3, #0]
 8001824:	685b      	ldreq	r3, [r3, #4]
 8001826:	6063      	str	r3, [r4, #4]
 8001828:	bf04      	itt	eq
 800182a:	1852      	addeq	r2, r2, r1
 800182c:	6022      	streq	r2, [r4, #0]
 800182e:	6004      	str	r4, [r0, #0]
 8001830:	e7ec      	b.n	800180c <_free_r+0x24>
 8001832:	4613      	mov	r3, r2
 8001834:	685a      	ldr	r2, [r3, #4]
 8001836:	b10a      	cbz	r2, 800183c <_free_r+0x54>
 8001838:	42a2      	cmp	r2, r4
 800183a:	d9fa      	bls.n	8001832 <_free_r+0x4a>
 800183c:	6819      	ldr	r1, [r3, #0]
 800183e:	1858      	adds	r0, r3, r1
 8001840:	42a0      	cmp	r0, r4
 8001842:	d10b      	bne.n	800185c <_free_r+0x74>
 8001844:	6820      	ldr	r0, [r4, #0]
 8001846:	4401      	add	r1, r0
 8001848:	1858      	adds	r0, r3, r1
 800184a:	4282      	cmp	r2, r0
 800184c:	6019      	str	r1, [r3, #0]
 800184e:	d1dd      	bne.n	800180c <_free_r+0x24>
 8001850:	6810      	ldr	r0, [r2, #0]
 8001852:	6852      	ldr	r2, [r2, #4]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	4401      	add	r1, r0
 8001858:	6019      	str	r1, [r3, #0]
 800185a:	e7d7      	b.n	800180c <_free_r+0x24>
 800185c:	d902      	bls.n	8001864 <_free_r+0x7c>
 800185e:	230c      	movs	r3, #12
 8001860:	602b      	str	r3, [r5, #0]
 8001862:	e7d3      	b.n	800180c <_free_r+0x24>
 8001864:	6820      	ldr	r0, [r4, #0]
 8001866:	1821      	adds	r1, r4, r0
 8001868:	428a      	cmp	r2, r1
 800186a:	bf04      	itt	eq
 800186c:	6811      	ldreq	r1, [r2, #0]
 800186e:	6852      	ldreq	r2, [r2, #4]
 8001870:	6062      	str	r2, [r4, #4]
 8001872:	bf04      	itt	eq
 8001874:	1809      	addeq	r1, r1, r0
 8001876:	6021      	streq	r1, [r4, #0]
 8001878:	605c      	str	r4, [r3, #4]
 800187a:	e7c7      	b.n	800180c <_free_r+0x24>
 800187c:	bd38      	pop	{r3, r4, r5, pc}
 800187e:	bf00      	nop
 8001880:	200004e0 	.word	0x200004e0

08001884 <_malloc_r>:
 8001884:	b570      	push	{r4, r5, r6, lr}
 8001886:	1ccd      	adds	r5, r1, #3
 8001888:	f025 0503 	bic.w	r5, r5, #3
 800188c:	3508      	adds	r5, #8
 800188e:	2d0c      	cmp	r5, #12
 8001890:	bf38      	it	cc
 8001892:	250c      	movcc	r5, #12
 8001894:	2d00      	cmp	r5, #0
 8001896:	4606      	mov	r6, r0
 8001898:	db01      	blt.n	800189e <_malloc_r+0x1a>
 800189a:	42a9      	cmp	r1, r5
 800189c:	d903      	bls.n	80018a6 <_malloc_r+0x22>
 800189e:	230c      	movs	r3, #12
 80018a0:	6033      	str	r3, [r6, #0]
 80018a2:	2000      	movs	r0, #0
 80018a4:	bd70      	pop	{r4, r5, r6, pc}
 80018a6:	f000 f881 	bl	80019ac <__malloc_lock>
 80018aa:	4a23      	ldr	r2, [pc, #140]	; (8001938 <_malloc_r+0xb4>)
 80018ac:	6814      	ldr	r4, [r2, #0]
 80018ae:	4621      	mov	r1, r4
 80018b0:	b991      	cbnz	r1, 80018d8 <_malloc_r+0x54>
 80018b2:	4c22      	ldr	r4, [pc, #136]	; (800193c <_malloc_r+0xb8>)
 80018b4:	6823      	ldr	r3, [r4, #0]
 80018b6:	b91b      	cbnz	r3, 80018c0 <_malloc_r+0x3c>
 80018b8:	4630      	mov	r0, r6
 80018ba:	f000 f867 	bl	800198c <_sbrk_r>
 80018be:	6020      	str	r0, [r4, #0]
 80018c0:	4629      	mov	r1, r5
 80018c2:	4630      	mov	r0, r6
 80018c4:	f000 f862 	bl	800198c <_sbrk_r>
 80018c8:	1c43      	adds	r3, r0, #1
 80018ca:	d126      	bne.n	800191a <_malloc_r+0x96>
 80018cc:	230c      	movs	r3, #12
 80018ce:	6033      	str	r3, [r6, #0]
 80018d0:	4630      	mov	r0, r6
 80018d2:	f000 f86c 	bl	80019ae <__malloc_unlock>
 80018d6:	e7e4      	b.n	80018a2 <_malloc_r+0x1e>
 80018d8:	680b      	ldr	r3, [r1, #0]
 80018da:	1b5b      	subs	r3, r3, r5
 80018dc:	d41a      	bmi.n	8001914 <_malloc_r+0x90>
 80018de:	2b0b      	cmp	r3, #11
 80018e0:	d90f      	bls.n	8001902 <_malloc_r+0x7e>
 80018e2:	600b      	str	r3, [r1, #0]
 80018e4:	50cd      	str	r5, [r1, r3]
 80018e6:	18cc      	adds	r4, r1, r3
 80018e8:	4630      	mov	r0, r6
 80018ea:	f000 f860 	bl	80019ae <__malloc_unlock>
 80018ee:	f104 000b 	add.w	r0, r4, #11
 80018f2:	1d23      	adds	r3, r4, #4
 80018f4:	f020 0007 	bic.w	r0, r0, #7
 80018f8:	1ac3      	subs	r3, r0, r3
 80018fa:	d01b      	beq.n	8001934 <_malloc_r+0xb0>
 80018fc:	425a      	negs	r2, r3
 80018fe:	50e2      	str	r2, [r4, r3]
 8001900:	bd70      	pop	{r4, r5, r6, pc}
 8001902:	428c      	cmp	r4, r1
 8001904:	bf0d      	iteet	eq
 8001906:	6863      	ldreq	r3, [r4, #4]
 8001908:	684b      	ldrne	r3, [r1, #4]
 800190a:	6063      	strne	r3, [r4, #4]
 800190c:	6013      	streq	r3, [r2, #0]
 800190e:	bf18      	it	ne
 8001910:	460c      	movne	r4, r1
 8001912:	e7e9      	b.n	80018e8 <_malloc_r+0x64>
 8001914:	460c      	mov	r4, r1
 8001916:	6849      	ldr	r1, [r1, #4]
 8001918:	e7ca      	b.n	80018b0 <_malloc_r+0x2c>
 800191a:	1cc4      	adds	r4, r0, #3
 800191c:	f024 0403 	bic.w	r4, r4, #3
 8001920:	42a0      	cmp	r0, r4
 8001922:	d005      	beq.n	8001930 <_malloc_r+0xac>
 8001924:	1a21      	subs	r1, r4, r0
 8001926:	4630      	mov	r0, r6
 8001928:	f000 f830 	bl	800198c <_sbrk_r>
 800192c:	3001      	adds	r0, #1
 800192e:	d0cd      	beq.n	80018cc <_malloc_r+0x48>
 8001930:	6025      	str	r5, [r4, #0]
 8001932:	e7d9      	b.n	80018e8 <_malloc_r+0x64>
 8001934:	bd70      	pop	{r4, r5, r6, pc}
 8001936:	bf00      	nop
 8001938:	200004e0 	.word	0x200004e0
 800193c:	200004e4 	.word	0x200004e4

08001940 <_realloc_r>:
 8001940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001942:	4607      	mov	r7, r0
 8001944:	4614      	mov	r4, r2
 8001946:	460e      	mov	r6, r1
 8001948:	b921      	cbnz	r1, 8001954 <_realloc_r+0x14>
 800194a:	4611      	mov	r1, r2
 800194c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001950:	f7ff bf98 	b.w	8001884 <_malloc_r>
 8001954:	b922      	cbnz	r2, 8001960 <_realloc_r+0x20>
 8001956:	f7ff ff47 	bl	80017e8 <_free_r>
 800195a:	4625      	mov	r5, r4
 800195c:	4628      	mov	r0, r5
 800195e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001960:	f000 f826 	bl	80019b0 <_malloc_usable_size_r>
 8001964:	4284      	cmp	r4, r0
 8001966:	d90f      	bls.n	8001988 <_realloc_r+0x48>
 8001968:	4621      	mov	r1, r4
 800196a:	4638      	mov	r0, r7
 800196c:	f7ff ff8a 	bl	8001884 <_malloc_r>
 8001970:	4605      	mov	r5, r0
 8001972:	2800      	cmp	r0, #0
 8001974:	d0f2      	beq.n	800195c <_realloc_r+0x1c>
 8001976:	4631      	mov	r1, r6
 8001978:	4622      	mov	r2, r4
 800197a:	f7ff ff0f 	bl	800179c <memcpy>
 800197e:	4631      	mov	r1, r6
 8001980:	4638      	mov	r0, r7
 8001982:	f7ff ff31 	bl	80017e8 <_free_r>
 8001986:	e7e9      	b.n	800195c <_realloc_r+0x1c>
 8001988:	4635      	mov	r5, r6
 800198a:	e7e7      	b.n	800195c <_realloc_r+0x1c>

0800198c <_sbrk_r>:
 800198c:	b538      	push	{r3, r4, r5, lr}
 800198e:	4c06      	ldr	r4, [pc, #24]	; (80019a8 <_sbrk_r+0x1c>)
 8001990:	2300      	movs	r3, #0
 8001992:	4605      	mov	r5, r0
 8001994:	4608      	mov	r0, r1
 8001996:	6023      	str	r3, [r4, #0]
 8001998:	f7ff fb7c 	bl	8001094 <_sbrk>
 800199c:	1c43      	adds	r3, r0, #1
 800199e:	d102      	bne.n	80019a6 <_sbrk_r+0x1a>
 80019a0:	6823      	ldr	r3, [r4, #0]
 80019a2:	b103      	cbz	r3, 80019a6 <_sbrk_r+0x1a>
 80019a4:	602b      	str	r3, [r5, #0]
 80019a6:	bd38      	pop	{r3, r4, r5, pc}
 80019a8:	20000558 	.word	0x20000558

080019ac <__malloc_lock>:
 80019ac:	4770      	bx	lr

080019ae <__malloc_unlock>:
 80019ae:	4770      	bx	lr

080019b0 <_malloc_usable_size_r>:
 80019b0:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80019b4:	2800      	cmp	r0, #0
 80019b6:	f1a0 0004 	sub.w	r0, r0, #4
 80019ba:	bfbc      	itt	lt
 80019bc:	580b      	ldrlt	r3, [r1, r0]
 80019be:	18c0      	addlt	r0, r0, r3
 80019c0:	4770      	bx	lr
 80019c2:	0000      	movs	r0, r0

080019c4 <_init>:
 80019c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019c6:	bf00      	nop
 80019c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019ca:	bc08      	pop	{r3}
 80019cc:	469e      	mov	lr, r3
 80019ce:	4770      	bx	lr

080019d0 <_fini>:
 80019d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019d2:	bf00      	nop
 80019d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019d6:	bc08      	pop	{r3}
 80019d8:	469e      	mov	lr, r3
 80019da:	4770      	bx	lr
